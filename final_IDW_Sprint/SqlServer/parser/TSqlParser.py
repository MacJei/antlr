# Generated from TSql.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0344")
        buf.write("\u0f9c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\3\2\7\2\u01ac\n\2\f\2\16\2\u01af\13\2")
        buf.write("\3\2\3\2\3\3\3\3\7\3\u01b5\n\3\f\3\16\3\u01b8\13\3\3\3")
        buf.write("\5\3\u01bb\n\3\3\3\3\3\7\3\u01bf\n\3\f\3\16\3\u01c2\13")
        buf.write("\3\5\3\u01c4\n\3\3\4\3\4\5\4\u01c8\n\4\6\4\u01ca\n\4\r")
        buf.write("\4\16\4\u01cb\3\5\3\5\3\5\3\5\5\5\u01d2\n\5\3\6\3\6\3")
        buf.write("\6\3\6\3\6\5\6\u01d9\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\5\7\u01e7\n\7\3\b\3\b\5\b\u01eb\n\b")
        buf.write("\3\b\5\b\u01ee\n\b\3\b\3\b\5\b\u01f2\n\b\3\t\3\t\5\t\u01f6")
        buf.write("\n\t\3\n\3\n\5\n\u01fa\n\n\3\13\3\13\3\13\5\13\u01ff\n")
        buf.write("\13\3\13\3\13\3\13\5\13\u0204\n\13\5\13\u0206\n\13\3\f")
        buf.write("\3\f\5\f\u020a\n\f\3\f\5\f\u020d\n\f\3\r\3\r\3\r\3\r\3")
        buf.write("\r\5\r\u0214\n\r\3\r\5\r\u0217\n\r\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u0220\n\16\3\16\5\16\u0223\n\16\3")
        buf.write("\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\5\22\u022e")
        buf.write("\n\22\3\22\5\22\u0231\n\22\3\22\3\22\3\22\5\22\u0236\n")
        buf.write("\22\3\22\3\22\3\22\5\22\u023b\n\22\3\22\5\22\u023e\n\22")
        buf.write("\3\22\3\22\3\22\5\22\u0243\n\22\3\23\3\23\5\23\u0247\n")
        buf.write("\23\3\23\5\23\u024a\n\23\3\23\3\23\5\23\u024e\n\23\3\23")
        buf.write("\5\23\u0251\n\23\3\23\5\23\u0254\n\23\3\24\3\24\3\24\3")
        buf.write("\24\3\24\5\24\u025b\n\24\3\24\3\24\5\24\u025f\n\24\5\24")
        buf.write("\u0261\n\24\3\25\3\25\3\25\5\25\u0266\n\25\3\25\3\25\7")
        buf.write("\25\u026a\n\25\f\25\16\25\u026d\13\25\3\25\5\25\u0270")
        buf.write("\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26")
        buf.write("\u027b\n\26\f\26\16\26\u027e\13\26\3\26\3\26\3\26\5\26")
        buf.write("\u0283\n\26\3\26\5\26\u0286\n\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\7\26\u028d\n\26\f\26\16\26\u0290\13\26\5\26\u0292")
        buf.write("\n\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u02a3\n\30\3\31\3\31\3")
        buf.write("\31\3\31\5\31\u02a9\n\31\3\32\3\32\3\33\5\33\u02ae\n\33")
        buf.write("\3\33\5\33\u02b1\n\33\3\33\5\33\u02b4\n\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\5\33\u02bb\n\33\6\33\u02bd\n\33\r\33\16")
        buf.write("\33\u02be\3\34\3\34\3\34\3\34\3\34\5\34\u02c6\n\34\3\35")
        buf.write("\3\35\3\35\3\35\3\35\5\35\u02cd\n\35\3\35\3\35\3\35\3")
        buf.write("\35\5\35\u02d3\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\5\35\u02e0\n\35\3\35\3\35\5\35\u02e4")
        buf.write("\n\35\3\35\3\35\3\35\5\35\u02e9\n\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\5\35\u02f3\n\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\5\35\u02fc\n\35\3\35\3\35\5\35\u0300")
        buf.write("\n\35\3\36\3\36\3\36\3\36\5\36\u0306\n\36\3\36\5\36\u0309")
        buf.write("\n\36\3\36\3\36\3\36\5\36\u030e\n\36\3\37\3\37\3\37\3")
        buf.write("\37\3\37\5\37\u0315\n\37\5\37\u0317\n\37\3\37\3\37\3\37")
        buf.write("\3\37\5\37\u031d\n\37\5\37\u031f\n\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\5\37\u0327\n\37\5\37\u0329\n\37\3\37\3\37")
        buf.write("\3\37\3\37\5\37\u032f\n\37\5\37\u0331\n\37\3\37\3\37\3")
        buf.write("\37\3\37\5\37\u0337\n\37\5\37\u0339\n\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\5\37\u0340\n\37\3\37\5\37\u0343\n\37\5\37\u0345")
        buf.write("\n\37\3\37\5\37\u0348\n\37\3\37\3\37\5\37\u034c\n\37\5")
        buf.write("\37\u034e\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u0357\n\37\3 \3 \3 \3 \5 \u035d\n \3 \3 \5 \u0361\n ")
        buf.write("\3!\3!\3!\3!\3!\3!\5!\u0369\n!\3!\3!\3!\3!\3!\5!\u0370")
        buf.write("\n!\3!\3!\3!\3!\5!\u0376\n!\5!\u0378\n!\3\"\3\"\3\"\3")
        buf.write("\"\3#\3#\3#\3#\3#\5#\u0383\n#\3#\3#\3#\5#\u0388\n#\3#")
        buf.write("\3#\3#\3#\5#\u038e\n#\6#\u0390\n#\r#\16#\u0391\3#\3#\3")
        buf.write("$\3$\3$\3$\3$\3$\5$\u039c\n$\3%\3%\3%\3%\3%\3%\5%\u03a4")
        buf.write("\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u03b0\n%\3&\5&\u03b3")
        buf.write("\n&\3&\3&\3&\3&\3&\3&\5&\u03bb\n&\5&\u03bd\n&\3&\5&\u03c0")
        buf.write("\n&\3&\3&\5&\u03c4\n&\3&\5&\u03c7\n&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\5&\u03d1\n&\3&\3&\7&\u03d5\n&\f&\16&\u03d8\13")
        buf.write("&\3&\3&\3&\3&\3&\5&\u03df\n&\3&\3&\5&\u03e3\n&\3&\3&\5")
        buf.write("&\u03e7\n&\3&\3&\3&\3&\3&\3&\3&\5&\u03f0\n&\3&\3&\7&\u03f4")
        buf.write("\n&\f&\16&\u03f7\13&\3&\5&\u03fa\n&\3&\5&\u03fd\n&\3&")
        buf.write("\3&\3\'\3\'\3\'\3\'\3\'\7\'\u0406\n\'\f\'\16\'\u0409\13")
        buf.write("\'\3\'\5\'\u040c\n\'\3(\3(\3(\3(\3(\5(\u0413\n(\3(\3(")
        buf.write("\3(\5(\u0418\n(\3)\5)\u041b\n)\3)\3)\3)\3)\3)\3)\5)\u0423")
        buf.write("\n)\3)\3)\5)\u0427\n)\3)\5)\u042a\n)\3)\3)\5)\u042e\n")
        buf.write(")\3)\5)\u0431\n)\3)\3)\5)\u0435\n)\3)\3)\3)\3)\3)\5)\u043c")
        buf.write("\n)\3)\3)\5)\u0440\n)\5)\u0442\n)\5)\u0444\n)\3)\5)\u0447")
        buf.write("\n)\3)\5)\u044a\n)\3)\5)\u044d\n)\3*\3*\3*\3*\5*\u0453")
        buf.write("\n*\3+\5+\u0456\n+\3+\3+\3+\3+\3+\3+\5+\u045e\n+\5+\u0460")
        buf.write("\n+\3+\5+\u0463\n+\3+\3+\5+\u0467\n+\3+\5+\u046a\n+\3")
        buf.write("+\3+\3+\3+\5+\u0470\n+\3+\5+\u0473\n+\3+\3+\5+\u0477\n")
        buf.write("+\3+\5+\u047a\n+\3+\5+\u047d\n+\3,\3,\3,\3,\3,\5,\u0484")
        buf.write("\n,\3-\5-\u0487\n-\3-\3-\3-\3-\3-\5-\u048e\n-\3-\3-\3")
        buf.write("-\3-\5-\u0494\n-\7-\u0496\n-\f-\16-\u0499\13-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\5-\u04a2\n-\3-\5-\u04a5\n-\3.\5.\u04a8\n")
        buf.write(".\3.\3.\5.\u04ac\n.\3.\5.\u04af\n.\3.\5.\u04b2\n.\3.\5")
        buf.write(".\u04b5\n.\3/\3/\5/\u04b9\n/\3\60\5\60\u04bc\n\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\5\60\u04c4\n\60\5\60\u04c6\n")
        buf.write("\60\3\60\3\60\5\60\u04ca\n\60\3\60\5\60\u04cd\n\60\3\60")
        buf.write("\3\60\3\60\3\60\7\60\u04d3\n\60\f\60\16\60\u04d6\13\60")
        buf.write("\3\60\5\60\u04d9\n\60\3\60\3\60\5\60\u04dd\n\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\5\60\u04e4\n\60\3\60\3\60\5\60\u04e8")
        buf.write("\n\60\5\60\u04ea\n\60\5\60\u04ec\n\60\3\60\5\60\u04ef")
        buf.write("\n\60\3\60\5\60\u04f2\n\60\3\60\5\60\u04f5\n\60\3\61\3")
        buf.write("\61\3\61\3\61\7\61\u04fb\n\61\f\61\16\61\u04fe\13\61\3")
        buf.write("\61\3\61\3\61\5\61\u0503\n\61\3\61\3\61\3\61\3\61\5\61")
        buf.write("\u0509\n\61\5\61\u050b\n\61\3\62\3\62\5\62\u050f\n\62")
        buf.write("\3\62\5\62\u0512\n\62\3\63\3\63\3\63\5\63\u0517\n\63\3")
        buf.write("\63\3\63\3\63\5\63\u051c\n\63\3\63\5\63\u051f\n\63\3\64")
        buf.write("\3\64\5\64\u0523\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0534")
        buf.write("\n\66\3\66\3\66\5\66\u0538\n\66\3\66\3\66\3\66\3\67\3")
        buf.write("\67\3\67\5\67\u0540\n\67\3\67\3\67\5\67\u0544\n\67\3\67")
        buf.write("\3\67\3\67\3\67\7\67\u054a\n\67\f\67\16\67\u054d\13\67")
        buf.write("\3\67\5\67\u0550\n\67\3\67\3\67\3\67\5\67\u0555\n\67\3")
        buf.write("\67\3\67\5\67\u0559\n\67\3\67\3\67\3\67\3\67\3\67\5\67")
        buf.write("\u0560\n\67\3\67\3\67\3\67\3\67\5\67\u0566\n\67\5\67\u0568")
        buf.write("\n\67\38\38\58\u056c\n8\38\38\58\u0570\n8\38\38\58\u0574")
        buf.write("\n8\38\58\u0577\n8\38\38\58\u057b\n8\38\38\38\38\58\u0581")
        buf.write("\n8\38\38\58\u0585\n8\58\u0587\n8\39\39\39\3:\3:\5:\u058e")
        buf.write("\n:\3:\3:\5:\u0592\n:\3:\3:\3:\7:\u0597\n:\f:\16:\u059a")
        buf.write("\13:\5:\u059c\n:\3:\5:\u059f\n:\3:\3:\3:\3:\7:\u05a5\n")
        buf.write(":\f:\16:\u05a8\13:\3:\3:\5:\u05ac\n:\3:\3:\3:\5:\u05b1")
        buf.write("\n:\3:\5:\u05b4\n:\5:\u05b6\n:\3;\3;\5;\u05ba\n;\3;\3")
        buf.write(";\5;\u05be\n;\3;\5;\u05c1\n;\3;\3;\5;\u05c5\n;\3<\3<\3")
        buf.write("=\3=\5=\u05cb\n=\3=\3=\3=\5=\u05d0\n=\3=\3=\3=\3=\3=\5")
        buf.write("=\u05d7\n=\5=\u05d9\n=\3=\3=\5=\u05dd\n=\3=\3=\3=\3=\7")
        buf.write("=\u05e3\n=\f=\16=\u05e6\13=\3=\3=\3=\5=\u05eb\n=\3=\3")
        buf.write("=\5=\u05ef\n=\3=\5=\u05f2\n=\3=\3=\3=\3=\3=\3=\3=\5=\u05fb")
        buf.write("\n=\3=\5=\u05fe\n=\3=\3=\3=\3=\5=\u0604\n=\3>\3>\3>\3")
        buf.write(">\3>\5>\u060b\n>\3>\3>\3>\5>\u0610\n>\3>\3>\3>\3>\3>\3")
        buf.write(">\5>\u0618\n>\3?\3?\3?\5?\u061d\n?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\5?\u0629\n?\5?\u062b\n?\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\5@\u0636\n@\3A\3A\3A\3A\3A\5A\u063d\nA\3A\3A\3")
        buf.write("A\3A\3A\3A\7A\u0645\nA\fA\16A\u0648\13A\3B\3B\3B\3B\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u065e")
        buf.write("\nC\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u066b\nD\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u067b\nE\3E\3")
        buf.write("E\3E\5E\u0680\nE\3E\3E\3E\3E\3E\5E\u0687\nE\3E\5E\u068a")
        buf.write("\nE\6E\u068c\nE\rE\16E\u068d\5E\u0690\nE\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u06a1\nF\3G\3G\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u06b0\nH\3I\3I\3I\3I\3")
        buf.write("I\3I\5I\u06b8\nI\3I\3I\3I\3I\3I\3I\3I\5I\u06c1\nI\3I\3")
        buf.write("I\3I\3I\3I\3I\5I\u06c9\nI\3J\3J\3J\3J\3J\3J\3J\5J\u06d2")
        buf.write("\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u06dd\nJ\3J\3J\5J\u06e1")
        buf.write("\nJ\5J\u06e3\nJ\5J\u06e5\nJ\3K\3K\3K\3K\5K\u06eb\nK\3")
        buf.write("K\3K\3K\5K\u06f0\nK\3K\3K\3K\3K\3K\5K\u06f7\nK\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0704\nK\5K\u0706\nK\5K\u0708")
        buf.write("\nK\3K\5K\u070b\nK\3K\5K\u070e\nK\3L\3L\3L\3L\3L\5L\u0715")
        buf.write("\nL\3L\5L\u0718\nL\3L\3L\3L\3L\5L\u071e\nL\3L\3L\3L\5")
        buf.write("L\u0723\nL\5L\u0725\nL\3L\5L\u0728\nL\3L\3L\3L\3L\5L\u072e")
        buf.write("\nL\3L\3L\3L\3L\3L\3L\5L\u0736\nL\5L\u0738\nL\3L\5L\u073b")
        buf.write("\nL\3L\3L\5L\u073f\nL\3L\5L\u0742\nL\3L\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\5L\u074c\nL\3L\5L\u074f\nL\3L\3L\5L\u0753\nL\3")
        buf.write("L\5L\u0756\nL\3L\3L\3L\3L\5L\u075c\nL\3L\5L\u075f\nL\5")
        buf.write("L\u0761\nL\3M\3M\5M\u0765\nM\3N\3N\3N\5N\u076a\nN\3O\3")
        buf.write("O\5O\u076e\nO\3P\3P\3P\3P\3Q\3Q\5Q\u0776\nQ\3Q\3Q\3Q\5")
        buf.write("Q\u077b\nQ\3R\3R\3R\3R\3R\3S\3S\3S\5S\u0785\nS\3S\3S\3")
        buf.write("S\3T\3T\3T\3T\3U\3U\5U\u0790\nU\3U\7U\u0793\nU\fU\16U")
        buf.write("\u0796\13U\3V\3V\3V\5V\u079b\nV\3W\3W\3W\3W\5W\u07a1\n")
        buf.write("W\3W\3W\5W\u07a5\nW\3W\5W\u07a8\nW\3W\3W\5W\u07ac\nW\3")
        buf.write("W\3W\5W\u07b0\nW\3W\3W\3W\3W\3W\3W\5W\u07b8\nW\3W\3W\3")
        buf.write("W\5W\u07bd\nW\5W\u07bf\nW\3W\5W\u07c2\nW\3W\7W\u07c5\n")
        buf.write("W\fW\16W\u07c8\13W\3X\3X\3X\3X\3X\3X\5X\u07d0\nX\3Y\3")
        buf.write("Y\5Y\u07d4\nY\3Y\3Y\3Y\5Y\u07d9\nY\3Y\5Y\u07dc\nY\3Y\5")
        buf.write("Y\u07df\nY\3Y\3Y\3Y\3Y\5Y\u07e5\nY\3Y\3Y\3Y\3Y\3Y\3Y\5")
        buf.write("Y\u07ed\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u07f5\nY\3Y\5Y\u07f8\n")
        buf.write("Y\3Y\5Y\u07fb\nY\3Z\3Z\5Z\u07ff\nZ\3Z\3Z\3Z\5Z\u0804\n")
        buf.write("Z\3Z\5Z\u0807\nZ\3Z\3Z\3Z\3Z\5Z\u080d\nZ\3Z\3Z\5Z\u0811")
        buf.write("\nZ\3Z\3Z\3Z\3Z\5Z\u0817\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u081f")
        buf.write("\nZ\3Z\3Z\3Z\3Z\6Z\u0825\nZ\rZ\16Z\u0826\3Z\5Z\u082a\n")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0839\nZ\3")
        buf.write("Z\5Z\u083c\nZ\3Z\5Z\u083f\nZ\5Z\u0841\nZ\3[\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\3[\5[\u084c\n[\3\\\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\3\\\5\\\u0857\n\\\3]\3]\3]\3]\3]\7]\u085e\n]\f]\16")
        buf.write("]\u0861\13]\3]\3]\3^\3^\3^\3^\3^\5^\u086a\n^\3_\3_\3_")
        buf.write("\3_\3_\3_\3_\3_\5_\u0874\n_\5_\u0876\n_\5_\u0878\n_\3")
        buf.write("_\5_\u087b\n_\3_\5_\u087e\n_\3_\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\5_\u0889\n_\5_\u088b\n_\5_\u088d\n_\3_\5_\u0890\n_\3")
        buf.write("`\7`\u0893\n`\f`\16`\u0896\13`\3`\3`\3`\3a\3a\3a\3a\3")
        buf.write("a\5a\u08a0\na\3b\3b\3b\3b\3b\3b\3b\5b\u08a9\nb\3b\5b\u08ac")
        buf.write("\nb\3b\5b\u08af\nb\3b\3b\3b\3b\3b\7b\u08b6\nb\fb\16b\u08b9")
        buf.write("\13b\5b\u08bb\nb\3b\5b\u08be\nb\3c\3c\3c\3c\3c\5c\u08c5")
        buf.write("\nc\3c\5c\u08c8\nc\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3")
        buf.write("c\3c\5c\u08d7\nc\3c\5c\u08da\nc\3c\3c\3c\3c\3c\5c\u08e1")
        buf.write("\nc\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u08f1")
        buf.write("\nc\3d\3d\5d\u08f5\nd\3e\3e\3e\3e\3e\3e\3e\3e\5e\u08ff")
        buf.write("\ne\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\7e\u0912\ne\fe\16e\u0915\13e\3f\3f\3f\3f\5f\u091b\n")
        buf.write("f\3g\3g\3g\6g\u0920\ng\rg\16g\u0921\3g\3g\5g\u0926\ng")
        buf.write("\3g\3g\3g\3g\6g\u092c\ng\rg\16g\u092d\3g\3g\5g\u0932\n")
        buf.write("g\3g\3g\5g\u0936\ng\3h\3h\3h\3h\5h\u093c\nh\3i\3i\3i\3")
        buf.write("i\3i\3i\3i\3i\5i\u0946\ni\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0950")
        buf.write("\nj\3k\3k\3l\3l\3l\5l\u0957\nl\3l\3l\3l\7l\u095c\nl\f")
        buf.write("l\16l\u095f\13l\3l\3l\3l\3l\3l\3l\5l\u0967\nl\3l\3l\3")
        buf.write("l\3l\3l\5l\u096e\nl\3m\3m\3m\3m\3m\5m\u0975\nm\3m\3m\3")
        buf.write("m\3m\3m\3n\3n\5n\u097e\nn\3n\3n\5n\u0982\nn\3n\3n\3n\3")
        buf.write("n\3n\3n\3n\3n\5n\u098c\nn\3o\3o\3o\7o\u0991\no\fo\16o")
        buf.write("\u0994\13o\3p\3p\3p\7p\u0999\np\fp\16p\u099c\13p\3q\3")
        buf.write("q\3q\7q\u09a1\nq\fq\16q\u09a4\13q\3r\5r\u09a7\nr\3r\3")
        buf.write("r\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3")
        buf.write("s\5s\u09bd\ns\3s\3s\3s\3s\3s\3s\3s\5s\u09c6\ns\3s\3s\3")
        buf.write("s\3s\5s\u09cc\ns\3s\3s\3s\3s\5s\u09d2\ns\3s\3s\3s\3s\5")
        buf.write("s\u09d8\ns\3s\3s\3s\3s\3s\3s\3s\3s\5s\u09e2\ns\3t\3t\3")
        buf.write("t\3t\3t\5t\u09e9\nt\3t\7t\u09ec\nt\ft\16t\u09ef\13t\3")
        buf.write("u\3u\5u\u09f3\nu\3u\3u\5u\u09f7\nu\3u\3u\3u\3u\3u\5u\u09fe")
        buf.write("\nu\3v\3v\5v\u0a02\nv\3v\5v\u0a05\nv\3v\3v\3v\5v\u0a0a")
        buf.write("\nv\3v\3v\5v\u0a0e\nv\3v\3v\5v\u0a12\nv\3v\3v\3v\5v\u0a17")
        buf.write("\nv\3v\3v\3v\7v\u0a1c\nv\fv\16v\u0a1f\13v\5v\u0a21\nv")
        buf.write("\3v\3v\5v\u0a25\nv\3w\3w\3w\5w\u0a2a\nw\3w\3w\5w\u0a2e")
        buf.write("\nw\3x\3x\3x\3x\3x\3x\3x\5x\u0a37\nx\3y\3y\3y\3y\3y\5")
        buf.write("y\u0a3e\ny\3z\3z\3z\3z\3z\7z\u0a45\nz\fz\16z\u0a48\13")
        buf.write("z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0a53\nz\5z\u0a55\nz\3")
        buf.write("{\3{\3{\3{\3{\3{\3{\3{\5{\u0a5f\n{\3{\5{\u0a62\n{\3{\7")
        buf.write("{\u0a65\n{\f{\16{\u0a68\13{\3{\3{\3{\3{\3{\3{\5{\u0a70")
        buf.write("\n{\5{\u0a72\n{\5{\u0a74\n{\3{\3{\3{\5{\u0a79\n{\3{\3")
        buf.write("{\3{\3{\7{\u0a7f\n{\f{\16{\u0a82\13{\3{\3{\5{\u0a86\n")
        buf.write("{\3{\3{\3{\3{\3{\3{\5{\u0a8e\n{\3{\7{\u0a91\n{\f{\16{")
        buf.write("\u0a94\13{\3{\3{\3{\5{\u0a99\n{\3{\3{\3{\3{\3{\3{\3{\3")
        buf.write("{\5{\u0aa3\n{\5{\u0aa5\n{\3{\3{\5{\u0aa9\n{\3{\3{\5{\u0aad")
        buf.write("\n{\5{\u0aaf\n{\3|\3|\3|\3}\3}\5}\u0ab6\n}\3~\3~\3\177")
        buf.write("\3\177\3\177\3\177\3\177\7\177\u0abf\n\177\f\177\16\177")
        buf.write("\u0ac2\13\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\7\u0080\u0ae1\n\u0080\f\u0080\16\u0080")
        buf.write("\u0ae4\13\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\5\u0080\u0af3\n\u0080\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\5\u0081\u0afa\n\u0081\5\u0081\u0afc\n")
        buf.write("\u0081\3\u0082\3\u0082\3\u0082\7\u0082\u0b01\n\u0082\f")
        buf.write("\u0082\16\u0082\u0b04\13\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\7\u0083\u0b0a\n\u0083\f\u0083\16\u0083\u0b0d")
        buf.write("\13\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\5\u0084\u0b16\n\u0084\3\u0085\3\u0085\3\u0085")
        buf.write("\5\u0085\u0b1b\n\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\5\u0085\u0b22\n\u0085\3\u0085\5\u0085\u0b25\n")
        buf.write("\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0b2c\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\5\u0086\u0b33\n\u0086\3\u0086\5\u0086\u0b36\n\u0086\5")
        buf.write("\u0086\u0b38\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3")
        buf.write("\u0087\3\u0087\5\u0087\u0b40\n\u0087\5\u0087\u0b42\n\u0087")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0b48\n\u0088")
        buf.write("\3\u0089\3\u0089\3\u0089\7\u0089\u0b4d\n\u0089\f\u0089")
        buf.write("\16\u0089\u0b50\13\u0089\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\5\u008a\u0b57\n\u008a\3\u008b\3\u008b\7\u008b")
        buf.write("\u0b5b\n\u008b\f\u008b\16\u008b\u0b5e\13\u008b\3\u008c")
        buf.write("\3\u008c\5\u008c\u0b62\n\u008c\3\u008c\3\u008c\5\u008c")
        buf.write("\u0b66\n\u008c\3\u008c\3\u008c\5\u008c\u0b6a\n\u008c\3")
        buf.write("\u008c\3\u008c\3\u008c\5\u008c\u0b6f\n\u008c\5\u008c\u0b71")
        buf.write("\n\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c")
        buf.write("\u0b78\n\u008c\3\u008c\3\u008c\5\u008c\u0b7c\n\u008c\3")
        buf.write("\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0b83\n")
        buf.write("\u008c\5\u008c\u0b85\n\u008c\3\u008c\3\u008c\3\u008c\3")
        buf.write("\u008c\3\u008c\5\u008c\u0b8c\n\u008c\5\u008c\u0b8e\n\u008c")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\5\u008d\u0b97\n\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\5\u008d\u0b9f\n\u008d\3\u008e\3\u008e")
        buf.write("\3\u008e\7\u008e\u0ba4\n\u008e\f\u008e\16\u008e\u0ba7")
        buf.write("\13\u008e\3\u008f\3\u008f\3\u008f\5\u008f\u0bac\n\u008f")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0091\5\u0091\u0bb7\n\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u0bbb\n\u0091\5\u0091\u0bbd\n\u0091\3\u0091\5")
        buf.write("\u0091\u0bc0\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3")
        buf.write("\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bd8\n\u0091")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094")
        buf.write("\7\u0094\u0bef\n\u0094\f\u0094\16\u0094\u0bf2\13\u0094")
        buf.write("\3\u0095\3\u0095\5\u0095\u0bf6\n\u0095\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\7\u0096\u0c08\n\u0096\f\u0096\16\u0096\u0c0b\13\u0096")
        buf.write("\3\u0096\5\u0096\u0c0e\n\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u0c12\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\5\u0098\u0c22\n\u0098\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0c2a\n\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099")
        buf.write("\u0c40\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\5\u0099\u0c7a\n\u0099\3\u0099\3\u0099")
        buf.write("\5\u0099\u0c7e\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\5\u0099\u0ca8\n\u0099\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\5\u009a\u0caf\n\u009a\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\5\u009b\u0cb5\n\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\5\u009b\u0cc2\n\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0cd1\n\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\5\u009b\u0cdc\n\u009b\3\u009c\3\u009c")
        buf.write("\3\u009c\5\u009c\u0ce1\n\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0ceb")
        buf.write("\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\5\u009c\u0cf4\n\u009c\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a2\5\u00a2\u0d16\n\u00a2\3\u00a2\3\u00a2\3\u00a3")
        buf.write("\5\u00a3\u0d1b\n\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4")
        buf.write("\5\u00a4\u0d21\n\u00a4\3\u00a5\5\u00a5\u0d24\n\u00a5\3")
        buf.write("\u00a5\3\u00a5\3\u00a5\5\u00a5\u0d29\n\u00a5\3\u00a5\7")
        buf.write("\u00a5\u0d2c\n\u00a5\f\u00a5\16\u00a5\u0d2f\13\u00a5\3")
        buf.write("\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write("\u0d37\n\u00a6\3\u00a6\7\u00a6\u0d3a\n\u00a6\f\u00a6\16")
        buf.write("\u00a6\u0d3d\13\u00a6\3\u00a6\3\u00a6\3\u00a7\5\u00a7")
        buf.write("\u0d42\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\7\u00a7\u0d49\n\u00a7\f\u00a7\16\u00a7\u0d4c\13\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\7\u00a7\u0d53")
        buf.write("\n\u00a7\f\u00a7\16\u00a7\u0d56\13\u00a7\5\u00a7\u0d58")
        buf.write("\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\7\u00a7\u0d64\n\u00a7")
        buf.write("\f\u00a7\16\u00a7\u0d67\13\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\5\u00a7\u0d6c\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\5\u00a7\u0d74\n\u00a7\3\u00a8\3\u00a8")
        buf.write("\5\u00a8\u0d78\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\7\u00a9\u0d7e\n\u00a9\f\u00a9\16\u00a9\u0d81\13\u00a9")
        buf.write("\3\u00a9\3\u00a9\3\u00aa\3\u00aa\5\u00aa\u0d87\n\u00aa")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\7\u00ab\u0d92\n\u00ab\f\u00ab\16\u00ab")
        buf.write("\u0d95\13\u00ab\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u0d9a")
        buf.write("\n\u00ac\f\u00ac\16\u00ac\u0d9d\13\u00ac\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\5\u00ad\u0da9\n\u00ad\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\5\u00ae\u0db0\n\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\5\u00ae\u0db6\n\u00ae\3\u00ae\3\u00ae")
        buf.write("\5\u00ae\u0dba\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0dcb\n\u00ae")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af")
        buf.write("\u0dda\n\u00af\5\u00af\u0ddc\n\u00af\3\u00af\3\u00af\3")
        buf.write("\u00af\5\u00af\u0de1\n\u00af\3\u00b0\5\u00b0\u0de4\n\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\5\u00b1\u0ded\n\u00b1\3\u00b1\5\u00b1\u0df0\n\u00b1\3")
        buf.write("\u00b1\5\u00b1\u0df3\n\u00b1\3\u00b1\3\u00b1\3\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\5\u00b3\u0e00\n\u00b3\3\u00b4\3\u00b4\5\u00b4")
        buf.write("\u0e04\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\5\u00b5\u0e0c\n\u00b5\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\5\u00b6\u0e12\n\u00b6\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\5\u00b7\u0e1e\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0e25\n\u00b7\3\u00b7\3\u00b7\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\5\u00b8\u0e2c\n\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0e33\n\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0e39\n\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0e40\n\u00b8")
        buf.write("\3\u00b8\5\u00b8\u0e43\n\u00b8\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\5\u00b9\u0e48\n\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\5\u00ba\u0e50\n\u00ba\3\u00ba\3\u00ba")
        buf.write("\5\u00ba\u0e54\n\u00ba\3\u00ba\5\u00ba\u0e57\n\u00ba\3")
        buf.write("\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write("\u0e5f\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u0e63\n\u00bb\3")
        buf.write("\u00bb\5\u00bb\u0e66\n\u00bb\3\u00bc\3\u00bc\5\u00bc\u0e6a")
        buf.write("\n\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e6f\n\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e75\n\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e7b\n\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e81\n\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e87\n\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e8d\n\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e93\n\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e99\n\u00bd")
        buf.write("\3\u00bd\5\u00bd\u0e9c\n\u00bd\3\u00be\3\u00be\5\u00be")
        buf.write("\u0ea0\n\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0ea5\n")
        buf.write("\u00be\7\u00be\u0ea7\n\u00be\f\u00be\16\u00be\u0eaa\13")
        buf.write("\u00be\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u0eaf\n\u00bf\f")
        buf.write("\u00bf\16\u00bf\u0eb2\13\u00bf\3\u00c0\3\u00c0\5\u00c0")
        buf.write("\u0eb6\n\u00c0\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c3")
        buf.write("\5\u00c3\u0ebd\n\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0ec6\n\u00c4\5\u00c4")
        buf.write("\u0ec8\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\5\u00c5\u0ecf\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6")
        buf.write("\u0edb\n\u00c6\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0ee0\n")
        buf.write("\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0eeb\n\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\5\u00c7\u0ef5\n\u00c7\5\u00c7\u0ef7\n\u00c7\3\u00c7\3")
        buf.write("\u00c7\3\u00c7\3\u00c7\5\u00c7\u0efd\n\u00c7\5\u00c7\u0eff")
        buf.write("\n\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0f04\n\u00c7")
        buf.write("\5\u00c7\u0f06\n\u00c7\3\u00c7\5\u00c7\u0f09\n\u00c7\3")
        buf.write("\u00c8\3\u00c8\5\u00c8\u0f0d\n\u00c8\3\u00c9\3\u00c9\5")
        buf.write("\u00c9\u0f11\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5")
        buf.write("\u00ca\u0f17\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3")
        buf.write("\u00ca\3\u00ca\3\u00ca\5\u00ca\u0f20\n\u00ca\3\u00ca\5")
        buf.write("\u00ca\u0f23\n\u00ca\5\u00ca\u0f25\n\u00ca\3\u00cb\5\u00cb")
        buf.write("\u0f28\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb")
        buf.write("\u0f2e\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u0f32\n\u00cb\3")
        buf.write("\u00cb\5\u00cb\u0f35\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3")
        buf.write("\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0f3e\n\u00cc\3")
        buf.write("\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\5\u00cd\u0f47\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce")
        buf.write("\u0f53\n\u00ce\3\u00ce\5\u00ce\u0f56\n\u00ce\3\u00cf\3")
        buf.write("\u00cf\5\u00cf\u0f5a\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3")
        buf.write("\u00cf\5\u00cf\u0f60\n\u00cf\3\u00cf\5\u00cf\u0f63\n\u00cf")
        buf.write("\3\u00cf\3\u00cf\5\u00cf\u0f67\n\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\5\u00cf\u0f6d\n\u00cf\3\u00d0\3\u00d0")
        buf.write("\3\u00d0\5\u00d0\u0f72\n\u00d0\3\u00d0\3\u00d0\5\u00d0")
        buf.write("\u0f76\n\u00d0\3\u00d0\3\u00d0\5\u00d0\u0f7a\n\u00d0\3")
        buf.write("\u00d0\3\u00d0\5\u00d0\u0f7e\n\u00d0\3\u00d1\3\u00d1\3")
        buf.write("\u00d2\3\u00d2\3\u00d2\5\u00d2\u0f85\n\u00d2\3\u00d3\3")
        buf.write("\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\5\u00d4\u0f98\n\u00d4\3\u00d5\3\u00d5")
        buf.write("\3\u00d5\2\3\u00c8\u00d6\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c")
        buf.write("\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e")
        buf.write("\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140")
        buf.write("\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152")
        buf.write("\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164")
        buf.write("\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176")
        buf.write("\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188")
        buf.write("\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a")
        buf.write("\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\2>\3\2\u031b")
        buf.write("\u031c\4\2\u031b\u031b\u0320\u0320\4\2\u01d8\u01d8\u02f0")
        buf.write("\u02f1\4\2\u031b\u031c\u0320\u0320\4\2\u00bc\u00bc\u02d1")
        buf.write("\u02d1\5\2\u0318\u0318\u031b\u031b\u0320\u0320\4\2\13")
        buf.write("\13\u00ee\u00ee\4\2\u031c\u031c\u0320\u0320\4\2\u00e3")
        buf.write("\u00e3\u00e6\u00e6\5\2\r\r\u015a\u015a\u0222\u0222\4\2")
        buf.write("\u0172\u0172\u023d\u023d\3\2\u027c\u027d\4\2\u0082\u0082")
        buf.write("\u0321\u0321\4\2\u01d4\u01d4\u01ef\u01ef\4\2\u01f6\u01f6")
        buf.write("\u02dc\u02dc\4\2\u01c6\u01c6\u0279\u0279\7\2\u0188\u018a")
        buf.write("\u01dd\u01dd\u01df\u01df\u029a\u029c\u02f6\u02f7\4\2\u0157")
        buf.write("\u0157\u0176\u0176\3\2\u0161\u0162\6\2\u01af\u01af\u027e")
        buf.write("\u027e\u02cb\u02cb\u0320\u0320\4\2\u01bf\u01bf\u01e7\u01e7")
        buf.write("\4\2\20\20;;\4\2\u0224\u0224\u02cc\u02cc\4\2\u0210\u0210")
        buf.write("\u0239\u0239\4\2\u020a\u020a\u02c1\u02c1\6\2\u01e8\u01e8")
        buf.write("\u01fd\u01fd\u022f\u022f\u02dd\u02dd\5\2\u027a\u027a\u029e")
        buf.write("\u029e\u02c2\u02c2\4\2\u0182\u0182\u02a7\u02a7\3\2\u033b")
        buf.write("\u033d\5\2\u0330\u0330\u033e\u033f\u0341\u0343\3\2\u033e")
        buf.write("\u033f\5\2\6\6\r\r\u0144\u0144\4\2\6\6cc\3\2\u0322\u0323")
        buf.write("\4\2\u02ba\u02ba\u02bd\u02bd\4\2\u0203\u0203\u0264\u0264")
        buf.write("\4\2\3\3\u0313\u0313\4\2\u019c\u019c\u0284\u0284\5\2\u01a8")
        buf.write("\u01a8\u02b8\u02b8\u02fc\u02fc\4\2\21\21__\4\2\u00ef\u00ef")
        buf.write("\u0216\u0216\5\2\u00ca\u00ca\u01bd\u01bd\u0216\u0216\5")
        buf.write("\2\u00ca\u00ca\u0216\u0216\u023e\u023e\4\2\u0208\u0208")
        buf.write("\u02d5\u02d5\4\2\u00e0\u00e0\u031b\u031c\5\2\u008d\u008d")
        buf.write("\u00b2\u00b2\u0120\u0120\6\2\u00ca\u00ca\u0216\u0216\u023e")
        buf.write("\u023e\u02a8\u02a8\4\2\u031b\u031b\u031d\u031d\5\2\u01db")
        buf.write("\u01db\u0299\u0299\u02bb\u02bb\b\2\u01a4\u01a4\u0243\u0243")
        buf.write("\u0253\u0253\u02e0\u02e1\u02e5\u02e5\u0306\u0307\3\2\u01c2")
        buf.write("\u01c3\4\2\u0204\u0204\u0232\u0232\4\2\u0230\u0230\u0233")
        buf.write("\u0233\4\2\u0298\u0298\u02bd\u02bd\4\2\65\65\u00d5\u00d5")
        buf.write("\3\2\u0111\u0112\4\2\u0243\u0243\u031c\u031c\4\2\u031c")
        buf.write("\u031c\u0322\u0322 \2((SSss\u0083\u0084\u0087\u0087\u00a1")
        buf.write("\u00a1\u00ad\u00ad\u00be\u00bf\u00e4\u00e4\u00f2\u00f2")
        buf.write("\u0106\u0106\u0108\u0108\u010a\u010a\u011b\u011c\u0123")
        buf.write("\u0123\u012a\u012a\u0138\u0138\u0141\u0141\u0145\u0145")
        buf.write("\u014c\u014c\u014e\u014e\u015a\u015a\u0182\u01e8\u01ea")
        buf.write("\u021f\u0221\u0228\u022a\u030b\u030d\u030f\u0311\u0311")
        buf.write("\u031b\u031b\u031d\u031d\3\2\u0328\u032f\2\u1206\2\u01ad")
        buf.write("\3\2\2\2\4\u01c3\3\2\2\2\6\u01c9\3\2\2\2\b\u01d1\3\2\2")
        buf.write("\2\n\u01d8\3\2\2\2\f\u01e6\3\2\2\2\16\u01e8\3\2\2\2\20")
        buf.write("\u01f3\3\2\2\2\22\u01f7\3\2\2\2\24\u0205\3\2\2\2\26\u0207")
        buf.write("\3\2\2\2\30\u020e\3\2\2\2\32\u0218\3\2\2\2\34\u0224\3")
        buf.write("\2\2\2\36\u0226\3\2\2\2 \u0228\3\2\2\2\"\u022a\3\2\2\2")
        buf.write("$\u0244\3\2\2\2&\u0255\3\2\2\2(\u0262\3\2\2\2*\u0291\3")
        buf.write("\2\2\2,\u0293\3\2\2\2.\u02a2\3\2\2\2\60\u02a8\3\2\2\2")
        buf.write("\62\u02aa\3\2\2\2\64\u02bc\3\2\2\2\66\u02c5\3\2\2\28\u02ff")
        buf.write("\3\2\2\2:\u0301\3\2\2\2<\u030f\3\2\2\2>\u0358\3\2\2\2")
        buf.write("@\u0377\3\2\2\2B\u0379\3\2\2\2D\u037d\3\2\2\2F\u039b\3")
        buf.write("\2\2\2H\u039d\3\2\2\2J\u03b2\3\2\2\2L\u040b\3\2\2\2N\u040d")
        buf.write("\3\2\2\2P\u041a\3\2\2\2R\u0452\3\2\2\2T\u0455\3\2\2\2")
        buf.write("V\u0483\3\2\2\2X\u0486\3\2\2\2Z\u04a7\3\2\2\2\\\u04b8")
        buf.write("\3\2\2\2^\u04bb\3\2\2\2`\u04f6\3\2\2\2b\u050e\3\2\2\2")
        buf.write("d\u051e\3\2\2\2f\u0522\3\2\2\2h\u0524\3\2\2\2j\u052b\3")
        buf.write("\2\2\2l\u0567\3\2\2\2n\u0586\3\2\2\2p\u0588\3\2\2\2r\u05b5")
        buf.write("\3\2\2\2t\u05b9\3\2\2\2v\u05c6\3\2\2\2x\u0603\3\2\2\2")
        buf.write("z\u0605\3\2\2\2|\u062a\3\2\2\2~\u062c\3\2\2\2\u0080\u063c")
        buf.write("\3\2\2\2\u0082\u0649\3\2\2\2\u0084\u065d\3\2\2\2\u0086")
        buf.write("\u066a\3\2\2\2\u0088\u068f\3\2\2\2\u008a\u06a0\3\2\2\2")
        buf.write("\u008c\u06a2\3\2\2\2\u008e\u06af\3\2\2\2\u0090\u06c8\3")
        buf.write("\2\2\2\u0092\u06e4\3\2\2\2\u0094\u070d\3\2\2\2\u0096\u0760")
        buf.write("\3\2\2\2\u0098\u0762\3\2\2\2\u009a\u0766\3\2\2\2\u009c")
        buf.write("\u076b\3\2\2\2\u009e\u076f\3\2\2\2\u00a0\u0773\3\2\2\2")
        buf.write("\u00a2\u077c\3\2\2\2\u00a4\u0781\3\2\2\2\u00a6\u0789\3")
        buf.write("\2\2\2\u00a8\u078d\3\2\2\2\u00aa\u079a\3\2\2\2\u00ac\u079c")
        buf.write("\3\2\2\2\u00ae\u07c9\3\2\2\2\u00b0\u07d3\3\2\2\2\u00b2")
        buf.write("\u07fe\3\2\2\2\u00b4\u0842\3\2\2\2\u00b6\u084d\3\2\2\2")
        buf.write("\u00b8\u0858\3\2\2\2\u00ba\u0864\3\2\2\2\u00bc\u086b\3")
        buf.write("\2\2\2\u00be\u0894\3\2\2\2\u00c0\u089f\3\2\2\2\u00c2\u08a1")
        buf.write("\3\2\2\2\u00c4\u08f0\3\2\2\2\u00c6\u08f4\3\2\2\2\u00c8")
        buf.write("\u08fe\3\2\2\2\u00ca\u091a\3\2\2\2\u00cc\u0935\3\2\2\2")
        buf.write("\u00ce\u093b\3\2\2\2\u00d0\u0945\3\2\2\2\u00d2\u094f\3")
        buf.write("\2\2\2\u00d4\u0951\3\2\2\2\u00d6\u096d\3\2\2\2\u00d8\u096f")
        buf.write("\3\2\2\2\u00da\u098b\3\2\2\2\u00dc\u098d\3\2\2\2\u00de")
        buf.write("\u0995\3\2\2\2\u00e0\u099d\3\2\2\2\u00e2\u09a6\3\2\2\2")
        buf.write("\u00e4\u09e1\3\2\2\2\u00e6\u09e8\3\2\2\2\u00e8\u09f6\3")
        buf.write("\2\2\2\u00ea\u09ff\3\2\2\2\u00ec\u0a26\3\2\2\2\u00ee\u0a36")
        buf.write("\3\2\2\2\u00f0\u0a3d\3\2\2\2\u00f2\u0a3f\3\2\2\2\u00f4")
        buf.write("\u0aae\3\2\2\2\u00f6\u0ab0\3\2\2\2\u00f8\u0ab3\3\2\2\2")
        buf.write("\u00fa\u0ab7\3\2\2\2\u00fc\u0ab9\3\2\2\2\u00fe\u0af2\3")
        buf.write("\2\2\2\u0100\u0af4\3\2\2\2\u0102\u0afd\3\2\2\2\u0104\u0b05")
        buf.write("\3\2\2\2\u0106\u0b15\3\2\2\2\u0108\u0b1a\3\2\2\2\u010a")
        buf.write("\u0b37\3\2\2\2\u010c\u0b41\3\2\2\2\u010e\u0b47\3\2\2\2")
        buf.write("\u0110\u0b49\3\2\2\2\u0112\u0b56\3\2\2\2\u0114\u0b58\3")
        buf.write("\2\2\2\u0116\u0b8d\3\2\2\2\u0118\u0b8f\3\2\2\2\u011a\u0ba0")
        buf.write("\3\2\2\2\u011c\u0ba8\3\2\2\2\u011e\u0bad\3\2\2\2\u0120")
        buf.write("\u0bd7\3\2\2\2\u0122\u0bd9\3\2\2\2\u0124\u0be1\3\2\2\2")
        buf.write("\u0126\u0beb\3\2\2\2\u0128\u0bf3\3\2\2\2\u012a\u0c11\3")
        buf.write("\2\2\2\u012c\u0c13\3\2\2\2\u012e\u0c21\3\2\2\2\u0130\u0ca7")
        buf.write("\3\2\2\2\u0132\u0cae\3\2\2\2\u0134\u0cdb\3\2\2\2\u0136")
        buf.write("\u0cf3\3\2\2\2\u0138\u0cf5\3\2\2\2\u013a\u0cfc\3\2\2\2")
        buf.write("\u013c\u0d03\3\2\2\2\u013e\u0d0a\3\2\2\2\u0140\u0d0f\3")
        buf.write("\2\2\2\u0142\u0d15\3\2\2\2\u0144\u0d1a\3\2\2\2\u0146\u0d1e")
        buf.write("\3\2\2\2\u0148\u0d23\3\2\2\2\u014a\u0d32\3\2\2\2\u014c")
        buf.write("\u0d41\3\2\2\2\u014e\u0d77\3\2\2\2\u0150\u0d79\3\2\2\2")
        buf.write("\u0152\u0d86\3\2\2\2\u0154\u0d88\3\2\2\2\u0156\u0d96\3")
        buf.write("\2\2\2\u0158\u0da8\3\2\2\2\u015a\u0dca\3\2\2\2\u015c\u0de0")
        buf.write("\3\2\2\2\u015e\u0de3\3\2\2\2\u0160\u0de7\3\2\2\2\u0162")
        buf.write("\u0df6\3\2\2\2\u0164\u0dff\3\2\2\2\u0166\u0e03\3\2\2\2")
        buf.write("\u0168\u0e0b\3\2\2\2\u016a\u0e11\3\2\2\2\u016c\u0e24\3")
        buf.write("\2\2\2\u016e\u0e42\3\2\2\2\u0170\u0e47\3\2\2\2\u0172\u0e56")
        buf.write("\3\2\2\2\u0174\u0e65\3\2\2\2\u0176\u0e69\3\2\2\2\u0178")
        buf.write("\u0e9b\3\2\2\2\u017a\u0e9d\3\2\2\2\u017c\u0eab\3\2\2\2")
        buf.write("\u017e\u0eb5\3\2\2\2\u0180\u0eb7\3\2\2\2\u0182\u0eb9\3")
        buf.write("\2\2\2\u0184\u0ebc\3\2\2\2\u0186\u0ec7\3\2\2\2\u0188\u0ece")
        buf.write("\3\2\2\2\u018a\u0ed0\3\2\2\2\u018c\u0edc\3\2\2\2\u018e")
        buf.write("\u0f0c\3\2\2\2\u0190\u0f10\3\2\2\2\u0192\u0f12\3\2\2\2")
        buf.write("\u0194\u0f27\3\2\2\2\u0196\u0f36\3\2\2\2\u0198\u0f46\3")
        buf.write("\2\2\2\u019a\u0f48\3\2\2\2\u019c\u0f6c\3\2\2\2\u019e\u0f7d")
        buf.write("\3\2\2\2\u01a0\u0f7f\3\2\2\2\u01a2\u0f84\3\2\2\2\u01a4")
        buf.write("\u0f86\3\2\2\2\u01a6\u0f97\3\2\2\2\u01a8\u0f99\3\2\2\2")
        buf.write("\u01aa\u01ac\5\4\3\2\u01ab\u01aa\3\2\2\2\u01ac\u01af\3")
        buf.write("\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b0")
        buf.write("\3\2\2\2\u01af\u01ad\3\2\2\2\u01b0\u01b1\7\2\2\3\u01b1")
        buf.write("\3\3\2\2\2\u01b2\u01b6\5r:\2\u01b3\u01b5\5\u0098M\2\u01b4")
        buf.write("\u01b3\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2")
        buf.write("\u01b6\u01b7\3\2\2\2\u01b7\u01c4\3\2\2\2\u01b8\u01b6\3")
        buf.write("\2\2\2\u01b9\u01bb\5r:\2\u01ba\u01b9\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01c0\5\6\4\2\u01bd")
        buf.write("\u01bf\5\u0098M\2\u01be\u01bd\3\2\2\2\u01bf\u01c2\3\2")
        buf.write("\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c4")
        buf.write("\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c3\u01b2\3\2\2\2\u01c3")
        buf.write("\u01ba\3\2\2\2\u01c4\5\3\2\2\2\u01c5\u01c7\5\b\5\2\u01c6")
        buf.write("\u01c8\7\u0339\2\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2")
        buf.write("\2\2\u01c8\u01ca\3\2\2\2\u01c9\u01c5\3\2\2\2\u01ca\u01cb")
        buf.write("\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc")
        buf.write("\7\3\2\2\2\u01cd\u01d2\5\n\6\2\u01ce\u01d2\5\f\7\2\u01cf")
        buf.write("\u01d2\5,\27\2\u01d0\u01d2\5.\30\2\u01d1\u01cd\3\2\2\2")
        buf.write("\u01d1\u01ce\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d1\u01d0\3")
        buf.write("\2\2\2\u01d2\t\3\2\2\2\u01d3\u01d9\5J&\2\u01d4\u01d9\5")
        buf.write("P)\2\u01d5\u01d9\5T+\2\u01d6\u01d9\5Z.\2\u01d7\u01d9\5")
        buf.write("^\60\2\u01d8\u01d3\3\2\2\2\u01d8\u01d4\3\2\2\2\u01d8\u01d5")
        buf.write("\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d8\u01d7\3\2\2\2\u01d9")
        buf.write("\13\3\2\2\2\u01da\u01e7\5\16\b\2\u01db\u01e7\5\20\t\2")
        buf.write("\u01dc\u01e7\5\22\n\2\u01dd\u01e7\5\24\13\2\u01de\u01e7")
        buf.write("\5\30\r\2\u01df\u01e7\5\26\f\2\u01e0\u01e7\5\32\16\2\u01e1")
        buf.write("\u01e7\5\"\22\2\u01e2\u01e7\5$\23\2\u01e3\u01e7\5&\24")
        buf.write("\2\u01e4\u01e7\5(\25\2\u01e5\u01e7\5*\26\2\u01e6\u01da")
        buf.write("\3\2\2\2\u01e6\u01db\3\2\2\2\u01e6\u01dc\3\2\2\2\u01e6")
        buf.write("\u01dd\3\2\2\2\u01e6\u01de\3\2\2\2\u01e6\u01df\3\2\2\2")
        buf.write("\u01e6\u01e0\3\2\2\2\u01e6\u01e1\3\2\2\2\u01e6\u01e2\3")
        buf.write("\2\2\2\u01e6\u01e3\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e5")
        buf.write("\3\2\2\2\u01e7\r\3\2\2\2\u01e8\u01ea\7\34\2\2\u01e9\u01eb")
        buf.write("\7\u0339\2\2\u01ea\u01e9\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb")
        buf.write("\u01ed\3\2\2\2\u01ec\u01ee\5\6\4\2\u01ed\u01ec\3\2\2\2")
        buf.write("\u01ed\u01ee\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f1\7")
        buf.write("m\2\2\u01f0\u01f2\7\u0339\2\2\u01f1\u01f0\3\2\2\2\u01f1")
        buf.write("\u01f2\3\2\2\2\u01f2\17\3\2\2\2\u01f3\u01f5\7!\2\2\u01f4")
        buf.write("\u01f6\7\u0339\2\2\u01f5\u01f4\3\2\2\2\u01f5\u01f6\3\2")
        buf.write("\2\2\u01f6\21\3\2\2\2\u01f7\u01f9\7B\2\2\u01f8\u01fa\7")
        buf.write("\u0339\2\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write("\23\3\2\2\2\u01fb\u01fc\7\u0090\2\2\u01fc\u01fe\5\u01a2")
        buf.write("\u00d2\2\u01fd\u01ff\7\u0339\2\2\u01fe\u01fd\3\2\2\2\u01fe")
        buf.write("\u01ff\3\2\2\2\u01ff\u0206\3\2\2\2\u0200\u0201\5\u01a2")
        buf.write("\u00d2\2\u0201\u0203\7\u033a\2\2\u0202\u0204\7\u0339\2")
        buf.write("\2\u0203\u0202\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0206")
        buf.write("\3\2\2\2\u0205\u01fb\3\2\2\2\u0205\u0200\3\2\2\2\u0206")
        buf.write("\25\3\2\2\2\u0207\u0209\7\u011b\2\2\u0208\u020a\5\u00c8")
        buf.write("e\2\u0209\u0208\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020c")
        buf.write("\3\2\2\2\u020b\u020d\7\u0339\2\2\u020c\u020b\3\2\2\2\u020c")
        buf.write("\u020d\3\2\2\2\u020d\27\3\2\2\2\u020e\u020f\7\u009a\2")
        buf.write("\2\u020f\u0210\5\u00dep\2\u0210\u0213\5\b\5\2\u0211\u0212")
        buf.write("\7k\2\2\u0212\u0214\5\b\5\2\u0213\u0211\3\2\2\2\u0213")
        buf.write("\u0214\3\2\2\2\u0214\u0216\3\2\2\2\u0215\u0217\7\u0339")
        buf.write("\2\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217\31")
        buf.write("\3\2\2\2\u0218\u021f\7\u02ee\2\2\u0219\u021a\5\34\17\2")
        buf.write("\u021a\u021b\7\u0338\2\2\u021b\u021c\5\36\20\2\u021c\u021d")
        buf.write("\7\u0338\2\2\u021d\u021e\5 \21\2\u021e\u0220\3\2\2\2\u021f")
        buf.write("\u0219\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0222\3\2\2\2")
        buf.write("\u0221\u0223\7\u0339\2\2\u0222\u0221\3\2\2\2\u0222\u0223")
        buf.write("\3\2\2\2\u0223\33\3\2\2\2\u0224\u0225\t\2\2\2\u0225\35")
        buf.write("\3\2\2\2\u0226\u0227\t\3\2\2\u0227\37\3\2\2\2\u0228\u0229")
        buf.write("\t\2\2\2\u0229!\3\2\2\2\u022a\u022b\7\34\2\2\u022b\u022d")
        buf.write("\7\u02f9\2\2\u022c\u022e\7\u0339\2\2\u022d\u022c\3\2\2")
        buf.write("\2\u022d\u022e\3\2\2\2\u022e\u0230\3\2\2\2\u022f\u0231")
        buf.write("\5\6\4\2\u0230\u022f\3\2\2\2\u0230\u0231\3\2\2\2\u0231")
        buf.write("\u0232\3\2\2\2\u0232\u0233\7m\2\2\u0233\u0235\7\u02f9")
        buf.write("\2\2\u0234\u0236\7\u0339\2\2\u0235\u0234\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0238\7\34\2")
        buf.write("\2\u0238\u023a\7\u01b3\2\2\u0239\u023b\7\u0339\2\2\u023a")
        buf.write("\u0239\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023d\3\2\2\2")
        buf.write("\u023c\u023e\5\6\4\2\u023d\u023c\3\2\2\2\u023d\u023e\3")
        buf.write("\2\2\2\u023e\u023f\3\2\2\2\u023f\u0240\7m\2\2\u0240\u0242")
        buf.write("\7\u01b3\2\2\u0241\u0243\7\u0339\2\2\u0242\u0241\3\2\2")
        buf.write("\2\u0242\u0243\3\2\2\2\u0243#\3\2\2\2\u0244\u0246\7\u0178")
        buf.write("\2\2\u0245\u0247\5X-\2\u0246\u0245\3\2\2\2\u0246\u0247")
        buf.write("\3\2\2\2\u0247\u0249\3\2\2\2\u0248\u024a\7\u0338\2\2\u0249")
        buf.write("\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024d\3\2\2\2")
        buf.write("\u024b\u024c\t\4\2\2\u024c\u024e\5\\/\2\u024d\u024b\3")
        buf.write("\2\2\2\u024d\u024e\3\2\2\2\u024e\u0250\3\2\2\2\u024f\u0251")
        buf.write("\5\u00c8e\2\u0250\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251")
        buf.write("\u0253\3\2\2\2\u0252\u0254\7\u0339\2\2\u0253\u0252\3\2")
        buf.write("\2\2\u0253\u0254\3\2\2\2\u0254%\3\2\2\2\u0255\u0256\7")
        buf.write("\u017b\2\2\u0256\u0260\5\u00dep\2\u0257\u0261\5\b\5\2")
        buf.write("\u0258\u025a\7!\2\2\u0259\u025b\7\u0339\2\2\u025a\u0259")
        buf.write("\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u0261\3\2\2\2\u025c")
        buf.write("\u025e\7B\2\2\u025d\u025f\7\u0339\2\2\u025e\u025d\3\2")
        buf.write("\2\2\u025e\u025f\3\2\2\2\u025f\u0261\3\2\2\2\u0260\u0257")
        buf.write("\3\2\2\2\u0260\u0258\3\2\2\2\u0260\u025c\3\2\2\2\u0261")
        buf.write("\'\3\2\2\2\u0262\u0265\7\u0102\2\2\u0263\u0266\5\u00c8")
        buf.write("e\2\u0264\u0266\7\u0318\2\2\u0265\u0263\3\2\2\2\u0265")
        buf.write("\u0264\3\2\2\2\u0266\u026b\3\2\2\2\u0267\u0268\7\u0338")
        buf.write("\2\2\u0268\u026a\7\u031b\2\2\u0269\u0267\3\2\2\2\u026a")
        buf.write("\u026d\3\2\2\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2")
        buf.write("\u026c\u026f\3\2\2\2\u026d\u026b\3\2\2\2\u026e\u0270\7")
        buf.write("\u0339\2\2\u026f\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270")
        buf.write(")\3\2\2\2\u0271\u0272\7\u0109\2\2\u0272\u0273\7\u0336")
        buf.write("\2\2\u0273\u0274\t\5\2\2\u0274\u0275\7\u0338\2\2\u0275")
        buf.write("\u0276\5\u00c6d\2\u0276\u0277\7\u0338\2\2\u0277\u027c")
        buf.write("\5\u00c6d\2\u0278\u0279\7\u0338\2\2\u0279\u027b\5\u00c6")
        buf.write("d\2\u027a\u0278\3\2\2\2\u027b\u027e\3\2\2\2\u027c\u027a")
        buf.write("\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027f\3\2\2\2\u027e")
        buf.write("\u027c\3\2\2\2\u027f\u0282\7\u0337\2\2\u0280\u0281\7\u017d")
        buf.write("\2\2\u0281\u0283\t\6\2\2\u0282\u0280\3\2\2\2\u0282\u0283")
        buf.write("\3\2\2\2\u0283\u0285\3\2\2\2\u0284\u0286\7\u0339\2\2\u0285")
        buf.write("\u0284\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0292\3\2\2\2")
        buf.write("\u0287\u0288\7\u0109\2\2\u0288\u0289\7\u031c\2\2\u0289")
        buf.write("\u028e\t\7\2\2\u028a\u028b\7\u0338\2\2\u028b\u028d\t\5")
        buf.write("\2\2\u028c\u028a\3\2\2\2\u028d\u0290\3\2\2\2\u028e\u028c")
        buf.write("\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0292\3\2\2\2\u0290")
        buf.write("\u028e\3\2\2\2\u0291\u0271\3\2\2\2\u0291\u0287\3\2\2\2")
        buf.write("\u0292+\3\2\2\2\u0293\u0294\7\u0339\2\2\u0294-\3\2\2\2")
        buf.write("\u0295\u02a3\5l\67\2\u0296\u02a3\5n8\2\u0297\u02a3\5F")
        buf.write("$\2\u0298\u02a3\5D#\2\u0299\u02a3\5:\36\2\u029a\u02a3")
        buf.write("\5> \2\u029b\u02a3\5p9\2\u029c\u02a3\5H%\2\u029d\u02a3")
        buf.write("\5x=\2\u029e\u02a3\5\u0094K\2\u029f\u02a3\5\u0096L\2\u02a0")
        buf.write("\u02a3\5\u009aN\2\u02a1\u02a3\5\u009cO\2\u02a2\u0295\3")
        buf.write("\2\2\2\u02a2\u0296\3\2\2\2\u02a2\u0297\3\2\2\2\u02a2\u0298")
        buf.write("\3\2\2\2\u02a2\u0299\3\2\2\2\u02a2\u029a\3\2\2\2\u02a2")
        buf.write("\u029b\3\2\2\2\u02a2\u029c\3\2\2\2\u02a2\u029d\3\2\2\2")
        buf.write("\u02a2\u029e\3\2\2\2\u02a2\u029f\3\2\2\2\u02a2\u02a0\3")
        buf.write("\2\2\2\u02a2\u02a1\3\2\2\2\u02a3/\3\2\2\2\u02a4\u02a5")
        buf.write("\5\62\32\2\u02a5\u02a6\5\60\31\2\u02a6\u02a9\3\2\2\2\u02a7")
        buf.write("\u02a9\5\u01a2\u00d2\2\u02a8\u02a4\3\2\2\2\u02a8\u02a7")
        buf.write("\3\2\2\2\u02a9\61\3\2\2\2\u02aa\u02ab\7\31\2\2\u02ab\63")
        buf.write("\3\2\2\2\u02ac\u02ae\7\u0338\2\2\u02ad\u02ac\3\2\2\2\u02ad")
        buf.write("\u02ae\3\2\2\2\u02ae\u02b0\3\2\2\2\u02af\u02b1\t\b\2\2")
        buf.write("\u02b0\u02af\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b3\3")
        buf.write("\2\2\2\u02b2\u02b4\7\u00dd\2\2\u02b3\u02b2\3\2\2\2\u02b3")
        buf.write("\u02b4\3\2\2\2\u02b4\u02ba\3\2\2\2\u02b5\u02bb\5\66\34")
        buf.write("\2\u02b6\u02b7\7\u0336\2\2\u02b7\u02b8\5\64\33\2\u02b8")
        buf.write("\u02b9\7\u0337\2\2\u02b9\u02bb\3\2\2\2\u02ba\u02b5\3\2")
        buf.write("\2\2\u02ba\u02b6\3\2\2\2\u02bb\u02bd\3\2\2\2\u02bc\u02ad")
        buf.write("\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bc\3\2\2\2\u02be")
        buf.write("\u02bf\3\2\2\2\u02bf\65\3\2\2\2\u02c0\u02c6\58\35\2\u02c1")
        buf.write("\u02c2\7\u0336\2\2\u02c2\u02c3\5\64\33\2\u02c3\u02c4\7")
        buf.write("\u0337\2\2\u02c4\u02c6\3\2\2\2\u02c5\u02c0\3\2\2\2\u02c5")
        buf.write("\u02c1\3\2\2\2\u02c6\67\3\2\2\2\u02c7\u02e4\5\u01a2\u00d2")
        buf.write("\2\u02c8\u02d3\5\u01a2\u00d2\2\u02c9\u02ca\5\u01a2\u00d2")
        buf.write("\2\u02ca\u02cb\7\u0331\2\2\u02cb\u02cd\3\2\2\2\u02cc\u02c9")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u02cf\5\u01a2\u00d2\2\u02cf\u02d0\7\u0331\2\2\u02d0\u02d1")
        buf.write("\5\u01a2\u00d2\2\u02d1\u02d3\3\2\2\2\u02d2\u02c8\3\2\2")
        buf.write("\2\u02d2\u02cc\3\2\2\2\u02d3\u02df\3\2\2\2\u02d4\u02e0")
        buf.write("\7\u0324\2\2\u02d5\u02d6\7\u0326\2\2\u02d6\u02e0\7\u0325")
        buf.write("\2\2\u02d7\u02d8\7\u0327\2\2\u02d8\u02e0\7\u0324\2\2\u02d9")
        buf.write("\u02e0\7\u0325\2\2\u02da\u02db\7\u0325\2\2\u02db\u02e0")
        buf.write("\7\u0324\2\2\u02dc\u02e0\7\u0326\2\2\u02dd\u02de\7\u0326")
        buf.write("\2\2\u02de\u02e0\7\u0324\2\2\u02df\u02d4\3\2\2\2\u02df")
        buf.write("\u02d5\3\2\2\2\u02df\u02d7\3\2\2\2\u02df\u02d9\3\2\2\2")
        buf.write("\u02df\u02da\3\2\2\2\u02df\u02dc\3\2\2\2\u02df\u02dd\3")
        buf.write("\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e2\t\t\2\2\u02e2\u02e4")
        buf.write("\3\2\2\2\u02e3\u02c7\3\2\2\2\u02e3\u02d2\3\2\2\2\u02e4")
        buf.write("\u0300\3\2\2\2\u02e5\u02e6\5\u01a2\u00d2\2\u02e6\u02e7")
        buf.write("\7\u0331\2\2\u02e7\u02e9\3\2\2\2\u02e8\u02e5\3\2\2\2\u02e8")
        buf.write("\u02e9\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02eb\5\u01a2")
        buf.write("\u00d2\2\u02eb\u02ec\7\u0331\2\2\u02ec\u02ed\5\u01a2\u00d2")
        buf.write("\2\u02ed\u02fb\7\u0336\2\2\u02ee\u02fc\5\u01a2\u00d2\2")
        buf.write("\u02ef\u02f0\5\u01a2\u00d2\2\u02f0\u02f1\7\u0331\2\2\u02f1")
        buf.write("\u02f3\3\2\2\2\u02f2\u02ef\3\2\2\2\u02f2\u02f3\3\2\2\2")
        buf.write("\u02f3\u02f4\3\2\2\2\u02f4\u02f5\5\u01a2\u00d2\2\u02f5")
        buf.write("\u02f6\7\u0331\2\2\u02f6\u02f7\5\u01a2\u00d2\2\u02f7\u02f8")
        buf.write("\3\2\2\2\u02f8\u02f9\7\u0338\2\2\u02f9\u02fa\t\t\2\2\u02fa")
        buf.write("\u02fc\3\2\2\2\u02fb\u02ee\3\2\2\2\u02fb\u02f2\3\2\2\2")
        buf.write("\u02fc\u02fd\3\2\2\2\u02fd\u02fe\7\u0337\2\2\u02fe\u0300")
        buf.write("\3\2\2\2\u02ff\u02e3\3\2\2\2\u02ff\u02e8\3\2\2\2\u0300")
        buf.write("9\3\2\2\2\u0301\u0302\7I\2\2\u0302\u0305\7\u0295\2\2\u0303")
        buf.write("\u0306\5\u016c\u00b7\2\u0304\u0306\5\u01a2\u00d2\2\u0305")
        buf.write("\u0303\3\2\2\2\u0305\u0304\3\2\2\2\u0306\u0308\3\2\2\2")
        buf.write("\u0307\u0309\5<\37\2\u0308\u0307\3\2\2\2\u0308\u0309\3")
        buf.write("\2\2\2\u0309\u030d\3\2\2\2\u030a\u030b\7\u00e6\2\2\u030b")
        buf.write("\u030e\5\u01a2\u00d2\2\u030c\u030e\7Z\2\2\u030d\u030a")
        buf.write("\3\2\2\2\u030d\u030c\3\2\2\2\u030d\u030e\3\2\2\2\u030e")
        buf.write(";\3\2\2\2\u030f\u0316\7\u017d\2\2\u0310\u0311\7\u02df")
        buf.write("\2\2\u0311\u0312\7\u0324\2\2\u0312\u0314\t\n\2\2\u0313")
        buf.write("\u0315\7\u0338\2\2\u0314\u0313\3\2\2\2\u0314\u0315\3\2")
        buf.write("\2\2\u0315\u0317\3\2\2\2\u0316\u0310\3\2\2\2\u0316\u0317")
        buf.write("\3\2\2\2\u0317\u031e\3\2\2\2\u0318\u0319\7\u02b6\2\2\u0319")
        buf.write("\u031a\7\u0324\2\2\u031a\u031c\t\n\2\2\u031b\u031d\7\u0338")
        buf.write("\2\2\u031c\u031b\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031f")
        buf.write("\3\2\2\2\u031e\u0318\3\2\2\2\u031e\u031f\3\2\2\2\u031f")
        buf.write("\u034d\3\2\2\2\u0320\u0321\7\u0185\2\2\u0321\u0347\7\u0336")
        buf.write("\2\2\u0322\u0323\7\u02df\2\2\u0323\u0324\7\u0324\2\2\u0324")
        buf.write("\u0326\t\n\2\2\u0325\u0327\7\u0338\2\2\u0326\u0325\3\2")
        buf.write("\2\2\u0326\u0327\3\2\2\2\u0327\u0329\3\2\2\2\u0328\u0322")
        buf.write("\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u0330\3\2\2\2\u032a")
        buf.write("\u032b\7\u0290\2\2\u032b\u032c\7\u0324\2\2\u032c\u032e")
        buf.write("\5\u0172\u00ba\2\u032d\u032f\7\u0338\2\2\u032e\u032d\3")
        buf.write("\2\2\2\u032e\u032f\3\2\2\2\u032f\u0331\3\2\2\2\u0330\u032a")
        buf.write("\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0338\3\2\2\2\u0332")
        buf.write("\u0333\7\u024a\2\2\u0333\u0334\7\u0324\2\2\u0334\u0336")
        buf.write("\7\u031c\2\2\u0335\u0337\7\u0338\2\2\u0336\u0335\3\2\2")
        buf.write("\2\u0336\u0337\3\2\2\2\u0337\u0339\3\2\2\2\u0338\u0332")
        buf.write("\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u0344\3\2\2\2\u033a")
        buf.write("\u033b\7w\2\2\u033b\u033f\7\20\2\2\u033c\u0340\7\u02cb")
        buf.write("\2\2\u033d\u0340\7\u0320\2\2\u033e\u0340\7\u027e\2\2\u033f")
        buf.write("\u033c\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u033e\3\2\2\2")
        buf.write("\u0340\u0342\3\2\2\2\u0341\u0343\7\u0338\2\2\u0342\u0341")
        buf.write("\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0345\3\2\2\2\u0344")
        buf.write("\u033a\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0348\3\2\2\2")
        buf.write("\u0346\u0348\7h\2\2\u0347\u0328\3\2\2\2\u0347\u0346\3")
        buf.write("\2\2\2\u0348\u0349\3\2\2\2\u0349\u034b\7\u0337\2\2\u034a")
        buf.write("\u034c\7\u0338\2\2\u034b\u034a\3\2\2\2\u034b\u034c\3\2")
        buf.write("\2\2\u034c\u034e\3\2\2\2\u034d\u0320\3\2\2\2\u034d\u034e")
        buf.write("\3\2\2\2\u034e\u0356\3\2\2\2\u034f\u0350\7\u0285\2\2\u0350")
        buf.write("\u0351\7\u0336\2\2\u0351\u0352\7\u02df\2\2\u0352\u0353")
        buf.write("\7\u0324\2\2\u0353\u0354\t\n\2\2\u0354\u0355\3\2\2\2\u0355")
        buf.write("\u0357\7\u0337\2\2\u0356\u034f\3\2\2\2\u0356\u0357\3\2")
        buf.write("\2\2\u0357=\3\2\2\2\u0358\u0359\7\n\2\2\u0359\u035c\7")
        buf.write("\u0295\2\2\u035a\u035d\5\u016c\u00b7\2\u035b\u035d\5\u01a2")
        buf.write("\u00d2\2\u035c\u035a\3\2\2\2\u035c\u035b\3\2\2\2\u035d")
        buf.write("\u0360\3\2\2\2\u035e\u0361\5<\37\2\u035f\u0361\5@!\2\u0360")
        buf.write("\u035e\3\2\2\2\u0360\u035f\3\2\2\2\u0361?\3\2\2\2\u0362")
        buf.write("\u0368\7\u02a2\2\2\u0363\u0364\7\u017d\2\2\u0364\u0365")
        buf.write("\7\u0336\2\2\u0365\u0366\5B\"\2\u0366\u0367\7\u0337\2")
        buf.write("\2\u0367\u0369\3\2\2\2\u0368\u0363\3\2\2\2\u0368\u0369")
        buf.write("\3\2\2\2\u0369\u0378\3\2\2\2\u036a\u036f\7\u02ab\2\2\u036b")
        buf.write("\u036c\7\u017d\2\2\u036c\u036d\7\u0238\2\2\u036d\u036e")
        buf.write("\7\u0324\2\2\u036e\u0370\t\n\2\2\u036f\u036b\3\2\2\2\u036f")
        buf.write("\u0370\3\2\2\2\u0370\u0378\3\2\2\2\u0371\u0372\7\u025d")
        buf.write("\2\2\u0372\u0375\7\u015e\2\2\u0373\u0376\5\u01a2\u00d2")
        buf.write("\2\u0374\u0376\7Z\2\2\u0375\u0373\3\2\2\2\u0375\u0374")
        buf.write("\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0362\3\2\2\2\u0377")
        buf.write("\u036a\3\2\2\2\u0377\u0371\3\2\2\2\u0378A\3\2\2\2\u0379")
        buf.write("\u037a\7\u024c\2\2\u037a\u037b\7\u0324\2\2\u037b\u037c")
        buf.write("\7\u031c\2\2\u037cC\3\2\2\2\u037d\u037e\7I\2\2\u037e\u037f")
        buf.write("\7D\2\2\u037f\u0382\5\u018e\u00c8\2\u0380\u0381\7\24\2")
        buf.write("\2\u0381\u0383\5\u01a2\u00d2\2\u0382\u0380\3\2\2\2\u0382")
        buf.write("\u0383\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u038f\7\u0336")
        buf.write("\2\2\u0385\u0388\5\u01a2\u00d2\2\u0386\u0388\7Z\2\2\u0387")
        buf.write("\u0385\3\2\2\2\u0387\u0386\3\2\2\2\u0388\u0389\3\2\2\2")
        buf.write("\u0389\u038a\7\u02ce\2\2\u038a\u038b\7&\2\2\u038b\u038d")
        buf.write("\t\13\2\2\u038c\u038e\7\u0338\2\2\u038d\u038c\3\2\2\2")
        buf.write("\u038d\u038e\3\2\2\2\u038e\u0390\3\2\2\2\u038f\u0387\3")
        buf.write("\2\2\2\u0390\u0391\3\2\2\2\u0391\u038f\3\2\2\2\u0391\u0392")
        buf.write("\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0394\7\u0337\2\2\u0394")
        buf.write("E\3\2\2\2\u0395\u039c\5\u018a\u00c6\2\u0396\u039c\5\u018c")
        buf.write("\u00c7\2\u0397\u039c\5\u0192\u00ca\2\u0398\u039c\5\u0196")
        buf.write("\u00cc\2\u0399\u039c\5\u019a\u00ce\2\u039a\u039c\5\u0194")
        buf.write("\u00cb\2\u039b\u0395\3\2\2\2\u039b\u0396\3\2\2\2\u039b")
        buf.write("\u0397\3\2\2\2\u039b\u0398\3\2\2\2\u039b\u0399\3\2\2\2")
        buf.write("\u039b\u039a\3\2\2\2\u039cG\3\2\2\2\u039d\u039e\7I\2\2")
        buf.write("\u039e\u039f\7\u0252\2\2\u039f\u03a0\7\u02fc\2\2\u03a0")
        buf.write("\u03a3\5\u01a2\u00d2\2\u03a1\u03a2\7\24\2\2\u03a2\u03a4")
        buf.write("\5\u01a2\u00d2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2")
        buf.write("\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\7\u0304\2\2\u03a6\u03af")
        buf.write("\7\u0324\2\2\u03a7\u03b0\7\u00d6\2\2\u03a8\u03b0\7\u01eb")
        buf.write("\2\2\u03a9\u03b0\7\u030b\2\2\u03aa\u03ab\7\u0303\2\2\u03ab")
        buf.write("\u03ac\7\u017d\2\2\u03ac\u03ad\7\u012f\2\2\u03ad\u03ae")
        buf.write("\7\u01b9\2\2\u03ae\u03b0\5\u01a2\u00d2\2\u03af\u03a7\3")
        buf.write("\2\2\2\u03af\u03a8\3\2\2\2\u03af\u03a9\3\2\2\2\u03af\u03aa")
        buf.write("\3\2\2\2\u03b0I\3\2\2\2\u03b1\u03b3\5\u00d6l\2\u03b2\u03b1")
        buf.write("\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4")
        buf.write("\u03bc\7\u00ca\2\2\u03b5\u03b6\7\u015f\2\2\u03b6\u03b7")
        buf.write("\7\u0336\2\2\u03b7\u03b8\5\u00c8e\2\u03b8\u03ba\7\u0337")
        buf.write("\2\2\u03b9\u03bb\7\u00f6\2\2\u03ba\u03b9\3\2\2\2\u03ba")
        buf.write("\u03bb\3\2\2\2\u03bb\u03bd\3\2\2\2\u03bc\u03b5\3\2\2\2")
        buf.write("\u03bc\u03bd\3\2\2\2\u03bd\u03bf\3\2\2\2\u03be\u03c0\7")
        buf.write("\u00a6\2\2\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03c1\3\2\2\2\u03c1\u03c3\5\u0176\u00bc\2\u03c2\u03c4")
        buf.write("\5\u014a\u00a6\2\u03c3\u03c2\3\2\2\2\u03c3\u03c4\3\2\2")
        buf.write("\2\u03c4\u03c6\3\2\2\2\u03c5\u03c7\5\u0144\u00a3\2\u03c6")
        buf.write("\u03c5\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c8\3\2\2\2")
        buf.write("\u03c8\u03c9\7\u0302\2\2\u03c9\u03ca\5\u0110\u0089\2\u03ca")
        buf.write("\u03cb\7\u00e6\2\2\u03cb\u03d6\5\u00dep\2\u03cc\u03cd")
        buf.write("\7\u0179\2\2\u03cd\u03d0\7\u00bd\2\2\u03ce\u03cf\7\13")
        buf.write("\2\2\u03cf\u03d1\5\u00dep\2\u03d0\u03ce\3\2\2\2\u03d0")
        buf.write("\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\7\u015d")
        buf.write("\2\2\u03d3\u03d5\5L\'\2\u03d4\u03cc\3\2\2\2\u03d5\u03d8")
        buf.write("\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7")
        buf.write("\u03e6\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d9\u03da\7\u0179")
        buf.write("\2\2\u03da\u03db\7\u00dd\2\2\u03db\u03de\7\u00bd\2\2\u03dc")
        buf.write("\u03dd\7&\2\2\u03dd\u03df\7\u015a\2\2\u03de\u03dc\3\2")
        buf.write("\2\2\u03de\u03df\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03e1")
        buf.write("\7\13\2\2\u03e1\u03e3\5\u00dep\2\u03e2\u03e0\3\2\2\2\u03e2")
        buf.write("\u03e3\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e5\7\u015d")
        buf.write("\2\2\u03e5\u03e7\5N(\2\u03e6\u03d9\3\2\2\2\u03e6\u03e7")
        buf.write("\3\2\2\2\u03e7\u03f5\3\2\2\2\u03e8\u03e9\7\u0179\2\2\u03e9")
        buf.write("\u03ea\7\u00dd\2\2\u03ea\u03eb\7\u00bd\2\2\u03eb\u03ec")
        buf.write("\7&\2\2\u03ec\u03ef\7\u0145\2\2\u03ed\u03ee\7\13\2\2\u03ee")
        buf.write("\u03f0\5\u00dep\2\u03ef\u03ed\3\2\2\2\u03ef\u03f0\3\2")
        buf.write("\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\7\u015d\2\2\u03f2")
        buf.write("\u03f4\5L\'\2\u03f3\u03e8\3\2\2\2\u03f4\u03f7\3\2\2\2")
        buf.write("\u03f5\u03f3\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f9\3")
        buf.write("\2\2\2\u03f7\u03f5\3\2\2\2\u03f8\u03fa\5`\61\2\u03f9\u03f8")
        buf.write("\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fc\3\2\2\2\u03fb")
        buf.write("\u03fd\5\u00fc\177\2\u03fc\u03fb\3\2\2\2\u03fc\u03fd\3")
        buf.write("\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\7\u0339\2\2\u03ff")
        buf.write("K\3\2\2\2\u0400\u0401\7\u016d\2\2\u0401\u0402\7\u013e")
        buf.write("\2\2\u0402\u0407\5\u00dan\2\u0403\u0404\7\u0338\2\2\u0404")
        buf.write("\u0406\5\u00dan\2\u0405\u0403\3\2\2\2\u0406\u0409\3\2")
        buf.write("\2\2\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040c")
        buf.write("\3\2\2\2\u0409\u0407\3\2\2\2\u040a\u040c\7]\2\2\u040b")
        buf.write("\u0400\3\2\2\2\u040b\u040a\3\2\2\2\u040cM\3\2\2\2\u040d")
        buf.write("\u0412\7\u00a3\2\2\u040e\u040f\7\u0336\2\2\u040f\u0410")
        buf.write("\5\u017c\u00bf\2\u0410\u0411\7\u0337\2\2\u0411\u0413\3")
        buf.write("\2\2\2\u0412\u040e\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0417")
        buf.write("\3\2\2\2\u0414\u0418\5\u0154\u00ab\2\u0415\u0416\7Z\2")
        buf.write("\2\u0416\u0418\7\u0173\2\2\u0417\u0414\3\2\2\2\u0417\u0415")
        buf.write("\3\2\2\2\u0418O\3\2\2\2\u0419\u041b\5\u00d6l\2\u041a\u0419")
        buf.write("\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c")
        buf.write("\u0426\7]\2\2\u041d\u041e\7\u015f\2\2\u041e\u041f\7\u0336")
        buf.write("\2\2\u041f\u0420\5\u00c8e\2\u0420\u0422\7\u0337\2\2\u0421")
        buf.write("\u0423\7\u00f6\2\2\u0422\u0421\3\2\2\2\u0422\u0423\3\2")
        buf.write("\2\2\u0423\u0427\3\2\2\2\u0424\u0425\7\u015f\2\2\u0425")
        buf.write("\u0427\7\u031c\2\2\u0426\u041d\3\2\2\2\u0426\u0424\3\2")
        buf.write("\2\2\u0426\u0427\3\2\2\2\u0427\u0429\3\2\2\2\u0428\u042a")
        buf.write("\7\u008c\2\2\u0429\u0428\3\2\2\2\u0429\u042a\3\2\2\2\u042a")
        buf.write("\u042b\3\2\2\2\u042b\u042d\5R*\2\u042c\u042e\5\u014a\u00a6")
        buf.write("\2\u042d\u042c\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u0430")
        buf.write("\3\2\2\2\u042f\u0431\5`\61\2\u0430\u042f\3\2\2\2\u0430")
        buf.write("\u0431\3\2\2\2\u0431\u0434\3\2\2\2\u0432\u0433\7\u008c")
        buf.write("\2\2\u0433\u0435\5\u0110\u0089\2\u0434\u0432\3\2\2\2\u0434")
        buf.write("\u0435\3\2\2\2\u0435\u0443\3\2\2\2\u0436\u0441\7\u017a")
        buf.write("\2\2\u0437\u0442\5\u00dep\2\u0438\u0439\7K\2\2\u0439\u043f")
        buf.write("\7\u00e2\2\2\u043a\u043c\7\u0210\2\2\u043b\u043a\3\2\2")
        buf.write("\2\u043b\u043c\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u0440")
        buf.write("\5\u017e\u00c0\2\u043e\u0440\7\u031b\2\2\u043f\u043b\3")
        buf.write("\2\2\2\u043f\u043e\3\2\2\2\u0440\u0442\3\2\2\2\u0441\u0437")
        buf.write("\3\2\2\2\u0441\u0438\3\2\2\2\u0442\u0444\3\2\2\2\u0443")
        buf.write("\u0436\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0446\3\2\2\2")
        buf.write("\u0445\u0447\5\u00f4{\2\u0446\u0445\3\2\2\2\u0446\u0447")
        buf.write("\3\2\2\2\u0447\u0449\3\2\2\2\u0448\u044a\5\u00fc\177\2")
        buf.write("\u0449\u0448\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044c\3")
        buf.write("\2\2\2\u044b\u044d\7\u0339\2\2\u044c\u044b\3\2\2\2\u044c")
        buf.write("\u044d\3\2\2\2\u044dQ\3\2\2\2\u044e\u0453\5\u0176\u00bc")
        buf.write("\2\u044f\u0453\5\u0146\u00a4\2\u0450\u0453\5f\64\2\u0451")
        buf.write("\u0453\7\u031b\2\2\u0452\u044e\3\2\2\2\u0452\u044f\3\2")
        buf.write("\2\2\u0452\u0450\3\2\2\2\u0452\u0451\3\2\2\2\u0453S\3")
        buf.write("\2\2\2\u0454\u0456\5\u00d6l\2\u0455\u0454\3\2\2\2\u0455")
        buf.write("\u0456\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u045f\7\u00a3")
        buf.write("\2\2\u0458\u0459\7\u015f\2\2\u0459\u045a\7\u0336\2\2\u045a")
        buf.write("\u045b\5\u00c8e\2\u045b\u045d\7\u0337\2\2\u045c\u045e")
        buf.write("\7\u00f6\2\2\u045d\u045c\3\2\2\2\u045d\u045e\3\2\2\2\u045e")
        buf.write("\u0460\3\2\2\2\u045f\u0458\3\2\2\2\u045f\u0460\3\2\2\2")
        buf.write("\u0460\u0462\3\2\2\2\u0461\u0463\7\u00a6\2\2\u0462\u0461")
        buf.write("\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0466\3\2\2\2\u0464")
        buf.write("\u0467\5\u0176\u00bc\2\u0465\u0467\5f\64\2\u0466\u0464")
        buf.write("\3\2\2\2\u0466\u0465\3\2\2\2\u0467\u0469\3\2\2\2\u0468")
        buf.write("\u046a\5\u014a\u00a6\2\u0469\u0468\3\2\2\2\u0469\u046a")
        buf.write("\3\2\2\2\u046a\u046f\3\2\2\2\u046b\u046c\7\u0336\2\2\u046c")
        buf.write("\u046d\5\u017c\u00bf\2\u046d\u046e\7\u0337\2\2\u046e\u0470")
        buf.write("\3\2\2\2\u046f\u046b\3\2\2\2\u046f\u0470\3\2\2\2\u0470")
        buf.write("\u0472\3\2\2\2\u0471\u0473\5`\61\2\u0472\u0471\3\2\2\2")
        buf.write("\u0472\u0473\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\5")
        buf.write("V,\2\u0475\u0477\5\u00f4{\2\u0476\u0475\3\2\2\2\u0476")
        buf.write("\u0477\3\2\2\2\u0477\u0479\3\2\2\2\u0478\u047a\5\u00fc")
        buf.write("\177\2\u0479\u0478\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047c")
        buf.write("\3\2\2\2\u047b\u047d\7\u0339\2\2\u047c\u047b\3\2\2\2\u047c")
        buf.write("\u047d\3\2\2\2\u047dU\3\2\2\2\u047e\u0484\5\u0154\u00ab")
        buf.write("\2\u047f\u0484\5\u012e\u0098\2\u0480\u0484\5p9\2\u0481")
        buf.write("\u0482\7Z\2\2\u0482\u0484\7\u0173\2\2\u0483\u047e\3\2")
        buf.write("\2\2\u0483\u047f\3\2\2\2\u0483\u0480\3\2\2\2\u0483\u0481")
        buf.write("\3\2\2\2\u0484W\3\2\2\2\u0485\u0487\7\u0336\2\2\u0486")
        buf.write("\u0485\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488\3\2\2\2")
        buf.write("\u0488\u048d\7\u02a3\2\2\u0489\u048e\7\6\2\2\u048a\u048e")
        buf.write("\7c\2\2\u048b\u048e\5\u00ecw\2\u048c\u048e\7\u033b\2\2")
        buf.write("\u048d\u0489\3\2\2\2\u048d\u048a\3\2\2\2\u048d\u048b\3")
        buf.write("\2\2\2\u048d\u048c\3\2\2\2\u048e\u0497\3\2\2\2\u048f\u0490")
        buf.write("\7\u031b\2\2\u0490\u0491\7\u0324\2\2\u0491\u0493\5\u00c8")
        buf.write("e\2\u0492\u0494\7\u0338\2\2\u0493\u0492\3\2\2\2\u0493")
        buf.write("\u0494\3\2\2\2\u0494\u0496\3\2\2\2\u0495\u048f\3\2\2\2")
        buf.write("\u0496\u0499\3\2\2\2\u0497\u0495\3\2\2\2\u0497\u0498\3")
        buf.write("\2\2\2\u0498\u049a\3\2\2\2\u0499\u0497\3\2\2\2\u049a\u049b")
        buf.write("\7\u008c\2\2\u049b\u04a1\5\u016c\u00b7\2\u049c\u049d\7")
        buf.write("\u00a6\2\2\u049d\u049e\5\u01a2\u00d2\2\u049e\u049f\7\u017a")
        buf.write("\2\2\u049f\u04a0\5\u00dep\2\u04a0\u04a2\3\2\2\2\u04a1")
        buf.write("\u049c\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a4\3\2\2\2")
        buf.write("\u04a3\u04a5\7\u0337\2\2\u04a4\u04a3\3\2\2\2\u04a4\u04a5")
        buf.write("\3\2\2\2\u04a5Y\3\2\2\2\u04a6\u04a8\5\u00d6l\2\u04a7\u04a6")
        buf.write("\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9")
        buf.write("\u04ab\5\u00e6t\2\u04aa\u04ac\5\u00f2z\2\u04ab\u04aa\3")
        buf.write("\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae\3\2\2\2\u04ad\u04af")
        buf.write("\5\u00f4{\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af")
        buf.write("\u04b1\3\2\2\2\u04b0\u04b2\5\u00fc\177\2\u04b1\u04b0\3")
        buf.write("\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04b5")
        buf.write("\7\u0339\2\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5")
        buf.write("[\3\2\2\2\u04b6\u04b9\7\u031b\2\2\u04b7\u04b9\5\u019e")
        buf.write("\u00d0\2\u04b8\u04b6\3\2\2\2\u04b8\u04b7\3\2\2\2\u04b9")
        buf.write("]\3\2\2\2\u04ba\u04bc\5\u00d6l\2\u04bb\u04ba\3\2\2\2\u04bb")
        buf.write("\u04bc\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04c5\7\u016d")
        buf.write("\2\2\u04be\u04bf\7\u015f\2\2\u04bf\u04c0\7\u0336\2\2\u04c0")
        buf.write("\u04c1\5\u00c8e\2\u04c1\u04c3\7\u0337\2\2\u04c2\u04c4")
        buf.write("\7\u00f6\2\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4")
        buf.write("\u04c6\3\2\2\2\u04c5\u04be\3\2\2\2\u04c5\u04c6\3\2\2\2")
        buf.write("\u04c6\u04c9\3\2\2\2\u04c7\u04ca\5\u0176\u00bc\2\u04c8")
        buf.write("\u04ca\5f\64\2\u04c9\u04c7\3\2\2\2\u04c9\u04c8\3\2\2\2")
        buf.write("\u04ca\u04cc\3\2\2\2\u04cb\u04cd\5\u0148\u00a5\2\u04cc")
        buf.write("\u04cb\3\2\2\2\u04cc\u04cd\3\2\2\2\u04cd\u04ce\3\2\2\2")
        buf.write("\u04ce\u04cf\7\u013e\2\2\u04cf\u04d4\5\u00dan\2\u04d0")
        buf.write("\u04d1\7\u0338\2\2\u04d1\u04d3\5\u00dan\2\u04d2\u04d0")
        buf.write("\3\2\2\2\u04d3\u04d6\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d4")
        buf.write("\u04d5\3\2\2\2\u04d5\u04d8\3\2\2\2\u04d6\u04d4\3\2\2\2")
        buf.write("\u04d7\u04d9\5`\61\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3")
        buf.write("\2\2\2\u04d9\u04dc\3\2\2\2\u04da\u04db\7\u008c\2\2\u04db")
        buf.write("\u04dd\5\u0110\u0089\2\u04dc\u04da\3\2\2\2\u04dc\u04dd")
        buf.write("\3\2\2\2\u04dd\u04eb\3\2\2\2\u04de\u04e9\7\u017a\2\2\u04df")
        buf.write("\u04ea\5\u00dco\2\u04e0\u04e1\7K\2\2\u04e1\u04e7\7\u00e2")
        buf.write("\2\2\u04e2\u04e4\7\u0210\2\2\u04e3\u04e2\3\2\2\2\u04e3")
        buf.write("\u04e4\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e8\5\u017e")
        buf.write("\u00c0\2\u04e6\u04e8\7\u031b\2\2\u04e7\u04e3\3\2\2\2\u04e7")
        buf.write("\u04e6\3\2\2\2\u04e8\u04ea\3\2\2\2\u04e9\u04df\3\2\2\2")
        buf.write("\u04e9\u04e0\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04de\3")
        buf.write("\2\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04ee\3\2\2\2\u04ed\u04ef")
        buf.write("\5\u00f4{\2\u04ee\u04ed\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef")
        buf.write("\u04f1\3\2\2\2\u04f0\u04f2\5\u00fc\177\2\u04f1\u04f0\3")
        buf.write("\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f4\3\2\2\2\u04f3\u04f5")
        buf.write("\7\u0339\2\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5")
        buf.write("_\3\2\2\2\u04f6\u04f7\7\u027d\2\2\u04f7\u04fc\5b\62\2")
        buf.write("\u04f8\u04f9\7\u0338\2\2\u04f9\u04fb\5b\62\2\u04fa\u04f8")
        buf.write("\3\2\2\2\u04fb\u04fe\3\2\2\2\u04fc\u04fa\3\2\2\2\u04fc")
        buf.write("\u04fd\3\2\2\2\u04fd\u050a\3\2\2\2\u04fe\u04fc\3\2\2\2")
        buf.write("\u04ff\u0502\7\u00a6\2\2\u0500\u0503\7\u031b\2\2\u0501")
        buf.write("\u0503\5\u016e\u00b8\2\u0502\u0500\3\2\2\2\u0502\u0501")
        buf.write("\3\2\2\2\u0503\u0508\3\2\2\2\u0504\u0505\7\u0336\2\2\u0505")
        buf.write("\u0506\5\u017c\u00bf\2\u0506\u0507\7\u0337\2\2\u0507\u0509")
        buf.write("\3\2\2\2\u0508\u0504\3\2\2\2\u0508\u0509\3\2\2\2\u0509")
        buf.write("\u050b\3\2\2\2\u050a\u04ff\3\2\2\2\u050a\u050b\3\2\2\2")
        buf.write("\u050ba\3\2\2\2\u050c\u050f\5d\63\2\u050d\u050f\5\u00c8")
        buf.write("e\2\u050e\u050c\3\2\2\2\u050e\u050d\3\2\2\2\u050f\u0511")
        buf.write("\3\2\2\2\u0510\u0512\5\u0142\u00a2\2\u0511\u0510\3\2\2")
        buf.write("\2\u0511\u0512\3\2\2\2\u0512c\3\2\2\2\u0513\u0517\7\u01da")
        buf.write("\2\2\u0514\u0517\7\u0225\2\2\u0515\u0517\5\u016e\u00b8")
        buf.write("\2\u0516\u0513\3\2\2\2\u0516\u0514\3\2\2\2\u0516\u0515")
        buf.write("\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u051b\7\u0331\2\2\u0519")
        buf.write("\u051c\7\u033b\2\2\u051a\u051c\5\u01a2\u00d2\2\u051b\u0519")
        buf.write("\3\2\2\2\u051b\u051a\3\2\2\2\u051c\u051f\3\2\2\2\u051d")
        buf.write("\u051f\7\u0314\2\2\u051e\u0516\3\2\2\2\u051e\u051d\3\2")
        buf.write("\2\2\u051fe\3\2\2\2\u0520\u0523\5h\65\2\u0521\u0523\5")
        buf.write("j\66\2\u0522\u0520\3\2\2\2\u0522\u0521\3\2\2\2\u0523g")
        buf.write("\3\2\2\2\u0524\u0525\7\u00ea\2\2\u0525\u0526\7\u0336\2")
        buf.write("\2\u0526\u0527\5\u01a2\u00d2\2\u0527\u0528\7\u0338\2\2")
        buf.write("\u0528\u0529\7\u0320\2\2\u0529\u052a\7\u0337\2\2\u052a")
        buf.write("i\3\2\2\2\u052b\u052c\7\u00e9\2\2\u052c\u052d\7\u0336")
        buf.write("\2\2\u052d\u052e\7\u0320\2\2\u052e\u052f\7\u0338\2\2\u052f")
        buf.write("\u0530\7\u0320\2\2\u0530\u0531\7\u0337\2\2\u0531\u0533")
        buf.write("\7\u0331\2\2\u0532\u0534\5\u01a2\u00d2\2\u0533\u0532\3")
        buf.write("\2\2\2\u0533\u0534\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0537")
        buf.write("\7\u0331\2\2\u0536\u0538\5\u01a2\u00d2\2\u0537\u0536\3")
        buf.write("\2\2\2\u0537\u0538\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053a")
        buf.write("\7\u0331\2\2\u053a\u053b\5\u01a2\u00d2\2\u053bk\3\2\2")
        buf.write("\2\u053c\u053d\7Y\2\2\u053d\u053f\7\u031b\2\2\u053e\u0540")
        buf.write("\7\20\2\2\u053f\u053e\3\2\2\2\u053f\u0540\3\2\2\2\u0540")
        buf.write("\u0541\3\2\2\2\u0541\u0543\5\u00a2R\2\u0542\u0544\7\u0339")
        buf.write("\2\2\u0543\u0542\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0568")
        buf.write("\3\2\2\2\u0545\u0546\7Y\2\2\u0546\u054b\5\u00a0Q\2\u0547")
        buf.write("\u0548\7\u0338\2\2\u0548\u054a\5\u00a0Q\2\u0549\u0547")
        buf.write("\3\2\2\2\u054a\u054d\3\2\2\2\u054b\u0549\3\2\2\2\u054b")
        buf.write("\u054c\3\2\2\2\u054c\u054f\3\2\2\2\u054d\u054b\3\2\2\2")
        buf.write("\u054e\u0550\7\u0339\2\2\u054f\u054e\3\2\2\2\u054f\u0550")
        buf.write("\3\2\2\2\u0550\u0568\3\2\2\2\u0551\u0552\7Y\2\2\u0552")
        buf.write("\u0554\7\u031b\2\2\u0553\u0555\7\20\2\2\u0554\u0553\3")
        buf.write("\2\2\2\u0554\u0555\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0558")
        buf.write("\5\u00a4S\2\u0557\u0559\7\u0339\2\2\u0558\u0557\3\2\2")
        buf.write("\2\u0558\u0559\3\2\2\2\u0559\u0568\3\2\2\2\u055a\u055b")
        buf.write("\7\u017d\2\2\u055b\u055c\7\u0311\2\2\u055c\u055d\7\u0336")
        buf.write("\2\2\u055d\u055f\7\u0320\2\2\u055e\u0560\7\u0338\2\2\u055f")
        buf.write("\u055e\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0561\3\2\2\2")
        buf.write("\u0561\u0562\7\20\2\2\u0562\u0563\5\u01a2\u00d2\2\u0563")
        buf.write("\u0565\7\u0337\2\2\u0564\u0566\7\u0339\2\2\u0565\u0564")
        buf.write("\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u0568\3\2\2\2\u0567")
        buf.write("\u053c\3\2\2\2\u0567\u0545\3\2\2\2\u0567\u0551\3\2\2\2")
        buf.write("\u0567\u055a\3\2\2\2\u0568m\3\2\2\2\u0569\u056b\7\63\2")
        buf.write("\2\u056a\u056c\7\u0210\2\2\u056b\u056a\3\2\2\2\u056b\u056c")
        buf.write("\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056f\5\u017e\u00c0")
        buf.write("\2\u056e\u0570\7\u0339\2\2\u056f\u056e\3\2\2\2\u056f\u0570")
        buf.write("\3\2\2\2\u0570\u0587\3\2\2\2\u0571\u0573\7X\2\2\u0572")
        buf.write("\u0574\7\u0210\2\2\u0573\u0572\3\2\2\2\u0573\u0574\3\2")
        buf.write("\2\2\u0574\u0576\3\2\2\2\u0575\u0577\7P\2\2\u0576\u0575")
        buf.write("\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0578\3\2\2\2\u0578")
        buf.write("\u057a\5\u017e\u00c0\2\u0579\u057b\7\u0339\2\2\u057a\u0579")
        buf.write("\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u0587\3\2\2\2\u057c")
        buf.write("\u0587\5\u00bc_\2\u057d\u0587\5\u00c2b\2\u057e\u0580\7")
        buf.write("\u00e8\2\2\u057f\u0581\7\u0210\2\2\u0580\u057f\3\2\2\2")
        buf.write("\u0580\u0581\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584\5")
        buf.write("\u017e\u00c0\2\u0583\u0585\7\u0339\2\2\u0584\u0583\3\2")
        buf.write("\2\2\u0584\u0585\3\2\2\2\u0585\u0587\3\2\2\2\u0586\u0569")
        buf.write("\3\2\2\2\u0586\u0571\3\2\2\2\u0586\u057c\3\2\2\2\u0586")
        buf.write("\u057d\3\2\2\2\u0586\u057e\3\2\2\2\u0587o\3\2\2\2\u0588")
        buf.write("\u0589\7w\2\2\u0589\u058a\5r:\2\u058aq\3\2\2\2\u058b\u058c")
        buf.write("\7\u031b\2\2\u058c\u058e\7\u0324\2\2\u058d\u058b\3\2\2")
        buf.write("\2\u058d\u058e\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u0592")
        buf.write("\5\u0174\u00bb\2\u0590\u0592\5\u00c8e\2\u0591\u058f\3")
        buf.write("\2\2\2\u0591\u0590\3\2\2\2\u0592\u059b\3\2\2\2\u0593\u0598")
        buf.write("\5t;\2\u0594\u0595\7\u0338\2\2\u0595\u0597\5t;\2\u0596")
        buf.write("\u0594\3\2\2\2\u0597\u059a\3\2\2\2\u0598\u0596\3\2\2\2")
        buf.write("\u0598\u0599\3\2\2\2\u0599\u059c\3\2\2\2\u059a\u0598\3")
        buf.write("\2\2\2\u059b\u0593\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u059e")
        buf.write("\3\2\2\2\u059d\u059f\7\u0339\2\2\u059e\u059d\3\2\2\2\u059e")
        buf.write("\u059f\3\2\2\2\u059f\u05b6\3\2\2\2\u05a0\u05a1\7\u0336")
        buf.write("\2\2\u05a1\u05a6\5v<\2\u05a2\u05a3\7\u033e\2\2\u05a3\u05a5")
        buf.write("\5v<\2\u05a4\u05a2\3\2\2\2\u05a5\u05a8\3\2\2\2\u05a6\u05a4")
        buf.write("\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a9\3\2\2\2\u05a8")
        buf.write("\u05a6\3\2\2\2\u05a9\u05b0\7\u0337\2\2\u05aa\u05ac\7\20")
        buf.write("\2\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad")
        buf.write("\3\2\2\2\u05ad\u05ae\t\f\2\2\u05ae\u05af\7\u0324\2\2\u05af")
        buf.write("\u05b1\7\u0320\2\2\u05b0\u05ab\3\2\2\2\u05b0\u05b1\3\2")
        buf.write("\2\2\u05b1\u05b3\3\2\2\2\u05b2\u05b4\7\u0339\2\2\u05b3")
        buf.write("\u05b2\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b6\3\2\2\2")
        buf.write("\u05b5\u058d\3\2\2\2\u05b5\u05a0\3\2\2\2\u05b6s\3\2\2")
        buf.write("\2\u05b7\u05b8\7\u031b\2\2\u05b8\u05ba\7\u0324\2\2\u05b9")
        buf.write("\u05b7\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05c4\3\2\2\2")
        buf.write("\u05bb\u05be\5\u00c6d\2\u05bc\u05be\5\u01a2\u00d2\2\u05bd")
        buf.write("\u05bb\3\2\2\2\u05bd\u05bc\3\2\2\2\u05be\u05c0\3\2\2\2")
        buf.write("\u05bf\u05c1\t\r\2\2\u05c0\u05bf\3\2\2\2\u05c0\u05c1\3")
        buf.write("\2\2\2\u05c1\u05c5\3\2\2\2\u05c2\u05c5\7Z\2\2\u05c3\u05c5")
        buf.write("\7\u00e0\2\2\u05c4\u05bd\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c4")
        buf.write("\u05c3\3\2\2\2\u05c5u\3\2\2\2\u05c6\u05c7\t\3\2\2\u05c7")
        buf.write("w\3\2\2\2\u05c8\u05ca\5\u009eP\2\u05c9\u05cb\7\u0339\2")
        buf.write("\2\u05ca\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u0604")
        buf.write("\3\2\2\2\u05cc\u05d8\7\u0092\2\2\u05cd\u05cf\7\6\2\2\u05ce")
        buf.write("\u05d0\7\u028f\2\2\u05cf\u05ce\3\2\2\2\u05cf\u05d0\3\2")
        buf.write("\2\2\u05d0\u05d9\3\2\2\2\u05d1\u05d6\5\u0092J\2\u05d2")
        buf.write("\u05d3\7\u0336\2\2\u05d3\u05d4\5\u017c\u00bf\2\u05d4\u05d5")
        buf.write("\7\u0337\2\2\u05d5\u05d7\3\2\2\2\u05d6\u05d2\3\2\2\2\u05d6")
        buf.write("\u05d7\3\2\2\2\u05d7\u05d9\3\2\2\2\u05d8\u05cd\3\2\2\2")
        buf.write("\u05d8\u05d1\3\2\2\2\u05d9\u05dc\3\2\2\2\u05da\u05db\7")
        buf.write("\u00e6\2\2\u05db\u05dd\5\u016e\u00b8\2\u05dc\u05da\3\2")
        buf.write("\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05df")
        buf.write("\7\u015e\2\2\u05df\u05e4\5\u01a2\u00d2\2\u05e0\u05e1\7")
        buf.write("\u0338\2\2\u05e1\u05e3\5\u01a2\u00d2\2\u05e2\u05e0\3\2")
        buf.write("\2\2\u05e3\u05e6\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e4\u05e5")
        buf.write("\3\2\2\2\u05e5\u05ea\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e7")
        buf.write("\u05e8\7\u017d\2\2\u05e8\u05e9\7\u0092\2\2\u05e9\u05eb")
        buf.write("\7\u00ed\2\2\u05ea\u05e7\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb")
        buf.write("\u05ee\3\2\2\2\u05ec\u05ed\7\20\2\2\u05ed\u05ef\5\u01a2")
        buf.write("\u00d2\2\u05ee\u05ec\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef")
        buf.write("\u05f1\3\2\2\2\u05f0\u05f2\7\u0339\2\2\u05f1\u05f0\3\2")
        buf.write("\2\2\u05f1\u05f2\3\2\2\2\u05f2\u0604\3\2\2\2\u05f3\u05fa")
        buf.write("\7\u011d\2\2\u05f4\u05f5\7\u0336\2\2\u05f5\u05f6\7\u017d")
        buf.write("\2\2\u05f6\u05f7\7\u01c1\2\2\u05f7\u05f8\7\u0324\2\2\u05f8")
        buf.write("\u05f9\7\u031b\2\2\u05f9\u05fb\7\u0337\2\2\u05fa\u05f4")
        buf.write("\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fd\3\2\2\2\u05fc")
        buf.write("\u05fe\7\u0339\2\2\u05fd\u05fc\3\2\2\2\u05fd\u05fe\3\2")
        buf.write("\2\2\u05fe\u0604\3\2\2\2\u05ff\u0604\5\u0084C\2\u0600")
        buf.write("\u0604\5\u0086D\2\u0601\u0604\5\u0088E\2\u0602\u0604\5")
        buf.write("z>\2\u0603\u05c8\3\2\2\2\u0603\u05cc\3\2\2\2\u0603\u05f3")
        buf.write("\3\2\2\2\u0603\u05ff\3\2\2\2\u0603\u0600\3\2\2\2\u0603")
        buf.write("\u0601\3\2\2\2\u0603\u0602\3\2\2\2\u0604y\3\2\2\2\u0605")
        buf.write("\u0606\7I\2\2\u0606\u0607\7+\2\2\u0607\u060a\5\u01a2\u00d2")
        buf.write("\2\u0608\u0609\7\24\2\2\u0609\u060b\5\u01a2\u00d2\2\u060a")
        buf.write("\u0608\3\2\2\2\u060a\u060b\3\2\2\2\u060b\u060f\3\2\2\2")
        buf.write("\u060c\u060d\7\u008c\2\2\u060d\u0610\5|?\2\u060e\u0610")
        buf.write("\5\u0080A\2\u060f\u060c\3\2\2\2\u060f\u060e\3\2\2\2\u0610")
        buf.write("\u0617\3\2\2\2\u0611\u0612\7\u0186\2\2\u0612\u0613\7\u0086")
        buf.write("\2\2\u0613\u0614\7\34\2\2\u0614\u0615\7\u01e1\2\2\u0615")
        buf.write("\u0616\7\u0324\2\2\u0616\u0618\t\n\2\2\u0617\u0611\3\2")
        buf.write("\2\2\u0617\u0618\3\2\2\2\u0618{\3\2\2\2\u0619\u061a\7")
        buf.write("\u0199\2\2\u061a\u062b\5\u01a2\u00d2\2\u061b\u061d\7\u01f3")
        buf.write("\2\2\u061c\u061b\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061e")
        buf.write("\3\2\2\2\u061e\u061f\7\u0082\2\2\u061f\u0620\7\u0324\2")
        buf.write("\2\u0620\u0628\7\u0320\2\2\u0621\u0622\7\u017d\2\2\u0622")
        buf.write("\u0623\7\u028d\2\2\u0623\u0624\7\u00ad\2\2\u0624\u0625")
        buf.write("\7\u0336\2\2\u0625\u0626\5~@\2\u0626\u0627\7\u0337\2\2")
        buf.write("\u0627\u0629\3\2\2\2\u0628\u0621\3\2\2\2\u0628\u0629\3")
        buf.write("\2\2\2\u0629\u062b\3\2\2\2\u062a\u0619\3\2\2\2\u062a\u061c")
        buf.write("\3\2\2\2\u062b}\3\2\2\2\u062c\u062d\t\16\2\2\u062d\u062e")
        buf.write("\7\u0324\2\2\u062e\u0635\7\u0320\2\2\u062f\u0630\7\u0338")
        buf.write("\2\2\u0630\u0631\t\17\2\2\u0631\u0632\7&\2\2\u0632\u0633")
        buf.write("\7\u00f5\2\2\u0633\u0634\7\u0324\2\2\u0634\u0636\7\u0320")
        buf.write("\2\2\u0635\u062f\3\2\2\2\u0635\u0636\3\2\2\2\u0636\177")
        buf.write("\3\2\2\2\u0637\u0638\7\u01ef\2\2\u0638\u0639\7&\2\2\u0639")
        buf.write("\u063a\7\u00f5\2\2\u063a\u063b\7\u0324\2\2\u063b\u063d")
        buf.write("\7\u0320\2\2\u063c\u0637\3\2\2\2\u063c\u063d\3\2\2\2\u063d")
        buf.write("\u063e\3\2\2\2\u063e\u063f\7\u017d\2\2\u063f\u0640\7\u02e4")
        buf.write("\2\2\u0640\u0641\7\u0324\2\2\u0641\u0646\7\u0320\2\2\u0642")
        buf.write("\u0643\7\u0338\2\2\u0643\u0645\5\u0082B\2\u0644\u0642")
        buf.write("\3\2\2\2\u0645\u0648\3\2\2\2\u0646\u0644\3\2\2\2\u0646")
        buf.write("\u0647\3\2\2\2\u0647\u0081\3\2\2\2\u0648\u0646\3\2\2\2")
        buf.write("\u0649\u064a\t\20\2\2\u064a\u064b\7\u0324\2\2\u064b\u064c")
        buf.write("\7\u0320\2\2\u064c\u0083\3\2\2\2\u064d\u064e\7\u00e8\2")
        buf.write("\2\u064e\u064f\7\u02e7\2\2\u064f\u0650\7\u00ad\2\2\u0650")
        buf.write("\u0651\5\u01a2\u00d2\2\u0651\u0652\7\u01d4\2\2\u0652\u0653")
        buf.write("\7&\2\2\u0653\u0654\5\u0090I\2\u0654\u065e\3\2\2\2\u0655")
        buf.write("\u0656\7\u00e8\2\2\u0656\u0657\7\u00be\2\2\u0657\u0658")
        buf.write("\7\u00ad\2\2\u0658\u0659\7\u01d4\2\2\u0659\u065a\7&\2")
        buf.write("\2\u065a\u065b\7\u00f5\2\2\u065b\u065c\7\u0324\2\2\u065c")
        buf.write("\u065e\7\u0320\2\2\u065d\u064d\3\2\2\2\u065d\u0655\3\2")
        buf.write("\2\2\u065e\u0085\3\2\2\2\u065f\u0660\7\63\2\2\u0660\u0661")
        buf.write("\7\u02e7\2\2\u0661\u0662\7\u00ad\2\2\u0662\u066b\5\u01a2")
        buf.write("\u00d2\2\u0663\u0664\7\63\2\2\u0664\u0665\7\6\2\2\u0665")
        buf.write("\u0666\7\u02e7\2\2\u0666\u066b\7\u022e\2\2\u0667\u0668")
        buf.write("\7\63\2\2\u0668\u0669\7\u00be\2\2\u0669\u066b\7\u00ad")
        buf.write("\2\2\u066a\u065f\3\2\2\2\u066a\u0663\3\2\2\2\u066a\u0667")
        buf.write("\3\2\2\2\u066b\u0087\3\2\2\2\u066c\u066d\7I\2\2\u066d")
        buf.write("\u066e\7\u00be\2\2\u066e\u066f\7\u00ad\2\2\u066f\u0670")
        buf.write("\7\u01ef\2\2\u0670\u0671\7&\2\2\u0671\u0672\7\u00f5\2")
        buf.write("\2\u0672\u0673\7\u0324\2\2\u0673\u0690\7\u0320\2\2\u0674")
        buf.write("\u0675\7I\2\2\u0675\u0676\7\u02e7\2\2\u0676\u0677\7\u00ad")
        buf.write("\2\2\u0677\u067a\5\u01a2\u00d2\2\u0678\u0679\7\24\2\2")
        buf.write("\u0679\u067b\5\u01a2\u00d2\2\u067a\u0678\3\2\2\2\u067a")
        buf.write("\u067b\3\2\2\2\u067b\u067f\3\2\2\2\u067c\u067d\7\u008c")
        buf.write("\2\2\u067d\u067e\7\u0292\2\2\u067e\u0680\5\u01a2\u00d2")
        buf.write("\2\u067f\u067c\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0681")
        buf.write("\3\2\2\2\u0681\u068b\7\u017d\2\2\u0682\u0687\5\u008aF")
        buf.write("\2\u0683\u0684\7\u01ef\2\2\u0684\u0685\7&\2\2\u0685\u0687")
        buf.write("\5\u008eH\2\u0686\u0682\3\2\2\2\u0686\u0683\3\2\2\2\u0687")
        buf.write("\u0689\3\2\2\2\u0688\u068a\7\u0338\2\2\u0689\u0688\3\2")
        buf.write("\2\2\u0689\u068a\3\2\2\2\u068a\u068c\3\2\2\2\u068b\u0686")
        buf.write("\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068b\3\2\2\2\u068d")
        buf.write("\u068e\3\2\2\2\u068e\u0690\3\2\2\2\u068f\u066c\3\2\2\2")
        buf.write("\u068f\u0674\3\2\2\2\u0690\u0089\3\2\2\2\u0691\u0692\7")
        buf.write("\u022d\2\2\u0692\u0693\7\u0324\2\2\u0693\u06a1\7\u0320")
        buf.write("\2\2\u0694\u0695\7\u018e\2\2\u0695\u0696\7\u0324\2\2\u0696")
        buf.write("\u06a1\5\u008cG\2\u0697\u0698\7\u021b\2\2\u0698\u0699")
        buf.write("\7\u0324\2\2\u0699\u06a1\7\u0320\2\2\u069a\u069b\7\u0293")
        buf.write("\2\2\u069b\u069c\7\u0324\2\2\u069c\u06a1\7\u0320\2\2\u069d")
        buf.write("\u069e\7\u01c7\2\2\u069e\u069f\7\u0324\2\2\u069f\u06a1")
        buf.write("\t\21\2\2\u06a0\u0691\3\2\2\2\u06a0\u0694\3\2\2\2\u06a0")
        buf.write("\u0697\3\2\2\2\u06a0\u069a\3\2\2\2\u06a0\u069d\3\2\2\2")
        buf.write("\u06a1\u008b\3\2\2\2\u06a2\u06a3\t\22\2\2\u06a3\u008d")
        buf.write("\3\2\2\2\u06a4\u06a5\7+\2\2\u06a5\u06b0\5\u01a2\u00d2")
        buf.write("\2\u06a6\u06a7\7\22\2\2\u06a7\u06a8\7\u00ad\2\2\u06a8")
        buf.write("\u06b0\5\u01a2\u00d2\2\u06a9\u06aa\7\u02e7\2\2\u06aa\u06ab")
        buf.write("\7\u00ad\2\2\u06ab\u06b0\5\u01a2\u00d2\2\u06ac\u06ad\7")
        buf.write("\u00f5\2\2\u06ad\u06ae\7\u0324\2\2\u06ae\u06b0\7\u0320")
        buf.write("\2\2\u06af\u06a4\3\2\2\2\u06af\u06a6\3\2\2\2\u06af\u06a9")
        buf.write("\3\2\2\2\u06af\u06ac\3\2\2\2\u06b0\u008f\3\2\2\2\u06b1")
        buf.write("\u06b2\7+\2\2\u06b2\u06b7\5\u01a2\u00d2\2\u06b3\u06b4")
        buf.write("\7\u017d\2\2\u06b4\u06b5\7\u00f5\2\2\u06b5\u06b6\7\u0324")
        buf.write("\2\2\u06b6\u06b8\7\u0320\2\2\u06b7\u06b3\3\2\2\2\u06b7")
        buf.write("\u06b8\3\2\2\2\u06b8\u06c9\3\2\2\2\u06b9\u06ba\7\22\2")
        buf.write("\2\u06ba\u06bb\7\u00ad\2\2\u06bb\u06c0\5\u01a2\u00d2\2")
        buf.write("\u06bc\u06bd\7\u017d\2\2\u06bd\u06be\7\u00f5\2\2\u06be")
        buf.write("\u06bf\7\u0324\2\2\u06bf\u06c1\7\u0320\2\2\u06c0\u06bc")
        buf.write("\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c9\3\2\2\2\u06c2")
        buf.write("\u06c3\7\u02e7\2\2\u06c3\u06c4\7\u00ad\2\2\u06c4\u06c9")
        buf.write("\5\u01a2\u00d2\2\u06c5\u06c6\7\u00f5\2\2\u06c6\u06c7\7")
        buf.write("\u0324\2\2\u06c7\u06c9\7\u0320\2\2\u06c8\u06b1\3\2\2\2")
        buf.write("\u06c8\u06b9\3\2\2\2\u06c8\u06c2\3\2\2\2\u06c8\u06c5\3")
        buf.write("\2\2\2\u06c9\u0091\3\2\2\2\u06ca\u06e5\7w\2\2\u06cb\u06cc")
        buf.write("\7\u0176\2\2\u06cc\u06e5\5\u01a2\u00d2\2\u06cd\u06ce\7")
        buf.write("\u02ea\2\2\u06ce\u06e5\5\u01a2\u00d2\2\u06cf\u06d1\7\u01c0")
        buf.write("\2\2\u06d0\u06d2\5\u01a2\u00d2\2\u06d1\u06d0\3\2\2\2\u06d1")
        buf.write("\u06d2\3\2\2\2\u06d2\u06e5\3\2\2\2\u06d3\u06d4\7I\2\2")
        buf.write("\u06d4\u06e5\t\23\2\2\u06d5\u06e5\7\u02d3\2\2\u06d6\u06e5")
        buf.write("\7\u021e\2\2\u06d7\u06e5\7\u0133\2\2\u06d8\u06e5\7\u010f")
        buf.write("\2\2\u06d9\u06e5\7\u00a3\2\2\u06da\u06e2\7\n\2\2\u06db")
        buf.write("\u06dd\7\r\2\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2")
        buf.write("\u06dd\u06e0\3\2\2\2\u06de\u06e1\5\u01a2\u00d2\2\u06df")
        buf.write("\u06e1\7U\2\2\u06e0\u06de\3\2\2\2\u06e0\u06df\3\2\2\2")
        buf.write("\u06e1\u06e3\3\2\2\2\u06e2\u06dc\3\2\2\2\u06e2\u06e3\3")
        buf.write("\2\2\2\u06e3\u06e5\3\2\2\2\u06e4\u06ca\3\2\2\2\u06e4\u06cb")
        buf.write("\3\2\2\2\u06e4\u06cd\3\2\2\2\u06e4\u06cf\3\2\2\2\u06e4")
        buf.write("\u06d3\3\2\2\2\u06e4\u06d5\3\2\2\2\u06e4\u06d6\3\2\2\2")
        buf.write("\u06e4\u06d7\3\2\2\2\u06e4\u06d8\3\2\2\2\u06e4\u06d9\3")
        buf.write("\2\2\2\u06e4\u06da\3\2\2\2\u06e5\u0093\3\2\2\2\u06e6\u06e7")
        buf.write("\7\u013e\2\2\u06e7\u06ea\7\u031b\2\2\u06e8\u06e9\7\u0331")
        buf.write("\2\2\u06e9\u06eb\5\u01a2\u00d2\2\u06ea\u06e8\3\2\2\2\u06ea")
        buf.write("\u06eb\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ed\7\u0324")
        buf.write("\2\2\u06ed\u06ef\5\u00c8e\2\u06ee\u06f0\7\u0339\2\2\u06ef")
        buf.write("\u06ee\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u070e\3\2\2\2")
        buf.write("\u06f1\u06f2\7\u013e\2\2\u06f2\u06f3\7\u031b\2\2\u06f3")
        buf.write("\u06f4\5\u01a8\u00d5\2\u06f4\u06f6\5\u00c8e\2\u06f5\u06f7")
        buf.write("\7\u0339\2\2\u06f6\u06f5\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7")
        buf.write("\u070e\3\2\2\2\u06f8\u06f9\7\u013e\2\2\u06f9\u06fa\7\u031b")
        buf.write("\2\2\u06fa\u06fb\7\u0324\2\2\u06fb\u06fc\7P\2\2\u06fc")
        buf.write("\u0707\5\u00be`\2\u06fd\u0705\7\u0086\2\2\u06fe\u06ff")
        buf.write("\7\u010b\2\2\u06ff\u0706\7\u0278\2\2\u0700\u0703\7\u016d")
        buf.write("\2\2\u0701\u0702\7\u00e2\2\2\u0702\u0704\5\u017c\u00bf")
        buf.write("\2\u0703\u0701\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0706")
        buf.write("\3\2\2\2\u0705\u06fe\3\2\2\2\u0705\u0700\3\2\2\2\u0706")
        buf.write("\u0708\3\2\2\2\u0707\u06fd\3\2\2\2\u0707\u0708\3\2\2\2")
        buf.write("\u0708\u070a\3\2\2\2\u0709\u070b\7\u0339\2\2\u070a\u0709")
        buf.write("\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070e\3\2\2\2\u070c")
        buf.write("\u070e\5\u00c4c\2\u070d\u06e6\3\2\2\2\u070d\u06f1\3\2")
        buf.write("\2\2\u070d\u06f8\3\2\2\2\u070d\u070c\3\2\2\2\u070e\u0095")
        buf.write("\3\2\2\2\u070f\u0710\7\34\2\2\u0710\u0711\7d\2\2\u0711")
        buf.write("\u0714\t\24\2\2\u0712\u0715\5\u01a2\u00d2\2\u0713\u0715")
        buf.write("\7\u031b\2\2\u0714\u0712\3\2\2\2\u0714\u0713\3\2\2\2\u0714")
        buf.write("\u0715\3\2\2\2\u0715\u0717\3\2\2\2\u0716\u0718\7\u0339")
        buf.write("\2\2\u0717\u0716\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u0761")
        buf.write("\3\2\2\2\u0719\u071a\7\34\2\2\u071a\u0724\t\24\2\2\u071b")
        buf.write("\u071e\5\u01a2\u00d2\2\u071c\u071e\7\u031b\2\2\u071d\u071b")
        buf.write("\3\2\2\2\u071d\u071c\3\2\2\2\u071e\u0722\3\2\2\2\u071f")
        buf.write("\u0720\7\u017d\2\2\u0720\u0721\7\u0241\2\2\u0721\u0723")
        buf.write("\7\u0320\2\2\u0722\u071f\3\2\2\2\u0722\u0723\3\2\2\2\u0723")
        buf.write("\u0725\3\2\2\2\u0724\u071d\3\2\2\2\u0724\u0725\3\2\2\2")
        buf.write("\u0725\u0727\3\2\2\2\u0726\u0728\7\u0339\2\2\u0727\u0726")
        buf.write("\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u0761\3\2\2\2\u0729")
        buf.write("\u072a\7:\2\2\u072a\u0737\t\24\2\2\u072b\u072e\5\u01a2")
        buf.write("\u00d2\2\u072c\u072e\7\u031b\2\2\u072d\u072b\3\2\2\2\u072d")
        buf.write("\u072c\3\2\2\2\u072e\u0735\3\2\2\2\u072f\u0730\7\u017d")
        buf.write("\2\2\u0730\u0731\7\u0336\2\2\u0731\u0732\7\u01d9\2\2\u0732")
        buf.write("\u0733\7\u0324\2\2\u0733\u0734\t\n\2\2\u0734\u0736\7\u0337")
        buf.write("\2\2\u0735\u072f\3\2\2\2\u0735\u0736\3\2\2\2\u0736\u0738")
        buf.write("\3\2\2\2\u0737\u072d\3\2\2\2\u0737\u0738\3\2\2\2\u0738")
        buf.write("\u073a\3\2\2\2\u0739\u073b\7\u0339\2\2\u073a\u0739\3\2")
        buf.write("\2\2\u073a\u073b\3\2\2\2\u073b\u0761\3\2\2\2\u073c\u073e")
        buf.write("\7:\2\2\u073d\u073f\7\u030d\2\2\u073e\u073d\3\2\2\2\u073e")
        buf.write("\u073f\3\2\2\2\u073f\u0741\3\2\2\2\u0740\u0742\7\u0339")
        buf.write("\2\2\u0741\u0740\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0761")
        buf.write("\3\2\2\2\u0743\u0744\7:\2\2\u0744\u0761\5\u01a2\u00d2")
        buf.write("\2\u0745\u0746\7\u0121\2\2\u0746\u0761\5\u01a2\u00d2\2")
        buf.write("\u0747\u0748\7\u0121\2\2\u0748\u074b\t\24\2\2\u0749\u074c")
        buf.write("\5\u01a2\u00d2\2\u074a\u074c\7\u031b\2\2\u074b\u0749\3")
        buf.write("\2\2\2\u074b\u074a\3\2\2\2\u074b\u074c\3\2\2\2\u074c\u074e")
        buf.write("\3\2\2\2\u074d\u074f\7\u0339\2\2\u074e\u074d\3\2\2\2\u074e")
        buf.write("\u074f\3\2\2\2\u074f\u0761\3\2\2\2\u0750\u0752\7\u0121")
        buf.write("\2\2\u0751\u0753\7\u030d\2\2\u0752\u0751\3\2\2\2\u0752")
        buf.write("\u0753\3\2\2\2\u0753\u0755\3\2\2\2\u0754\u0756\7\u0339")
        buf.write("\2\2\u0755\u0754\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0761")
        buf.write("\3\2\2\2\u0757\u0758\7\u012d\2\2\u0758\u075b\t\24\2\2")
        buf.write("\u0759\u075c\5\u01a2\u00d2\2\u075a\u075c\7\u031b\2\2\u075b")
        buf.write("\u0759\3\2\2\2\u075b\u075a\3\2\2\2\u075b\u075c\3\2\2\2")
        buf.write("\u075c\u075e\3\2\2\2\u075d\u075f\7\u0339\2\2\u075e\u075d")
        buf.write("\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0761\3\2\2\2\u0760")
        buf.write("\u070f\3\2\2\2\u0760\u0719\3\2\2\2\u0760\u0729\3\2\2\2")
        buf.write("\u0760\u073c\3\2\2\2\u0760\u0743\3\2\2\2\u0760\u0745\3")
        buf.write("\2\2\2\u0760\u0747\3\2\2\2\u0760\u0750\3\2\2\2\u0760\u0757")
        buf.write("\3\2\2\2\u0761\u0097\3\2\2\2\u0762\u0764\7\u0211\2\2\u0763")
        buf.write("\u0765\7\u031c\2\2\u0764\u0763\3\2\2\2\u0764\u0765\3\2")
        buf.write("\2\2\u0765\u0099\3\2\2\2\u0766\u0767\7\u0170\2\2\u0767")
        buf.write("\u0769\5\u01a2\u00d2\2\u0768\u076a\7\u0339\2\2\u0769\u0768")
        buf.write("\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u009b\3\2\2\2\u076b")
        buf.write("\u076d\7\u013f\2\2\u076c\u076e\7\u0320\2\2\u076d\u076c")
        buf.write("\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u009d\3\2\2\2\u076f")
        buf.write("\u0770\7w\2\2\u0770\u0771\7\20\2\2\u0771\u0772\t\25\2")
        buf.write("\2\u0772\u009f\3\2\2\2\u0773\u0775\7\u031b\2\2\u0774\u0776")
        buf.write("\7\20\2\2\u0775\u0774\3\2\2\2\u0775\u0776\3\2\2\2\u0776")
        buf.write("\u0777\3\2\2\2\u0777\u077a\5\u019c\u00cf\2\u0778\u0779")
        buf.write("\7\u0324\2\2\u0779\u077b\5\u00c8e\2\u077a\u0778\3\2\2")
        buf.write("\2\u077a\u077b\3\2\2\2\u077b\u00a1\3\2\2\2\u077c\u077d")
        buf.write("\7\u0157\2\2\u077d\u077e\7\u0336\2\2\u077e\u077f\5\u00a8")
        buf.write("U\2\u077f\u0780\7\u0337\2\2\u0780\u00a3\3\2\2\2\u0781")
        buf.write("\u0782\7\u030f\2\2\u0782\u0784\7\u0336\2\2\u0783\u0785")
        buf.write("\t\26\2\2\u0784\u0783\3\2\2\2\u0784\u0785\3\2\2\2\u0785")
        buf.write("\u0786\3\2\2\2\u0786\u0787\5\u00a6T\2\u0787\u0788\7\u0337")
        buf.write("\2\2\u0788\u00a5\3\2\2\2\u0789\u078a\7\u031d\2\2\u078a")
        buf.write("\u078b\7\u0331\2\2\u078b\u078c\7\u031d\2\2\u078c\u00a7")
        buf.write("\3\2\2\2\u078d\u0794\5\u00aaV\2\u078e\u0790\7\u0338\2")
        buf.write("\2\u078f\u078e\3\2\2\2\u078f\u0790\3\2\2\2\u0790\u0791")
        buf.write("\3\2\2\2\u0791\u0793\5\u00aaV\2\u0792\u078f\3\2\2\2\u0793")
        buf.write("\u0796\3\2\2\2\u0794\u0792\3\2\2\2\u0794\u0795\3\2\2\2")
        buf.write("\u0795\u00a9\3\2\2\2\u0796\u0794\3\2\2\2\u0797\u079b\5")
        buf.write("\u00acW\2\u0798\u079b\5\u00aeX\2\u0799\u079b\5\u00b2Z")
        buf.write("\2\u079a\u0797\3\2\2\2\u079a\u0798\3\2\2\2\u079a\u0799")
        buf.write("\3\2\2\2\u079b\u00ab\3\2\2\2\u079c\u07a0\5\u01a2\u00d2")
        buf.write("\2\u079d\u07a1\5\u019c\u00cf\2\u079e\u079f\7\20\2\2\u079f")
        buf.write("\u07a1\5\u00c8e\2\u07a0\u079d\3\2\2\2\u07a0\u079e\3\2")
        buf.write("\2\2\u07a1\u07a4\3\2\2\2\u07a2\u07a3\7\67\2\2\u07a3\u07a5")
        buf.write("\5\u01a2\u00d2\2\u07a4\u07a2\3\2\2\2\u07a4\u07a5\3\2\2")
        buf.write("\2\u07a5\u07a7\3\2\2\2\u07a6\u07a8\5\u0184\u00c3\2\u07a7")
        buf.write("\u07a6\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07be\3\2\2\2")
        buf.write("\u07a9\u07aa\7=\2\2\u07aa\u07ac\5\u01a2\u00d2\2\u07ab")
        buf.write("\u07a9\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ad\3\2\2\2")
        buf.write("\u07ad\u07af\5\u0186\u00c4\2\u07ae\u07b0\5\u0186\u00c4")
        buf.write("\2\u07af\u07ae\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u07bf")
        buf.write("\3\2\2\2\u07b1\u07b7\7\u0097\2\2\u07b2\u07b3\7\u0336\2")
        buf.write("\2\u07b3\u07b4\7\u031c\2\2\u07b4\u07b5\7\u0338\2\2\u07b5")
        buf.write("\u07b6\7\u031c\2\2\u07b6\u07b8\7\u0337\2\2\u07b7\u07b2")
        buf.write("\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07bc\3\2\2\2\u07b9")
        buf.write("\u07ba\7\u00dd\2\2\u07ba\u07bb\7\u0086\2\2\u07bb\u07bd")
        buf.write("\7\u0113\2\2\u07bc\u07b9\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd")
        buf.write("\u07bf\3\2\2\2\u07be\u07ab\3\2\2\2\u07be\u07b1\3\2\2\2")
        buf.write("\u07be\u07bf\3\2\2\2\u07bf\u07c1\3\2\2\2\u07c0\u07c2\7")
        buf.write("\u0124\2\2\u07c1\u07c0\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2")
        buf.write("\u07c6\3\2\2\2\u07c3\u07c5\5\u00b0Y\2\u07c4\u07c3\3\2")
        buf.write("\2\2\u07c5\u07c8\3\2\2\2\u07c6\u07c4\3\2\2\2\u07c6\u07c7")
        buf.write("\3\2\2\2\u07c7\u00ad\3\2\2\2\u07c8\u07c6\3\2\2\2\u07c9")
        buf.write("\u07ca\5\u01a2\u00d2\2\u07ca\u07cb\t\27\2\2\u07cb\u07cf")
        buf.write("\5\u00c8e\2\u07cc\u07d0\7\u0242\2\2\u07cd\u07ce\7\u00dd")
        buf.write("\2\2\u07ce\u07d0\7\u0242\2\2\u07cf\u07cc\3\2\2\2\u07cf")
        buf.write("\u07cd\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u00af\3\2\2\2")
        buf.write("\u07d1\u07d2\7=\2\2\u07d2\u07d4\5\u01a2\u00d2\2\u07d3")
        buf.write("\u07d1\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07fa\3\2\2\2")
        buf.write("\u07d5\u07d6\7\u0101\2\2\u07d6\u07d9\7\u00ad\2\2\u07d7")
        buf.write("\u07d9\7\u0169\2\2\u07d8\u07d5\3\2\2\2\u07d8\u07d7\3\2")
        buf.write("\2\2\u07d9\u07db\3\2\2\2\u07da\u07dc\5\u0182\u00c2\2\u07db")
        buf.write("\u07da\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07de\3\2\2\2")
        buf.write("\u07dd\u07df\5\u00b8]\2\u07de\u07dd\3\2\2\2\u07de\u07df")
        buf.write("\3\2\2\2\u07df\u07fb\3\2\2\2\u07e0\u07e4\7.\2\2\u07e1")
        buf.write("\u07e2\7\u00dd\2\2\u07e2\u07e3\7\u0086\2\2\u07e3\u07e5")
        buf.write("\7\u0113\2\2\u07e4\u07e1\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5")
        buf.write("\u07e6\3\2\2\2\u07e6\u07e7\7\u0336\2\2\u07e7\u07e8\5\u00de")
        buf.write("p\2\u07e8\u07e9\7\u0337\2\2\u07e9\u07fb\3\2\2\2\u07ea")
        buf.write("\u07eb\7\u0089\2\2\u07eb\u07ed\7\u00ad\2\2\u07ec\u07ea")
        buf.write("\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee")
        buf.write("\u07ef\7\u010f\2\2\u07ef\u07f0\5\u016e\u00b8\2\u07f0\u07f1")
        buf.write("\7\u0336\2\2\u07f1\u07f2\5\u017c\u00bf\2\u07f2\u07f4\7")
        buf.write("\u0337\2\2\u07f3\u07f5\5\u00b4[\2\u07f4\u07f3\3\2\2\2")
        buf.write("\u07f4\u07f5\3\2\2\2\u07f5\u07f7\3\2\2\2\u07f6\u07f8\5")
        buf.write("\u00b6\\\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8")
        buf.write("\u07fb\3\2\2\2\u07f9\u07fb\5\u0184\u00c3\2\u07fa\u07d8")
        buf.write("\3\2\2\2\u07fa\u07e0\3\2\2\2\u07fa\u07ec\3\2\2\2\u07fa")
        buf.write("\u07f9\3\2\2\2\u07fb\u00b1\3\2\2\2\u07fc\u07fd\7=\2\2")
        buf.write("\u07fd\u07ff\5\u01a2\u00d2\2\u07fe\u07fc\3\2\2\2\u07fe")
        buf.write("\u07ff\3\2\2\2\u07ff\u0840\3\2\2\2\u0800\u0801\7\u0101")
        buf.write("\2\2\u0801\u0804\7\u00ad\2\2\u0802\u0804\7\u0169\2\2\u0803")
        buf.write("\u0800\3\2\2\2\u0803\u0802\3\2\2\2\u0804\u0806\3\2\2\2")
        buf.write("\u0805\u0807\5\u0182\u00c2\2\u0806\u0805\3\2\2\2\u0806")
        buf.write("\u0807\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u0809\7\u0336")
        buf.write("\2\2\u0809\u080a\5\u017a\u00be\2\u080a\u080c\7\u0337\2")
        buf.write("\2\u080b\u080d\5\u00b8]\2\u080c\u080b\3\2\2\2\u080c\u080d")
        buf.write("\3\2\2\2\u080d\u0810\3\2\2\2\u080e\u080f\7\u00e6\2\2\u080f")
        buf.write("\u0811\5\u01a2\u00d2\2\u0810\u080e\3\2\2\2\u0810\u0811")
        buf.write("\3\2\2\2\u0811\u0841\3\2\2\2\u0812\u0816\7.\2\2\u0813")
        buf.write("\u0814\7\u00dd\2\2\u0814\u0815\7\u0086\2\2\u0815\u0817")
        buf.write("\7\u0113\2\2\u0816\u0813\3\2\2\2\u0816\u0817\3\2\2\2\u0817")
        buf.write("\u0818\3\2\2\2\u0818\u0819\7\u0336\2\2\u0819\u081a\5\u00de")
        buf.write("p\2\u081a\u081b\7\u0337\2\2\u081b\u0841\3\2\2\2\u081c")
        buf.write("\u081e\7Z\2\2\u081d\u081f\7\u0336\2\2\u081e\u081d\3\2")
        buf.write("\2\2\u081e\u081f\3\2\2\2\u081f\u0824\3\2\2\2\u0820\u0825")
        buf.write("\7\u0320\2\2\u0821\u0825\7\u033e\2\2\u0822\u0825\5\u0130")
        buf.write("\u0099\2\u0823\u0825\7\u031c\2\2\u0824\u0820\3\2\2\2\u0824")
        buf.write("\u0821\3\2\2\2\u0824\u0822\3\2\2\2\u0824\u0823\3\2\2\2")
        buf.write("\u0825\u0826\3\2\2\2\u0826\u0824\3\2\2\2\u0826\u0827\3")
        buf.write("\2\2\2\u0827\u0829\3\2\2\2\u0828\u082a\7\u0337\2\2\u0829")
        buf.write("\u0828\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u082b\3\2\2\2")
        buf.write("\u082b\u082c\7\u0086\2\2\u082c\u0841\5\u01a2\u00d2\2\u082d")
        buf.write("\u082e\7\u0089\2\2\u082e\u082f\7\u00ad\2\2\u082f\u0830")
        buf.write("\7\u0336\2\2\u0830\u0831\5\u017c\u00bf\2\u0831\u0832\7")
        buf.write("\u0337\2\2\u0832\u0833\7\u010f\2\2\u0833\u0838\5\u016e")
        buf.write("\u00b8\2\u0834\u0835\7\u0336\2\2\u0835\u0836\5\u017c\u00bf")
        buf.write("\2\u0836\u0837\7\u0337\2\2\u0837\u0839\3\2\2\2\u0838\u0834")
        buf.write("\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083b\3\2\2\2\u083a")
        buf.write("\u083c\5\u00b4[\2\u083b\u083a\3\2\2\2\u083b\u083c\3\2")
        buf.write("\2\2\u083c\u083e\3\2\2\2\u083d\u083f\5\u00b6\\\2\u083e")
        buf.write("\u083d\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0841\3\2\2\2")
        buf.write("\u0840\u0803\3\2\2\2\u0840\u0812\3\2\2\2\u0840\u081c\3")
        buf.write("\2\2\2\u0840\u082d\3\2\2\2\u0841\u00b3\3\2\2\2\u0842\u0843")
        buf.write("\7\u00e6\2\2\u0843\u084b\7]\2\2\u0844\u0845\7\u0265\2")
        buf.write("\2\u0845\u084c\7\u0184\2\2\u0846\u084c\7)\2\2\u0847\u0848")
        buf.write("\7\u013e\2\2\u0848\u084c\7\u00e0\2\2\u0849\u084a\7\u013e")
        buf.write("\2\2\u084a\u084c\7Z\2\2\u084b\u0844\3\2\2\2\u084b\u0846")
        buf.write("\3\2\2\2\u084b\u0847\3\2\2\2\u084b\u0849\3\2\2\2\u084c")
        buf.write("\u00b5\3\2\2\2\u084d\u084e\7\u00e6\2\2\u084e\u0856\7\u016d")
        buf.write("\2\2\u084f\u0850\7\u0265\2\2\u0850\u0857\7\u0184\2\2\u0851")
        buf.write("\u0857\7)\2\2\u0852\u0853\7\u013e\2\2\u0853\u0857\7\u00e0")
        buf.write("\2\2\u0854\u0855\7\u013e\2\2\u0855\u0857\7Z\2\2\u0856")
        buf.write("\u084f\3\2\2\2\u0856\u0851\3\2\2\2\u0856\u0852\3\2\2\2")
        buf.write("\u0856\u0854\3\2\2\2\u0857\u00b7\3\2\2\2\u0858\u0859\7")
        buf.write("\u017d\2\2\u0859\u085a\7\u0336\2\2\u085a\u085f\5\u00ba")
        buf.write("^\2\u085b\u085c\7\u0338\2\2\u085c\u085e\5\u00ba^\2\u085d")
        buf.write("\u085b\3\2\2\2\u085e\u0861\3\2\2\2\u085f\u085d\3\2\2\2")
        buf.write("\u085f\u0860\3\2\2\2\u0860\u0862\3\2\2\2\u0861\u085f\3")
        buf.write("\2\2\2\u0862\u0863\7\u0337\2\2\u0863\u00b9\3\2\2\2\u0864")
        buf.write("\u0865\5\u01a4\u00d3\2\u0865\u0869\7\u0324\2\2\u0866\u086a")
        buf.write("\5\u01a4\u00d3\2\u0867\u086a\5\u0180\u00c1\2\u0868\u086a")
        buf.write("\7\u031c\2\2\u0869\u0866\3\2\2\2\u0869\u0867\3\2\2\2\u0869")
        buf.write("\u0868\3\2\2\2\u086a\u00bb\3\2\2\2\u086b\u086c\7Y\2\2")
        buf.write("\u086c\u088c\5\u017e\u00c0\2\u086d\u0877\7P\2\2\u086e")
        buf.write("\u0875\5\u00be`\2\u086f\u0870\7\u0086\2\2\u0870\u0873")
        buf.write("\7\u016d\2\2\u0871\u0872\7\u00e2\2\2\u0872\u0874\5\u017c")
        buf.write("\u00bf\2\u0873\u0871\3\2\2\2\u0873\u0874\3\2\2\2\u0874")
        buf.write("\u0876\3\2\2\2\u0875\u086f\3\2\2\2\u0875\u0876\3\2\2\2")
        buf.write("\u0876\u0878\3\2\2\2\u0877\u086e\3\2\2\2\u0877\u0878\3")
        buf.write("\2\2\2\u0878\u088d\3\2\2\2\u0879\u087b\t\30\2\2\u087a")
        buf.write("\u0879\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087d\3\2\2\2")
        buf.write("\u087c\u087e\7\u02c1\2\2\u087d\u087c\3\2\2\2\u087d\u087e")
        buf.write("\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u0880\7P\2\2\u0880")
        buf.write("\u0881\7\u0086\2\2\u0881\u088a\5Z.\2\u0882\u0888\7\u0086")
        buf.write("\2\2\u0883\u0884\7\u010b\2\2\u0884\u0889\7\u0278\2\2\u0885")
        buf.write("\u0889\7\u016d\2\2\u0886\u0887\7\u00e2\2\2\u0887\u0889")
        buf.write("\5\u017c\u00bf\2\u0888\u0883\3\2\2\2\u0888\u0885\3\2\2")
        buf.write("\2\u0888\u0886\3\2\2\2\u0889\u088b\3\2\2\2\u088a\u0882")
        buf.write("\3\2\2\2\u088a\u088b\3\2\2\2\u088b\u088d\3\2\2\2\u088c")
        buf.write("\u086d\3\2\2\2\u088c\u087a\3\2\2\2\u088d\u088f\3\2\2\2")
        buf.write("\u088e\u0890\7\u0339\2\2\u088f\u088e\3\2\2\2\u088f\u0890")
        buf.write("\3\2\2\2\u0890\u00bd\3\2\2\2\u0891\u0893\5\u00c0a\2\u0892")
        buf.write("\u0891\3\2\2\2\u0893\u0896\3\2\2\2\u0894\u0892\3\2\2\2")
        buf.write("\u0894\u0895\3\2\2\2\u0895\u0897\3\2\2\2\u0896\u0894\3")
        buf.write("\2\2\2\u0897\u0898\7\u0086\2\2\u0898\u0899\5Z.\2\u0899")
        buf.write("\u00bf\3\2\2\2\u089a\u08a0\t\31\2\2\u089b\u08a0\t\32\2")
        buf.write("\2\u089c\u08a0\t\33\2\2\u089d\u08a0\t\34\2\2\u089e\u08a0")
        buf.write("\7\u02fd\2\2\u089f\u089a\3\2\2\2\u089f\u089b\3\2\2\2\u089f")
        buf.write("\u089c\3\2\2\2\u089f\u089d\3\2\2\2\u089f\u089e\3\2\2\2")
        buf.write("\u08a0\u00c1\3\2\2\2\u08a1\u08ab\7\u0081\2\2\u08a2\u08a9")
        buf.write("\7\u0264\2\2\u08a3\u08a9\7\u028a\2\2\u08a4\u08a9\7\u0203")
        buf.write("\2\2\u08a5\u08a9\7\u0231\2\2\u08a6\u08a7\t\35\2\2\u08a7")
        buf.write("\u08a9\5\u00c8e\2\u08a8\u08a2\3\2\2\2\u08a8\u08a3\3\2")
        buf.write("\2\2\u08a8\u08a4\3\2\2\2\u08a8\u08a5\3\2\2\2\u08a8\u08a6")
        buf.write("\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa")
        buf.write("\u08ac\7\u008c\2\2\u08ab\u08a8\3\2\2\2\u08ab\u08ac\3\2")
        buf.write("\2\2\u08ac\u08ae\3\2\2\2\u08ad\u08af\7\u0210\2\2\u08ae")
        buf.write("\u08ad\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b0\3\2\2\2")
        buf.write("\u08b0\u08ba\5\u017e\u00c0\2\u08b1\u08b2\7\u00a6\2\2\u08b2")
        buf.write("\u08b7\7\u031b\2\2\u08b3\u08b4\7\u0338\2\2\u08b4\u08b6")
        buf.write("\7\u031b\2\2\u08b5\u08b3\3\2\2\2\u08b6\u08b9\3\2\2\2\u08b7")
        buf.write("\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08bb\3\2\2\2")
        buf.write("\u08b9\u08b7\3\2\2\2\u08ba\u08b1\3\2\2\2\u08ba\u08bb\3")
        buf.write("\2\2\2\u08bb\u08bd\3\2\2\2\u08bc\u08be\7\u0339\2\2\u08bd")
        buf.write("\u08bc\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u00c3\3\2\2\2")
        buf.write("\u08bf\u08c0\7\u013e\2\2\u08c0\u08c4\5\u01a2\u00d2\2\u08c1")
        buf.write("\u08c5\5\u01a2\u00d2\2\u08c2\u08c5\5\u00c6d\2\u08c3\u08c5")
        buf.write("\5\u0180\u00c1\2\u08c4\u08c1\3\2\2\2\u08c4\u08c2\3\2\2")
        buf.write("\2\u08c4\u08c3\3\2\2\2\u08c5\u08c7\3\2\2\2\u08c6\u08c8")
        buf.write("\7\u0339\2\2\u08c7\u08c6\3\2\2\2\u08c7\u08c8\3\2\2\2\u08c8")
        buf.write("\u08f1\3\2\2\2\u08c9\u08ca\7\u013e\2\2\u08ca\u08cb\7\u0162")
        buf.write("\2\2\u08cb\u08cc\7\u0228\2\2\u08cc\u08d6\7\u0234\2\2\u08cd")
        buf.write("\u08ce\7\u010b\2\2\u08ce\u08d7\7\u02ff\2\2\u08cf\u08d0")
        buf.write("\7\u010b\2\2\u08d0\u08d7\7\u01bb\2\2\u08d1\u08d2\7\u02ac")
        buf.write("\2\2\u08d2\u08d7\7\u010b\2\2\u08d3\u08d7\7\u02d9\2\2\u08d4")
        buf.write("\u08d7\7\u02cf\2\2\u08d5\u08d7\7\u031c\2\2\u08d6\u08cd")
        buf.write("\3\2\2\2\u08d6\u08cf\3\2\2\2\u08d6\u08d1\3\2\2\2\u08d6")
        buf.write("\u08d3\3\2\2\2\u08d6\u08d4\3\2\2\2\u08d6\u08d5\3\2\2\2")
        buf.write("\u08d7\u08d9\3\2\2\2\u08d8\u08da\7\u0339\2\2\u08d9\u08d8")
        buf.write("\3\2\2\2\u08d9\u08da\3\2\2\2\u08da\u08f1\3\2\2\2\u08db")
        buf.write("\u08dc\7\u013e\2\2\u08dc\u08dd\7\u0099\2\2\u08dd\u08de")
        buf.write("\5\u016e\u00b8\2\u08de\u08e0\5\u0180\u00c1\2\u08df\u08e1")
        buf.write("\7\u0339\2\2\u08e0\u08df\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1")
        buf.write("\u08f1\3\2\2\2\u08e2\u08e3\7\u013e\2\2\u08e3\u08e4\7\u0193")
        buf.write("\2\2\u08e4\u08f1\5\u0180\u00c1\2\u08e5\u08e6\7\u013e\2")
        buf.write("\2\u08e6\u08e7\7\u0297\2\2\u08e7\u08f1\5\u0180\u00c1\2")
        buf.write("\u08e8\u08e9\7\u013e\2\2\u08e9\u08ea\7\u0194\2\2\u08ea")
        buf.write("\u08f1\5\u0180\u00c1\2\u08eb\u08ec\7\u013e\2\2\u08ec\u08ed")
        buf.write("\7\u0195\2\2\u08ed\u08f1\5\u0180\u00c1\2\u08ee\u08ef\7")
        buf.write("\u013e\2\2\u08ef\u08f1\5\u013a\u009e\2\u08f0\u08bf\3\2")
        buf.write("\2\2\u08f0\u08c9\3\2\2\2\u08f0\u08db\3\2\2\2\u08f0\u08e2")
        buf.write("\3\2\2\2\u08f0\u08e5\3\2\2\2\u08f0\u08e8\3\2\2\2\u08f0")
        buf.write("\u08eb\3\2\2\2\u08f0\u08ee\3\2\2\2\u08f1\u00c5\3\2\2\2")
        buf.write("\u08f2\u08f5\5\u019e\u00d0\2\u08f3\u08f5\7\u031b\2\2\u08f4")
        buf.write("\u08f2\3\2\2\2\u08f4\u08f3\3\2\2\2\u08f5\u00c7\3\2\2\2")
        buf.write("\u08f6\u08f7\be\1\2\u08f7\u08ff\5\u00caf\2\u08f8\u08ff")
        buf.write("\5\u0130\u0099\2\u08f9\u08ff\5\u00ccg\2\u08fa\u08ff\5")
        buf.write("\u0178\u00bd\2\u08fb\u08ff\5\u00d0i\2\u08fc\u08ff\5\u00ce")
        buf.write("h\2\u08fd\u08ff\5\u0160\u00b1\2\u08fe\u08f6\3\2\2\2\u08fe")
        buf.write("\u08f8\3\2\2\2\u08fe\u08f9\3\2\2\2\u08fe\u08fa\3\2\2\2")
        buf.write("\u08fe\u08fb\3\2\2\2\u08fe\u08fc\3\2\2\2\u08fe\u08fd\3")
        buf.write("\2\2\2\u08ff\u0913\3\2\2\2\u0900\u0901\f\7\2\2\u0901\u0902")
        buf.write("\t\36\2\2\u0902\u0912\5\u00c8e\b\u0903\u0904\f\6\2\2\u0904")
        buf.write("\u0905\t\37\2\2\u0905\u0912\5\u00c8e\7\u0906\u0907\f\5")
        buf.write("\2\2\u0907\u0908\5\u01a6\u00d4\2\u0908\u0909\5\u00c8e")
        buf.write("\6\u0909\u0912\3\2\2\2\u090a\u090b\f\4\2\2\u090b\u090c")
        buf.write("\5\u01a8\u00d5\2\u090c\u090d\5\u00c8e\5\u090d\u0912\3")
        buf.write("\2\2\2\u090e\u090f\f\f\2\2\u090f\u0910\7\67\2\2\u0910")
        buf.write("\u0912\5\u01a2\u00d2\2\u0911\u0900\3\2\2\2\u0911\u0903")
        buf.write("\3\2\2\2\u0911\u0906\3\2\2\2\u0911\u090a\3\2\2\2\u0911")
        buf.write("\u090e\3\2\2\2\u0912\u0915\3\2\2\2\u0913\u0911\3\2\2\2")
        buf.write("\u0913\u0914\3\2\2\2\u0914\u00c9\3\2\2\2\u0915\u0913\3")
        buf.write("\2\2\2\u0916\u091b\7Z\2\2\u0917\u091b\7\u00e0\2\2\u0918")
        buf.write("\u091b\7\u031b\2\2\u0919\u091b\5\u019e\u00d0\2\u091a\u0916")
        buf.write("\3\2\2\2\u091a\u0917\3\2\2\2\u091a\u0918\3\2\2\2\u091a")
        buf.write("\u0919\3\2\2\2\u091b\u00cb\3\2\2\2\u091c\u091d\7*\2\2")
        buf.write("\u091d\u091f\5\u00c8e\2\u091e\u0920\5\u013e\u00a0\2\u091f")
        buf.write("\u091e\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u091f\3\2\2\2")
        buf.write("\u0921\u0922\3\2\2\2\u0922\u0925\3\2\2\2\u0923\u0924\7")
        buf.write("k\2\2\u0924\u0926\5\u00c8e\2\u0925\u0923\3\2\2\2\u0925")
        buf.write("\u0926\3\2\2\2\u0926\u0927\3\2\2\2\u0927\u0928\7m\2\2")
        buf.write("\u0928\u0936\3\2\2\2\u0929\u092b\7*\2\2\u092a\u092c\5")
        buf.write("\u0140\u00a1\2\u092b\u092a\3\2\2\2\u092c\u092d\3\2\2\2")
        buf.write("\u092d\u092b\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u0931\3")
        buf.write("\2\2\2\u092f\u0930\7k\2\2\u0930\u0932\5\u00c8e\2\u0931")
        buf.write("\u092f\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0933\3\2\2\2")
        buf.write("\u0933\u0934\7m\2\2\u0934\u0936\3\2\2\2\u0935\u091c\3")
        buf.write("\2\2\2\u0935\u0929\3\2\2\2\u0936\u00cd\3\2\2\2\u0937\u0938")
        buf.write("\7\u0340\2\2\u0938\u093c\5\u00c8e\2\u0939\u093a\t \2\2")
        buf.write("\u093a\u093c\5\u00c8e\2\u093b\u0937\3\2\2\2\u093b\u0939")
        buf.write("\3\2\2\2\u093c\u00cf\3\2\2\2\u093d\u093e\7\u0336\2\2\u093e")
        buf.write("\u093f\5\u00c8e\2\u093f\u0940\7\u0337\2\2\u0940\u0946")
        buf.write("\3\2\2\2\u0941\u0942\7\u0336\2\2\u0942\u0943\5\u00d4k")
        buf.write("\2\u0943\u0944\7\u0337\2\2\u0944\u0946\3\2\2\2\u0945\u093d")
        buf.write("\3\2\2\2\u0945\u0941\3\2\2\2\u0946\u00d1\3\2\2\2\u0947")
        buf.write("\u0950\7\u00e0\2\2\u0948\u0950\5\u019e\u00d0\2\u0949\u0950")
        buf.write("\5\u0130\u0099\2\u094a\u0950\7\u031b\2\2\u094b\u094c\7")
        buf.write("\u0336\2\2\u094c\u094d\5\u00d2j\2\u094d\u094e\7\u0337")
        buf.write("\2\2\u094e\u0950\3\2\2\2\u094f\u0947\3\2\2\2\u094f\u0948")
        buf.write("\3\2\2\2\u094f\u0949\3\2\2\2\u094f\u094a\3\2\2\2\u094f")
        buf.write("\u094b\3\2\2\2\u0950\u00d3\3\2\2\2\u0951\u0952\5Z.\2\u0952")
        buf.write("\u00d5\3\2\2\2\u0953\u0956\7\u017d\2\2\u0954\u0955\7\u0311")
        buf.write("\2\2\u0955\u0957\7\u0338\2\2\u0956\u0954\3\2\2\2\u0956")
        buf.write("\u0957\3\2\2\2\u0957\u0958\3\2\2\2\u0958\u095d\5\u00d8")
        buf.write("m\2\u0959\u095a\7\u0338\2\2\u095a\u095c\5\u00d8m\2\u095b")
        buf.write("\u0959\3\2\2\2\u095c\u095f\3\2\2\2\u095d\u095b\3\2\2\2")
        buf.write("\u095d\u095e\3\2\2\2\u095e\u096e\3\2\2\2\u095f\u095d\3")
        buf.write("\2\2\2\u0960\u0961\7\u017d\2\2\u0961\u0966\7 \2\2\u0962")
        buf.write("\u0963\7\u0336\2\2\u0963\u0964\5\u0126\u0094\2\u0964\u0965")
        buf.write("\7\u0337\2\2\u0965\u0967\3\2\2\2\u0966\u0962\3\2\2\2\u0966")
        buf.write("\u0967\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u0969\7\20\2")
        buf.write("\2\u0969\u096a\7\u0336\2\2\u096a\u096b\5Z.\2\u096b\u096c")
        buf.write("\7\u0337\2\2\u096c\u096e\3\2\2\2\u096d\u0953\3\2\2\2\u096d")
        buf.write("\u0960\3\2\2\2\u096e\u00d7\3\2\2\2\u096f\u0974\5\u01a2")
        buf.write("\u00d2\2\u0970\u0971\7\u0336\2\2\u0971\u0972\5\u017c\u00bf")
        buf.write("\2\u0972\u0973\7\u0337\2\2\u0973\u0975\3\2\2\2\u0974\u0970")
        buf.write("\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u0976\3\2\2\2\u0976")
        buf.write("\u0977\7\20\2\2\u0977\u0978\7\u0336\2\2\u0978\u0979\5")
        buf.write("Z.\2\u0979\u097a\7\u0337\2\2\u097a\u00d9\3\2\2\2\u097b")
        buf.write("\u097e\5\u0178\u00bd\2\u097c\u097e\7\u031b\2\2\u097d\u097b")
        buf.write("\3\2\2\2\u097d\u097c\3\2\2\2\u097e\u0981\3\2\2\2\u097f")
        buf.write("\u0982\7\u0324\2\2\u0980\u0982\5\u01a8\u00d5\2\u0981\u097f")
        buf.write("\3\2\2\2\u0981\u0980\3\2\2\2\u0982\u0983\3\2\2\2\u0983")
        buf.write("\u098c\5\u00c8e\2\u0984\u0985\5\u01a2\u00d2\2\u0985\u0986")
        buf.write("\7\u0331\2\2\u0986\u0987\5\u01a2\u00d2\2\u0987\u0988\7")
        buf.write("\u0336\2\2\u0988\u0989\5\u0156\u00ac\2\u0989\u098a\7\u0337")
        buf.write("\2\2\u098a\u098c\3\2\2\2\u098b\u097d\3\2\2\2\u098b\u0984")
        buf.write("\3\2\2\2\u098c\u00db\3\2\2\2\u098d\u0992\5\u00dep\2\u098e")
        buf.write("\u098f\7\u0338\2\2\u098f\u0991\5\u00dep\2\u0990\u098e")
        buf.write("\3\2\2\2\u0991\u0994\3\2\2\2\u0992\u0990\3\2\2\2\u0992")
        buf.write("\u0993\3\2\2\2\u0993\u00dd\3\2\2\2\u0994\u0992\3\2\2\2")
        buf.write("\u0995\u099a\5\u00e0q\2\u0996\u0997\7\u00ee\2\2\u0997")
        buf.write("\u0999\5\u00e0q\2\u0998\u0996\3\2\2\2\u0999\u099c\3\2")
        buf.write("\2\2\u099a\u0998\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u00df")
        buf.write("\3\2\2\2\u099c\u099a\3\2\2\2\u099d\u09a2\5\u00e2r\2\u099e")
        buf.write("\u099f\7\13\2\2\u099f\u09a1\5\u00e2r\2\u09a0\u099e\3\2")
        buf.write("\2\2\u09a1\u09a4\3\2\2\2\u09a2\u09a0\3\2\2\2\u09a2\u09a3")
        buf.write("\3\2\2\2\u09a3\u00e1\3\2\2\2\u09a4\u09a2\3\2\2\2\u09a5")
        buf.write("\u09a7\7\u00dd\2\2\u09a6\u09a5\3\2\2\2\u09a6\u09a7\3\2")
        buf.write("\2\2\u09a7\u09a8\3\2\2\2\u09a8\u09a9\5\u00e4s\2\u09a9")
        buf.write("\u00e3\3\2\2\2\u09aa\u09ab\7x\2\2\u09ab\u09ac\7\u0336")
        buf.write("\2\2\u09ac\u09ad\5\u00d4k\2\u09ad\u09ae\7\u0337\2\2\u09ae")
        buf.write("\u09e2\3\2\2\2\u09af\u09b0\5\u00c8e\2\u09b0\u09b1\5\u01a6")
        buf.write("\u00d4\2\u09b1\u09b2\5\u00c8e\2\u09b2\u09e2\3\2\2\2\u09b3")
        buf.write("\u09b4\5\u00c8e\2\u09b4\u09b5\5\u01a6\u00d4\2\u09b5\u09b6")
        buf.write("\t!\2\2\u09b6\u09b7\7\u0336\2\2\u09b7\u09b8\5\u00d4k\2")
        buf.write("\u09b8\u09b9\7\u0337\2\2\u09b9\u09e2\3\2\2\2\u09ba\u09bc")
        buf.write("\5\u00c8e\2\u09bb\u09bd\7\u00dd\2\2\u09bc\u09bb\3\2\2")
        buf.write("\2\u09bc\u09bd\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09bf")
        buf.write("\7\35\2\2\u09bf\u09c0\5\u00c8e\2\u09c0\u09c1\7\13\2\2")
        buf.write("\u09c1\u09c2\5\u00c8e\2\u09c2\u09e2\3\2\2\2\u09c3\u09c5")
        buf.write("\5\u00c8e\2\u09c4\u09c6\7\u00dd\2\2\u09c5\u09c4\3\2\2")
        buf.write("\2\u09c5\u09c6\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c8")
        buf.write("\7\u009c\2\2\u09c8\u09cb\7\u0336\2\2\u09c9\u09cc\5\u00d4")
        buf.write("k\2\u09ca\u09cc\5\u0156\u00ac\2\u09cb\u09c9\3\2\2\2\u09cb")
        buf.write("\u09ca\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09ce\7\u0337")
        buf.write("\2\2\u09ce\u09e2\3\2\2\2\u09cf\u09d1\5\u00c8e\2\u09d0")
        buf.write("\u09d2\7\u00dd\2\2\u09d1\u09d0\3\2\2\2\u09d1\u09d2\3\2")
        buf.write("\2\2\u09d2\u09d3\3\2\2\2\u09d3\u09d4\7\u00b5\2\2\u09d4")
        buf.write("\u09d7\5\u00c8e\2\u09d5\u09d6\7p\2\2\u09d6\u09d8\5\u00c8")
        buf.write("e\2\u09d7\u09d5\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09e2")
        buf.write("\3\2\2\2\u09d9\u09da\5\u00c8e\2\u09da\u09db\7\u00a9\2")
        buf.write("\2\u09db\u09dc\5\u0184\u00c3\2\u09dc\u09e2\3\2\2\2\u09dd")
        buf.write("\u09de\7\u0336\2\2\u09de\u09df\5\u00dep\2\u09df\u09e0")
        buf.write("\7\u0337\2\2\u09e0\u09e2\3\2\2\2\u09e1\u09aa\3\2\2\2\u09e1")
        buf.write("\u09af\3\2\2\2\u09e1\u09b3\3\2\2\2\u09e1\u09ba\3\2\2\2")
        buf.write("\u09e1\u09c3\3\2\2\2\u09e1\u09cf\3\2\2\2\u09e1\u09d9\3")
        buf.write("\2\2\2\u09e1\u09dd\3\2\2\2\u09e2\u00e5\3\2\2\2\u09e3\u09e9")
        buf.write("\5\u00eav\2\u09e4\u09e5\7\u0336\2\2\u09e5\u09e6\5\u00e6")
        buf.write("t\2\u09e6\u09e7\7\u0337\2\2\u09e7\u09e9\3\2\2\2\u09e8")
        buf.write("\u09e3\3\2\2\2\u09e8\u09e4\3\2\2\2\u09e9\u09ed\3\2\2\2")
        buf.write("\u09ea\u09ec\5\u00e8u\2\u09eb\u09ea\3\2\2\2\u09ec\u09ef")
        buf.write("\3\2\2\2\u09ed\u09eb\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee")
        buf.write("\u00e7\3\2\2\2\u09ef\u09ed\3\2\2\2\u09f0\u09f2\7\u0168")
        buf.write("\2\2\u09f1\u09f3\7\6\2\2\u09f2\u09f1\3\2\2\2\u09f2\u09f3")
        buf.write("\3\2\2\2\u09f3\u09f7\3\2\2\2\u09f4\u09f7\7u\2\2\u09f5")
        buf.write("\u09f7\7\u00a5\2\2\u09f6\u09f0\3\2\2\2\u09f6\u09f4\3\2")
        buf.write("\2\2\u09f6\u09f5\3\2\2\2\u09f7\u09fd\3\2\2\2\u09f8\u09fe")
        buf.write("\5\u00eav\2\u09f9\u09fa\7\u0336\2\2\u09fa\u09fb\5\u00e6")
        buf.write("t\2\u09fb\u09fc\7\u0337\2\2\u09fc\u09fe\3\2\2\2\u09fd")
        buf.write("\u09f8\3\2\2\2\u09fd\u09f9\3\2\2\2\u09fe\u00e9\3\2\2\2")
        buf.write("\u09ff\u0a01\7\u0133\2\2\u0a00\u0a02\t\"\2\2\u0a01\u0a00")
        buf.write("\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u0a04\3\2\2\2\u0a03")
        buf.write("\u0a05\5\u00ecw\2\u0a04\u0a03\3\2\2\2\u0a04\u0a05\3\2")
        buf.write("\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a09\5\u0102\u0082\2\u0a07")
        buf.write("\u0a08\7\u00a6\2\2\u0a08\u0a0a\5\u016e\u00b8\2\u0a09\u0a07")
        buf.write("\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0d\3\2\2\2\u0a0b")
        buf.write("\u0a0c\7\u008c\2\2\u0a0c\u0a0e\5\u0110\u0089\2\u0a0d\u0a0b")
        buf.write("\3\2\2\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0a11\3\2\2\2\u0a0f")
        buf.write("\u0a10\7\u017a\2\2\u0a10\u0a12\5\u00dep\2\u0a11\u0a0f")
        buf.write("\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u0a20\3\2\2\2\u0a13")
        buf.write("\u0a14\7\u0093\2\2\u0a14\u0a16\7&\2\2\u0a15\u0a17\7\6")
        buf.write("\2\2\u0a16\u0a15\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0a18")
        buf.write("\3\2\2\2\u0a18\u0a1d\5\u00fa~\2\u0a19\u0a1a\7\u0338\2")
        buf.write("\2\u0a1a\u0a1c\5\u00fa~\2\u0a1b\u0a19\3\2\2\2\u0a1c\u0a1f")
        buf.write("\3\2\2\2\u0a1d\u0a1b\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e")
        buf.write("\u0a21\3\2\2\2\u0a1f\u0a1d\3\2\2\2\u0a20\u0a13\3\2\2\2")
        buf.write("\u0a20\u0a21\3\2\2\2\u0a21\u0a24\3\2\2\2\u0a22\u0a23\7")
        buf.write("\u0094\2\2\u0a23\u0a25\5\u00dep\2\u0a24\u0a22\3\2\2\2")
        buf.write("\u0a24\u0a25\3\2\2\2\u0a25\u00eb\3\2\2\2\u0a26\u0a29\7")
        buf.write("\u015f\2\2\u0a27\u0a2a\5\u00eex\2\u0a28\u0a2a\5\u00f0")
        buf.write("y\2\u0a29\u0a27\3\2\2\2\u0a29\u0a28\3\2\2\2\u0a2a\u0a2d")
        buf.write("\3\2\2\2\u0a2b\u0a2c\7\u017d\2\2\u0a2c\u0a2e\7\u02ef\2")
        buf.write("\2\u0a2d\u0a2b\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u00ed")
        buf.write("\3\2\2\2\u0a2f\u0a30\t#\2\2\u0a30\u0a37\7\u00f6\2\2\u0a31")
        buf.write("\u0a32\7\u0336\2\2\u0a32\u0a33\5\u00c8e\2\u0a33\u0a34")
        buf.write("\7\u0337\2\2\u0a34\u0a35\7\u00f6\2\2\u0a35\u0a37\3\2\2")
        buf.write("\2\u0a36\u0a2f\3\2\2\2\u0a36\u0a31\3\2\2\2\u0a37\u00ef")
        buf.write("\3\2\2\2\u0a38\u0a3e\7\u031c\2\2\u0a39\u0a3a\7\u0336\2")
        buf.write("\2\u0a3a\u0a3b\5\u00c8e\2\u0a3b\u0a3c\7\u0337\2\2\u0a3c")
        buf.write("\u0a3e\3\2\2\2\u0a3d\u0a38\3\2\2\2\u0a3d\u0a39\3\2\2\2")
        buf.write("\u0a3e\u00f1\3\2\2\2\u0a3f\u0a40\7\u00ef\2\2\u0a40\u0a41")
        buf.write("\7&\2\2\u0a41\u0a46\5\u00f8}\2\u0a42\u0a43\7\u0338\2\2")
        buf.write("\u0a43\u0a45\5\u00f8}\2\u0a44\u0a42\3\2\2\2\u0a45\u0a48")
        buf.write("\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47")
        buf.write("\u0a54\3\2\2\2\u0a48\u0a46\3\2\2\2\u0a49\u0a4a\7\u0275")
        buf.write("\2\2\u0a4a\u0a4b\5\u00c8e\2\u0a4b\u0a52\t$\2\2\u0a4c\u0a4d")
        buf.write("\7\u0081\2\2\u0a4d\u0a4e\t%\2\2\u0a4e\u0a4f\5\u00c8e\2")
        buf.write("\u0a4f\u0a50\t$\2\2\u0a50\u0a51\7\u0278\2\2\u0a51\u0a53")
        buf.write("\3\2\2\2\u0a52\u0a4c\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53")
        buf.write("\u0a55\3\2\2\2\u0a54\u0a49\3\2\2\2\u0a54\u0a55\3\2\2\2")
        buf.write("\u0a55\u00f3\3\2\2\2\u0a56\u0a57\7\u0086\2\2\u0a57\u0aaf")
        buf.write("\7\"\2\2\u0a58\u0a59\7\u0086\2\2\u0a59\u0a61\7\u030f\2")
        buf.write("\2\u0a5a\u0a5e\7\u010a\2\2\u0a5b\u0a5c\7\u0336\2\2\u0a5c")
        buf.write("\u0a5d\7\u0320\2\2\u0a5d\u0a5f\7\u0337\2\2\u0a5e\u0a5b")
        buf.write("\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a62\3\2\2\2\u0a60")
        buf.write("\u0a62\7\u019c\2\2\u0a61\u0a5a\3\2\2\2\u0a61\u0a60\3\2")
        buf.write("\2\2\u0a62\u0a66\3\2\2\2\u0a63\u0a65\5\u00f6|\2\u0a64")
        buf.write("\u0a63\3\2\2\2\u0a65\u0a68\3\2\2\2\u0a66\u0a64\3\2\2\2")
        buf.write("\u0a66\u0a67\3\2\2\2\u0a67\u0a73\3\2\2\2\u0a68\u0a66\3")
        buf.write("\2\2\2\u0a69\u0a71\7\u0338\2\2\u0a6a\u0a72\7\u0310\2\2")
        buf.write("\u0a6b\u0a6f\7\u0312\2\2\u0a6c\u0a6d\7\u0336\2\2\u0a6d")
        buf.write("\u0a6e\7\u0320\2\2\u0a6e\u0a70\7\u0337\2\2\u0a6f\u0a6c")
        buf.write("\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a72\3\2\2\2\u0a71")
        buf.write("\u0a6a\3\2\2\2\u0a71\u0a6b\3\2\2\2\u0a72\u0a74\3\2\2\2")
        buf.write("\u0a73\u0a69\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a78\3")
        buf.write("\2\2\2\u0a75\u0a76\7\u0338\2\2\u0a76\u0a77\7\u01e9\2\2")
        buf.write("\u0a77\u0a79\t&\2\2\u0a78\u0a75\3\2\2\2\u0a78\u0a79\3")
        buf.write("\2\2\2\u0a79\u0aaf\3\2\2\2\u0a7a\u0a7b\7\u0086\2\2\u0a7b")
        buf.write("\u0a7c\7\u030f\2\2\u0a7c\u0a80\7\u01f7\2\2\u0a7d\u0a7f")
        buf.write("\5\u00f6|\2\u0a7e\u0a7d\3\2\2\2\u0a7f\u0a82\3\2\2\2\u0a80")
        buf.write("\u0a7e\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81\u0a85\3\2\2\2")
        buf.write("\u0a82\u0a80\3\2\2\2\u0a83\u0a84\7\u0338\2\2\u0a84\u0a86")
        buf.write("\7\u0310\2\2\u0a85\u0a83\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86")
        buf.write("\u0aaf\3\2\2\2\u0a87\u0a88\7\u0086\2\2\u0a88\u0a89\7\u030f")
        buf.write("\2\2\u0a89\u0a8d\7\u0284\2\2\u0a8a\u0a8b\7\u0336\2\2\u0a8b")
        buf.write("\u0a8c\7\u0320\2\2\u0a8c\u0a8e\7\u0337\2\2\u0a8d\u0a8a")
        buf.write("\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a92\3\2\2\2\u0a8f")
        buf.write("\u0a91\5\u00f6|\2\u0a90\u0a8f\3\2\2\2\u0a91\u0a94\3\2")
        buf.write("\2\2\u0a92\u0a90\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a98")
        buf.write("\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a95\u0a96\7\u0338\2\2\u0a96")
        buf.write("\u0a97\7\u01e9\2\2\u0a97\u0a99\t&\2\2\u0a98\u0a95\3\2")
        buf.write("\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0aaf\3\2\2\2\u0a9a\u0a9b")
        buf.write("\7\u0086\2\2\u0a9b\u0a9c\7\u0229\2\2\u0a9c\u0aa4\t\'\2")
        buf.write("\2\u0a9d\u0a9e\7\u0338\2\2\u0a9e\u0aa2\7\u02b8\2\2\u0a9f")
        buf.write("\u0aa0\7\u0336\2\2\u0aa0\u0aa1\7\u0320\2\2\u0aa1\u0aa3")
        buf.write("\7\u0337\2\2\u0aa2\u0a9f\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3")
        buf.write("\u0aa5\3\2\2\2\u0aa4\u0a9d\3\2\2\2\u0aa4\u0aa5\3\2\2\2")
        buf.write("\u0aa5\u0aa8\3\2\2\2\u0aa6\u0aa7\7\u0338\2\2\u0aa7\u0aa9")
        buf.write("\7\u0220\2\2\u0aa8\u0aa6\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9")
        buf.write("\u0aac\3\2\2\2\u0aaa\u0aab\7\u0338\2\2\u0aab\u0aad\7\u030c")
        buf.write("\2\2\u0aac\u0aaa\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad\u0aaf")
        buf.write("\3\2\2\2\u0aae\u0a56\3\2\2\2\u0aae\u0a58\3\2\2\2\u0aae")
        buf.write("\u0a7a\3\2\2\2\u0aae\u0a87\3\2\2\2\u0aae\u0a9a\3\2\2\2")
        buf.write("\u0aaf\u00f5\3\2\2\2\u0ab0\u0ab1\7\u0338\2\2\u0ab1\u0ab2")
        buf.write("\t(\2\2\u0ab2\u00f7\3\2\2\2\u0ab3\u0ab5\5\u00c8e\2\u0ab4")
        buf.write("\u0ab6\t)\2\2\u0ab5\u0ab4\3\2\2\2\u0ab5\u0ab6\3\2\2\2")
        buf.write("\u0ab6\u00f9\3\2\2\2\u0ab7\u0ab8\5\u00c8e\2\u0ab8\u00fb")
        buf.write("\3\2\2\2\u0ab9\u0aba\7\u00ed\2\2\u0aba\u0abb\7\u0336\2")
        buf.write("\2\u0abb\u0ac0\5\u00fe\u0080\2\u0abc\u0abd\7\u0338\2\2")
        buf.write("\u0abd\u0abf\5\u00fe\u0080\2\u0abe\u0abc\3\2\2\2\u0abf")
        buf.write("\u0ac2\3\2\2\2\u0ac0\u0abe\3\2\2\2\u0ac0\u0ac1\3\2\2\2")
        buf.write("\u0ac1\u0ac3\3\2\2\2\u0ac2\u0ac0\3\2\2\2\u0ac3\u0ac4\7")
        buf.write("\u0337\2\2\u0ac4\u00fd\3\2\2\2\u0ac5\u0ac6\7\u01fc\2\2")
        buf.write("\u0ac6\u0af3\7\u031c\2\2\u0ac7\u0ac8\t*\2\2\u0ac8\u0af3")
        buf.write("\7\u0093\2\2\u0ac9\u0aca\t+\2\2\u0aca\u0af3\7\u0168\2")
        buf.write("\2\u0acb\u0acc\t,\2\2\u0acc\u0af3\7\u00ab\2\2\u0acd\u0ace")
        buf.write("\7\u01f5\2\2\u0ace\u0af3\7\u0309\2\2\u0acf\u0ad0\7\u0206")
        buf.write("\2\2\u0ad0\u0af3\7\u00ef\2\2\u0ad1\u0af3\7\u021c\2\2\u0ad2")
        buf.write("\u0ad3\7\u022b\2\2\u0ad3\u0af3\7\u00fc\2\2\u0ad4\u0ad5")
        buf.write("\7\u022c\2\2\u0ad5\u0af3\7\u00fc\2\2\u0ad6\u0ad7\7\u024c")
        buf.write("\2\2\u0ad7\u0af3\7\u031c\2\2\u0ad8\u0ad9\7\u024d\2\2\u0ad9")
        buf.write("\u0af3\7\u031c\2\2\u0ada\u0adb\7\u027b\2\2\u0adb\u0adc")
        buf.write("\7\u0086\2\2\u0adc\u0add\7\u0336\2\2\u0add\u0ae2\5\u0100")
        buf.write("\u0081\2\u0ade\u0adf\7\u0338\2\2\u0adf\u0ae1\5\u0100\u0081")
        buf.write("\2\u0ae0\u0ade\3\2\2\2\u0ae1\u0ae4\3\2\2\2\u0ae2\u0ae0")
        buf.write("\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u0ae5\3\2\2\2\u0ae4")
        buf.write("\u0ae2\3\2\2\2\u0ae5\u0ae6\7\u0337\2\2\u0ae6\u0af3\3\2")
        buf.write("\2\2\u0ae7\u0ae8\7\u027b\2\2\u0ae8\u0ae9\7\u0086\2\2\u0ae9")
        buf.write("\u0af3\7\u0300\2\2\u0aea\u0aeb\7\u0280\2\2\u0aeb\u0af3")
        buf.write("\t-\2\2\u0aec\u0af3\7\u02a4\2\2\u0aed\u0aee\7\u02b7\2")
        buf.write("\2\u0aee\u0af3\7\u00fc\2\2\u0aef\u0af0\7\u0170\2\2\u0af0")
        buf.write("\u0af1\7\u00fc\2\2\u0af1\u0af3\7\u0320\2\2\u0af2\u0ac5")
        buf.write("\3\2\2\2\u0af2\u0ac7\3\2\2\2\u0af2\u0ac9\3\2\2\2\u0af2")
        buf.write("\u0acb\3\2\2\2\u0af2\u0acd\3\2\2\2\u0af2\u0acf\3\2\2\2")
        buf.write("\u0af2\u0ad1\3\2\2\2\u0af2\u0ad2\3\2\2\2\u0af2\u0ad4\3")
        buf.write("\2\2\2\u0af2\u0ad6\3\2\2\2\u0af2\u0ad8\3\2\2\2\u0af2\u0ada")
        buf.write("\3\2\2\2\u0af2\u0ae7\3\2\2\2\u0af2\u0aea\3\2\2\2\u0af2")
        buf.write("\u0aec\3\2\2\2\u0af2\u0aed\3\2\2\2\u0af2\u0aef\3\2\2\2")
        buf.write("\u0af3\u00ff\3\2\2\2\u0af4\u0afb\7\u031b\2\2\u0af5\u0afc")
        buf.write("\7\u0300\2\2\u0af6\u0af9\7\u0324\2\2\u0af7\u0afa\5\u019e")
        buf.write("\u00d0\2\u0af8\u0afa\7\u00e0\2\2\u0af9\u0af7\3\2\2\2\u0af9")
        buf.write("\u0af8\3\2\2\2\u0afa\u0afc\3\2\2\2\u0afb\u0af5\3\2\2\2")
        buf.write("\u0afb\u0af6\3\2\2\2\u0afc\u0101\3\2\2\2\u0afd\u0b02\5")
        buf.write("\u010e\u0088\2\u0afe\u0aff\7\u0338\2\2\u0aff\u0b01\5\u010e")
        buf.write("\u0088\2\u0b00\u0afe\3\2\2\2\u0b01\u0b04\3\2\2\2\u0b02")
        buf.write("\u0b00\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0103\3\2\2\2")
        buf.write("\u0b04\u0b02\3\2\2\2\u0b05\u0b06\7\u0336\2\2\u0b06\u0b0b")
        buf.write("\5v<\2\u0b07\u0b08\7\u0338\2\2\u0b08\u0b0a\5v<\2\u0b09")
        buf.write("\u0b07\3\2\2\2\u0b0a\u0b0d\3\2\2\2\u0b0b\u0b09\3\2\2\2")
        buf.write("\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b0e\3\2\2\2\u0b0d\u0b0b\3")
        buf.write("\2\2\2\u0b0e\u0b0f\7\u0337\2\2\u0b0f\u0105\3\2\2\2\u0b10")
        buf.write("\u0b16\7\u033b\2\2\u0b11\u0b12\5\u016e\u00b8\2\u0b12\u0b13")
        buf.write("\7\u0331\2\2\u0b13\u0b14\5\u0106\u0084\2\u0b14\u0b16\3")
        buf.write("\2\2\2\u0b15\u0b10\3\2\2\2\u0b15\u0b11\3\2\2\2\u0b16\u0107")
        buf.write("\3\2\2\2\u0b17\u0b18\5\u016e\u00b8\2\u0b18\u0b19\7\u0331")
        buf.write("\2\2\u0b19\u0b1b\3\2\2\2\u0b1a\u0b17\3\2\2\2\u0b1a\u0b1b")
        buf.write("\3\2\2\2\u0b1b\u0b21\3\2\2\2\u0b1c\u0b22\5\u01a2\u00d2")
        buf.write("\2\u0b1d\u0b1e\7\u0335\2\2\u0b1e\u0b22\7\u0097\2\2\u0b1f")
        buf.write("\u0b20\7\u0335\2\2\u0b20\u0b22\7\u02bc\2\2\u0b21\u0b1c")
        buf.write("\3\2\2\2\u0b21\u0b1d\3\2\2\2\u0b21\u0b1f\3\2\2\2\u0b22")
        buf.write("\u0b24\3\2\2\2\u0b23\u0b25\5\u0142\u00a2\2\u0b24\u0b23")
        buf.write("\3\2\2\2\u0b24\u0b25\3\2\2\2\u0b25\u0109\3\2\2\2\u0b26")
        buf.write("\u0b27\5\u01a2\u00d2\2\u0b27\u0b28\7\u0331\2\2\u0b28\u0b29")
        buf.write("\5\u01a2\u00d2\2\u0b29\u0b2b\5\u0104\u0083\2\u0b2a\u0b2c")
        buf.write("\5\u0142\u00a2\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2")
        buf.write("\2\u0b2c\u0b38\3\2\2\2\u0b2d\u0b2e\5\u01a2\u00d2\2\u0b2e")
        buf.write("\u0b2f\7\u033a\2\2\u0b2f\u0b30\7\u033a\2\2\u0b30\u0b32")
        buf.write("\5\u01a2\u00d2\2\u0b31\u0b33\5\u0104\u0083\2\u0b32\u0b31")
        buf.write("\3\2\2\2\u0b32\u0b33\3\2\2\2\u0b33\u0b35\3\2\2\2\u0b34")
        buf.write("\u0b36\5\u0142\u00a2\2\u0b35\u0b34\3\2\2\2\u0b35\u0b36")
        buf.write("\3\2\2\2\u0b36\u0b38\3\2\2\2\u0b37\u0b26\3\2\2\2\u0b37")
        buf.write("\u0b2d\3\2\2\2\u0b38\u010b\3\2\2\2\u0b39\u0b3a\5\u0152")
        buf.write("\u00aa\2\u0b3a\u0b3b\7\u0324\2\2\u0b3b\u0b3c\5\u00c8e")
        buf.write("\2\u0b3c\u0b42\3\2\2\2\u0b3d\u0b3f\5\u00c8e\2\u0b3e\u0b40")
        buf.write("\5\u0142\u00a2\2\u0b3f\u0b3e\3\2\2\2\u0b3f\u0b40\3\2\2")
        buf.write("\2\u0b40\u0b42\3\2\2\2\u0b41\u0b39\3\2\2\2\u0b41\u0b3d")
        buf.write("\3\2\2\2\u0b42\u010d\3\2\2\2\u0b43\u0b48\5\u0106\u0084")
        buf.write("\2\u0b44\u0b48\5\u0108\u0085\2\u0b45\u0b48\5\u010a\u0086")
        buf.write("\2\u0b46\u0b48\5\u010c\u0087\2\u0b47\u0b43\3\2\2\2\u0b47")
        buf.write("\u0b44\3\2\2\2\u0b47\u0b45\3\2\2\2\u0b47\u0b46\3\2\2\2")
        buf.write("\u0b48\u010f\3\2\2\2\u0b49\u0b4e\5\u0112\u008a\2\u0b4a")
        buf.write("\u0b4b\7\u0338\2\2\u0b4b\u0b4d\5\u0112\u008a\2\u0b4c\u0b4a")
        buf.write("\3\2\2\2\u0b4d\u0b50\3\2\2\2\u0b4e\u0b4c\3\2\2\2\u0b4e")
        buf.write("\u0b4f\3\2\2\2\u0b4f\u0111\3\2\2\2\u0b50\u0b4e\3\2\2\2")
        buf.write("\u0b51\u0b57\5\u0114\u008b\2\u0b52\u0b53\7\u0336\2\2\u0b53")
        buf.write("\u0b54\5\u0114\u008b\2\u0b54\u0b55\7\u0337\2\2\u0b55\u0b57")
        buf.write("\3\2\2\2\u0b56\u0b51\3\2\2\2\u0b56\u0b52\3\2\2\2\u0b57")
        buf.write("\u0113\3\2\2\2\u0b58\u0b5c\5\u0116\u008c\2\u0b59\u0b5b")
        buf.write("\5\u0120\u0091\2\u0b5a\u0b59\3\2\2\2\u0b5b\u0b5e\3\2\2")
        buf.write("\2\u0b5c\u0b5a\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0115")
        buf.write("\3\2\2\2\u0b5e\u0b5c\3\2\2\2\u0b5f\u0b61\5\u0128\u0095")
        buf.write("\2\u0b60\u0b62\5\u0144\u00a3\2\u0b61\u0b60\3\2\2\2\u0b61")
        buf.write("\u0b62\3\2\2\2\u0b62\u0b8e\3\2\2\2\u0b63\u0b65\5\u016c")
        buf.write("\u00b7\2\u0b64\u0b66\5\u0144\u00a3\2\u0b65\u0b64\3\2\2")
        buf.write("\2\u0b65\u0b66\3\2\2\2\u0b66\u0b8e\3\2\2\2\u0b67\u0b69")
        buf.write("\5\u012a\u0096\2\u0b68\u0b6a\5\u0144\u00a3\2\u0b69\u0b68")
        buf.write("\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b8e\3\2\2\2\u0b6b")
        buf.write("\u0b70\5\u012e\u0098\2\u0b6c\u0b6e\5\u0144\u00a3\2\u0b6d")
        buf.write("\u0b6f\5\u0150\u00a9\2\u0b6e\u0b6d\3\2\2\2\u0b6e\u0b6f")
        buf.write("\3\2\2\2\u0b6f\u0b71\3\2\2\2\u0b70\u0b6c\3\2\2\2\u0b70")
        buf.write("\u0b71\3\2\2\2\u0b71\u0b8e\3\2\2\2\u0b72\u0b73\5\u011e")
        buf.write("\u0090\2\u0b73\u0b74\5\u0144\u00a3\2\u0b74\u0b8e\3\2\2")
        buf.write("\2\u0b75\u0b77\5\u0130\u0099\2\u0b76\u0b78\5\u0144\u00a3")
        buf.write("\2\u0b77\u0b76\3\2\2\2\u0b77\u0b78\3\2\2\2\u0b78\u0b8e")
        buf.write("\3\2\2\2\u0b79\u0b7b\7\u031b\2\2\u0b7a\u0b7c\5\u0144\u00a3")
        buf.write("\2\u0b7b\u0b7a\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b8e")
        buf.write("\3\2\2\2\u0b7d\u0b7e\7\u031b\2\2\u0b7e\u0b7f\7\u0331\2")
        buf.write("\2\u0b7f\u0b84\5\u0130\u0099\2\u0b80\u0b82\5\u0144\u00a3")
        buf.write("\2\u0b81\u0b83\5\u0150\u00a9\2\u0b82\u0b81\3\2\2\2\u0b82")
        buf.write("\u0b83\3\2\2\2\u0b83\u0b85\3\2\2\2\u0b84\u0b80\3\2\2\2")
        buf.write("\u0b84\u0b85\3\2\2\2\u0b85\u0b8e\3\2\2\2\u0b86\u0b8e\5")
        buf.write("\u0118\u008d\2\u0b87\u0b88\7\u033a\2\2\u0b88\u0b89\7\u033a")
        buf.write("\2\2\u0b89\u0b8b\5\u0130\u0099\2\u0b8a\u0b8c\5\u0144\u00a3")
        buf.write("\2\u0b8b\u0b8a\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8e")
        buf.write("\3\2\2\2\u0b8d\u0b5f\3\2\2\2\u0b8d\u0b63\3\2\2\2\u0b8d")
        buf.write("\u0b67\3\2\2\2\u0b8d\u0b6b\3\2\2\2\u0b8d\u0b72\3\2\2\2")
        buf.write("\u0b8d\u0b75\3\2\2\2\u0b8d\u0b79\3\2\2\2\u0b8d\u0b7d\3")
        buf.write("\2\2\2\u0b8d\u0b86\3\2\2\2\u0b8d\u0b87\3\2\2\2\u0b8e\u0117")
        buf.write("\3\2\2\2\u0b8f\u0b90\7\u00ec\2\2\u0b90\u0b91\7\u0336\2")
        buf.write("\2\u0b91\u0b92\5\u00c8e\2\u0b92\u0b93\7\u0338\2\2\u0b93")
        buf.write("\u0b96\5\u00c8e\2\u0b94\u0b95\7\u0338\2\2\u0b95\u0b97")
        buf.write("\5\u00c8e\2\u0b96\u0b94\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97")
        buf.write("\u0b98\3\2\2\2\u0b98\u0b9e\7\u0337\2\2\u0b99\u0b9a\7\u017d")
        buf.write("\2\2\u0b9a\u0b9b\7\u0336\2\2\u0b9b\u0b9c\5\u011a\u008e")
        buf.write("\2\u0b9c\u0b9d\7\u0337\2\2\u0b9d\u0b9f\3\2\2\2\u0b9e\u0b99")
        buf.write("\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0119\3\2\2\2\u0ba0")
        buf.write("\u0ba5\5\u011c\u008f\2\u0ba1\u0ba2\7\u0338\2\2\u0ba2\u0ba4")
        buf.write("\5\u011c\u008f\2\u0ba3\u0ba1\3\2\2\2\u0ba4\u0ba7\3\2\2")
        buf.write("\2\u0ba5\u0ba3\3\2\2\2\u0ba5\u0ba6\3\2\2\2\u0ba6\u011b")
        buf.write("\3\2\2\2\u0ba7\u0ba5\3\2\2\2\u0ba8\u0ba9\7\u031d\2\2\u0ba9")
        buf.write("\u0bab\5\u019c\u00cf\2\u0baa\u0bac\7\u0320\2\2\u0bab\u0baa")
        buf.write("\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u011d\3\2\2\2\u0bad")
        buf.write("\u0bae\7,\2\2\u0bae\u0baf\7\u0336\2\2\u0baf\u0bb0\7-\2")
        buf.write("\2\u0bb0\u0bb1\5\u016e\u00b8\2\u0bb1\u0bb2\7\u0338\2\2")
        buf.write("\u0bb2\u0bb3\t.\2\2\u0bb3\u0bb4\7\u0337\2\2\u0bb4\u011f")
        buf.write("\3\2\2\2\u0bb5\u0bb7\7\u00a2\2\2\u0bb6\u0bb5\3\2\2\2\u0bb6")
        buf.write("\u0bb7\3\2\2\2\u0bb7\u0bbd\3\2\2\2\u0bb8\u0bba\t/\2\2")
        buf.write("\u0bb9\u0bbb\7\u00f0\2\2\u0bba\u0bb9\3\2\2\2\u0bba\u0bbb")
        buf.write("\3\2\2\2\u0bbb\u0bbd\3\2\2\2\u0bbc\u0bb6\3\2\2\2\u0bbc")
        buf.write("\u0bb8\3\2\2\2\u0bbd\u0bbf\3\2\2\2\u0bbe\u0bc0\t\60\2")
        buf.write("\2\u0bbf\u0bbe\3\2\2\2\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc1")
        buf.write("\3\2\2\2\u0bc1\u0bc2\7\u00ab\2\2\u0bc2\u0bc3\5\u0112\u008a")
        buf.write("\2\u0bc3\u0bc4\7\u00e6\2\2\u0bc4\u0bc5\5\u00dep\2\u0bc5")
        buf.write("\u0bd8\3\2\2\2\u0bc6\u0bc7\7J\2\2\u0bc7\u0bc8\7\u00ab")
        buf.write("\2\2\u0bc8\u0bd8\5\u0112\u008a\2\u0bc9\u0bca\7J\2\2\u0bca")
        buf.write("\u0bcb\7\u0197\2\2\u0bcb\u0bd8\5\u0112\u008a\2\u0bcc\u0bcd")
        buf.write("\7\u00f0\2\2\u0bcd\u0bce\7\u0197\2\2\u0bce\u0bd8\5\u0112")
        buf.write("\u008a\2\u0bcf\u0bd0\7\u00fb\2\2\u0bd0\u0bd1\5\u0122\u0092")
        buf.write("\2\u0bd1\u0bd2\5\u0144\u00a3\2\u0bd2\u0bd8\3\2\2\2\u0bd3")
        buf.write("\u0bd4\7\u016b\2\2\u0bd4\u0bd5\5\u0124\u0093\2\u0bd5\u0bd6")
        buf.write("\5\u0144\u00a3\2\u0bd6\u0bd8\3\2\2\2\u0bd7\u0bbc\3\2\2")
        buf.write("\2\u0bd7\u0bc6\3\2\2\2\u0bd7\u0bc9\3\2\2\2\u0bd7\u0bcc")
        buf.write("\3\2\2\2\u0bd7\u0bcf\3\2\2\2\u0bd7\u0bd3\3\2\2\2\u0bd8")
        buf.write("\u0121\3\2\2\2\u0bd9\u0bda\7\u0336\2\2\u0bda\u0bdb\5\u015a")
        buf.write("\u00ae\2\u0bdb\u0bdc\7\u0086\2\2\u0bdc\u0bdd\5\u0178\u00bd")
        buf.write("\2\u0bdd\u0bde\7\u009c\2\2\u0bde\u0bdf\5\u0150\u00a9\2")
        buf.write("\u0bdf\u0be0\7\u0337\2\2\u0be0\u0123\3\2\2\2\u0be1\u0be2")
        buf.write("\7\u0336\2\2\u0be2\u0be3\5\u00c8e\2\u0be3\u0be4\7\u0086")
        buf.write("\2\2\u0be4\u0be5\5\u0178\u00bd\2\u0be5\u0be6\7\u009c\2")
        buf.write("\2\u0be6\u0be7\7\u0336\2\2\u0be7\u0be8\5\u0126\u0094\2")
        buf.write("\u0be8\u0be9\7\u0337\2\2\u0be9\u0bea\7\u0337\2\2\u0bea")
        buf.write("\u0125\3\2\2\2\u0beb\u0bf0\5\u0178\u00bd\2\u0bec\u0bed")
        buf.write("\7\u0338\2\2\u0bed\u0bef\5\u0178\u00bd\2\u0bee\u0bec\3")
        buf.write("\2\2\2\u0bef\u0bf2\3\2\2\2\u0bf0\u0bee\3\2\2\2\u0bf0\u0bf1")
        buf.write("\3\2\2\2\u0bf1\u0127\3\2\2\2\u0bf2\u0bf0\3\2\2\2\u0bf3")
        buf.write("\u0bf5\5\u016e\u00b8\2\u0bf4\u0bf6\5\u0148\u00a5\2\u0bf5")
        buf.write("\u0bf4\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0129\3\2\2\2")
        buf.write("\u0bf7\u0bf8\7\u00eb\2\2\u0bf8\u0bf9\7\u0336\2\2\u0bf9")
        buf.write("\u0bfa\7\u0320\2\2\u0bfa\u0bfb\7\u0338\2\2\u0bfb\u0bfc")
        buf.write("\7\u0320\2\2\u0bfc\u0bfd\7\u0338\2\2\u0bfd\u0bfe\7\u0320")
        buf.write("\2\2\u0bfe\u0c12\7\u0337\2\2\u0bff\u0c00\7\u00eb\2\2\u0c00")
        buf.write("\u0c01\7\u0336\2\2\u0c01\u0c02\7%\2\2\u0c02\u0c03\7\u0320")
        buf.write("\2\2\u0c03\u0c0d\7\u0338\2\2\u0c04\u0c09\5\u012c\u0097")
        buf.write("\2\u0c05\u0c06\7\u0338\2\2\u0c06\u0c08\5\u012c\u0097\2")
        buf.write("\u0c07\u0c05\3\2\2\2\u0c08\u0c0b\3\2\2\2\u0c09\u0c07\3")
        buf.write("\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0e\3\2\2\2\u0c0b\u0c09")
        buf.write("\3\2\2\2\u0c0c\u0c0e\5\u01a2\u00d2\2\u0c0d\u0c04\3\2\2")
        buf.write("\2\u0c0d\u0c0c\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u0c10")
        buf.write("\7\u0337\2\2\u0c10\u0c12\3\2\2\2\u0c11\u0bf7\3\2\2\2\u0c11")
        buf.write("\u0bff\3\2\2\2\u0c12\u012b\3\2\2\2\u0c13\u0c14\5\u01a2")
        buf.write("\u00d2\2\u0c14\u0c15\7\u0324\2\2\u0c15\u0c16\t\t\2\2\u0c16")
        buf.write("\u012d\3\2\2\2\u0c17\u0c22\5\u00d4k\2\u0c18\u0c19\7\u0336")
        buf.write("\2\2\u0c19\u0c1a\5\u00d4k\2\u0c1a\u0c1b\7\u0337\2\2\u0c1b")
        buf.write("\u0c22\3\2\2\2\u0c1c\u0c22\5\u0154\u00ab\2\u0c1d\u0c1e")
        buf.write("\7\u0336\2\2\u0c1e\u0c1f\5\u0154\u00ab\2\u0c1f\u0c20\7")
        buf.write("\u0337\2\2\u0c20\u0c22\3\2\2\2\u0c21\u0c17\3\2\2\2\u0c21")
        buf.write("\u0c18\3\2\2\2\u0c21\u0c1c\3\2\2\2\u0c21\u0c1d\3\2\2\2")
        buf.write("\u0c22\u012f\3\2\2\2\u0c23\u0ca8\5\u0158\u00ad\2\u0c24")
        buf.write("\u0ca8\5\u015a\u00ae\2\u0c25\u0ca8\5\u015c\u00af\2\u0c26")
        buf.write("\u0c27\5\u0188\u00c5\2\u0c27\u0c29\7\u0336\2\2\u0c28\u0c2a")
        buf.write("\5\u0156\u00ac\2\u0c29\u0c28\3\2\2\2\u0c29\u0c2a\3\2\2")
        buf.write("\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2c\7\u0337\2\2\u0c2c\u0ca8")
        buf.write("\3\2\2\2\u0c2d\u0c2e\7\u01a9\2\2\u0c2e\u0c2f\7\u0336\2")
        buf.write("\2\u0c2f\u0c30\7\u033b\2\2\u0c30\u0ca8\7\u0337\2\2\u0c31")
        buf.write("\u0c32\7\u01b1\2\2\u0c32\u0c33\7\u0336\2\2\u0c33\u0c34")
        buf.write("\5\u00c8e\2\u0c34\u0c35\7\20\2\2\u0c35\u0c36\5\u019c\u00cf")
        buf.write("\2\u0c36\u0c37\7\u0337\2\2\u0c37\u0ca8\3\2\2\2\u0c38\u0c39")
        buf.write("\7G\2\2\u0c39\u0c3a\7\u0336\2\2\u0c3a\u0c3b\5\u019c\u00cf")
        buf.write("\2\u0c3b\u0c3c\7\u0338\2\2\u0c3c\u0c3f\5\u00c8e\2\u0c3d")
        buf.write("\u0c3e\7\u0338\2\2\u0c3e\u0c40\5\u00c8e\2\u0c3f\u0c3d")
        buf.write("\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41")
        buf.write("\u0c42\7\u0337\2\2\u0c42\u0ca8\3\2\2\2\u0c43\u0c44\7\u01b6")
        buf.write("\2\2\u0c44\u0c45\7\u0336\2\2\u0c45\u0c46\7\u033b\2\2\u0c46")
        buf.write("\u0ca8\7\u0337\2\2\u0c47\u0c48\7\66\2\2\u0c48\u0c49\7")
        buf.write("\u0336\2\2\u0c49\u0c4a\5\u0156\u00ac\2\u0c4a\u0c4b\7\u0337")
        buf.write("\2\2\u0c4b\u0ca8\3\2\2\2\u0c4c\u0ca8\7N\2\2\u0c4d\u0ca8")
        buf.write("\7O\2\2\u0c4e\u0c4f\7\u01cd\2\2\u0c4f\u0c50\7\u0336\2")
        buf.write("\2\u0c50\u0c51\7\u031d\2\2\u0c51\u0c52\7\u0338\2\2\u0c52")
        buf.write("\u0c53\5\u00c8e\2\u0c53\u0c54\7\u0338\2\2\u0c54\u0c55")
        buf.write("\5\u00c8e\2\u0c55\u0c56\7\u0337\2\2\u0c56\u0ca8\3\2\2")
        buf.write("\2\u0c57\u0c58\7\u01ce\2\2\u0c58\u0c59\7\u0336\2\2\u0c59")
        buf.write("\u0c5a\7\u031d\2\2\u0c5a\u0c5b\7\u0338\2\2\u0c5b\u0c5c")
        buf.write("\5\u00c8e\2\u0c5c\u0c5d\7\u0338\2\2\u0c5d\u0c5e\5\u00c8")
        buf.write("e\2\u0c5e\u0c5f\7\u0337\2\2\u0c5f\u0ca8\3\2\2\2\u0c60")
        buf.write("\u0c61\7\u01cf\2\2\u0c61\u0c62\7\u0336\2\2\u0c62\u0c63")
        buf.write("\7\u031d\2\2\u0c63\u0c64\7\u0338\2\2\u0c64\u0c65\5\u00c8")
        buf.write("e\2\u0c65\u0c66\7\u0337\2\2\u0c66\u0ca8\3\2\2\2\u0c67")
        buf.write("\u0c68\7\u01d0\2\2\u0c68\u0c69\7\u0336\2\2\u0c69\u0c6a")
        buf.write("\7\u031d\2\2\u0c6a\u0c6b\7\u0338\2\2\u0c6b\u0c6c\5\u00c8")
        buf.write("e\2\u0c6c\u0c6d\7\u0337\2\2\u0c6d\u0ca8\3\2\2\2\u0c6e")
        buf.write("\u0c6f\7\u020e\2\2\u0c6f\u0c70\7\u0336\2\2\u0c70\u0ca8")
        buf.write("\7\u0337\2\2\u0c71\u0c72\7\u020f\2\2\u0c72\u0c73\7\u0336")
        buf.write("\2\2\u0c73\u0ca8\7\u0337\2\2\u0c74\u0c75\7\u0097\2\2\u0c75")
        buf.write("\u0c76\7\u0336\2\2\u0c76\u0c79\5\u019c\u00cf\2\u0c77\u0c78")
        buf.write("\7\u0338\2\2\u0c78\u0c7a\7\u031c\2\2\u0c79\u0c77\3\2\2")
        buf.write("\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7d\3\2\2\2\u0c7b\u0c7c")
        buf.write("\7\u0338\2\2\u0c7c\u0c7e\7\u031c\2\2\u0c7d\u0c7b\3\2\2")
        buf.write("\2\u0c7d\u0c7e\3\2\2\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u0c80")
        buf.write("\7\u0337\2\2\u0c80\u0ca8\3\2\2\2\u0c81\u0ca8\7\u0254\2")
        buf.write("\2\u0c82\u0c83\7\u00e1\2\2\u0c83\u0c84\7\u0336\2\2\u0c84")
        buf.write("\u0c85\5\u00c8e\2\u0c85\u0c86\7\u0338\2\2\u0c86\u0c87")
        buf.write("\5\u00c8e\2\u0c87\u0c88\7\u0337\2\2\u0c88\u0ca8\3\2\2")
        buf.write("\2\u0c89\u0c8a\7\u02e3\2\2\u0c8a\u0c8b\7\u0336\2\2\u0c8b")
        buf.write("\u0c8c\5\u00c8e\2\u0c8c\u0c8d\7\u0338\2\2\u0c8d\u0c8e")
        buf.write("\7\u031c\2\2\u0c8e\u0c8f\7\u0338\2\2\u0c8f\u0c90\7\u031c")
        buf.write("\2\2\u0c90\u0c91\7\u0338\2\2\u0c91\u0c92\5\u00c8e\2\u0c92")
        buf.write("\u0c93\7\u0337\2\2\u0c93\u0ca8\3\2\2\2\u0c94\u0ca8\7\u013d")
        buf.write("\2\2\u0c95\u0ca8\7\u0156\2\2\u0c96\u0c97\7\u00aa\2\2\u0c97")
        buf.write("\u0c98\7\u0336\2\2\u0c98\u0c99\5\u00c8e\2\u0c99\u0c9a")
        buf.write("\7\u0338\2\2\u0c9a\u0c9b\5\u00c8e\2\u0c9b\u0c9c\7\u0337")
        buf.write("\2\2\u0c9c\u0ca8\3\2\2\2\u0c9d\u0ca8\5\u0132\u009a\2\u0c9e")
        buf.write("\u0c9f\7\u009b\2\2\u0c9f\u0ca0\7\u0336\2\2\u0ca0\u0ca1")
        buf.write("\5\u00dep\2\u0ca1\u0ca2\7\u0338\2\2\u0ca2\u0ca3\5\u00c8")
        buf.write("e\2\u0ca3\u0ca4\7\u0338\2\2\u0ca4\u0ca5\5\u00c8e\2\u0ca5")
        buf.write("\u0ca6\7\u0337\2\2\u0ca6\u0ca8\3\2\2\2\u0ca7\u0c23\3\2")
        buf.write("\2\2\u0ca7\u0c24\3\2\2\2\u0ca7\u0c25\3\2\2\2\u0ca7\u0c26")
        buf.write("\3\2\2\2\u0ca7\u0c2d\3\2\2\2\u0ca7\u0c31\3\2\2\2\u0ca7")
        buf.write("\u0c38\3\2\2\2\u0ca7\u0c43\3\2\2\2\u0ca7\u0c47\3\2\2\2")
        buf.write("\u0ca7\u0c4c\3\2\2\2\u0ca7\u0c4d\3\2\2\2\u0ca7\u0c4e\3")
        buf.write("\2\2\2\u0ca7\u0c57\3\2\2\2\u0ca7\u0c60\3\2\2\2\u0ca7\u0c67")
        buf.write("\3\2\2\2\u0ca7\u0c6e\3\2\2\2\u0ca7\u0c71\3\2\2\2\u0ca7")
        buf.write("\u0c74\3\2\2\2\u0ca7\u0c81\3\2\2\2\u0ca7\u0c82\3\2\2\2")
        buf.write("\u0ca7\u0c89\3\2\2\2\u0ca7\u0c94\3\2\2\2\u0ca7\u0c95\3")
        buf.write("\2\2\2\u0ca7\u0c96\3\2\2\2\u0ca7\u0c9d\3\2\2\2\u0ca7\u0c9e")
        buf.write("\3\2\2\2\u0ca8\u0131\3\2\2\2\u0ca9\u0caf\5\u0134\u009b")
        buf.write("\2\u0caa\u0caf\5\u0136\u009c\2\u0cab\u0caf\5\u0138\u009d")
        buf.write("\2\u0cac\u0caf\5\u013a\u009e\2\u0cad\u0caf\5\u013c\u009f")
        buf.write("\2\u0cae\u0ca9\3\2\2\2\u0cae\u0caa\3\2\2\2\u0cae\u0cab")
        buf.write("\3\2\2\2\u0cae\u0cac\3\2\2\2\u0cae\u0cad\3\2\2\2\u0caf")
        buf.write("\u0133\3\2\2\2\u0cb0\u0cb5\7\u031b\2\2\u0cb1\u0cb5\7\u031d")
        buf.write("\2\2\u0cb2\u0cb5\7s\2\2\u0cb3\u0cb5\5\u0136\u009c\2\u0cb4")
        buf.write("\u0cb0\3\2\2\2\u0cb4\u0cb1\3\2\2\2\u0cb4\u0cb2\3\2\2\2")
        buf.write("\u0cb4\u0cb3\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb7\7")
        buf.write("\u0331\2\2\u0cb7\u0cb8\7\u0305\2\2\u0cb8\u0cb9\7\u0336")
        buf.write("\2\2\u0cb9\u0cba\7\u0320\2\2\u0cba\u0cbb\7\u0338\2\2\u0cbb")
        buf.write("\u0cbc\7\u0320\2\2\u0cbc\u0cdc\7\u0337\2\2\u0cbd\u0cc2")
        buf.write("\7\u031b\2\2\u0cbe\u0cc2\7\u031d\2\2\u0cbf\u0cc2\7s\2")
        buf.write("\2\u0cc0\u0cc2\5\u0136\u009c\2\u0cc1\u0cbd\3\2\2\2\u0cc1")
        buf.write("\u0cbe\3\2\2\2\u0cc1\u0cbf\3\2\2\2\u0cc1\u0cc0\3\2\2\2")
        buf.write("\u0cc2\u0cc3\3\2\2\2\u0cc3\u0cc4\7\u0331\2\2\u0cc4\u0cc5")
        buf.write("\7\u02ba\2\2\u0cc5\u0cc6\7\u0331\2\2\u0cc6\u0cc7\7\u0305")
        buf.write("\2\2\u0cc7\u0cc8\7\u0336\2\2\u0cc8\u0cc9\7\u0320\2\2\u0cc9")
        buf.write("\u0cca\7\u0338\2\2\u0cca\u0ccb\7\u0320\2\2\u0ccb\u0cdc")
        buf.write("\7\u0337\2\2\u0ccc\u0cd1\7\u031b\2\2\u0ccd\u0cd1\7\u031d")
        buf.write("\2\2\u0cce\u0cd1\7s\2\2\u0ccf\u0cd1\5\u0136\u009c\2\u0cd0")
        buf.write("\u0ccc\3\2\2\2\u0cd0\u0ccd\3\2\2\2\u0cd0\u0cce\3\2\2\2")
        buf.write("\u0cd0\u0ccf\3\2\2\2\u0cd1\u0cd2\3\2\2\2\u0cd2\u0cd3\7")
        buf.write("\u0331\2\2\u0cd3\u0cd4\7\u00f3\2\2\u0cd4\u0cd5\7\u0331")
        buf.write("\2\2\u0cd5\u0cd6\7\u0305\2\2\u0cd6\u0cd7\7\u0336\2\2\u0cd7")
        buf.write("\u0cd8\7\u0320\2\2\u0cd8\u0cd9\7\u0338\2\2\u0cd9\u0cda")
        buf.write("\7\u0320\2\2\u0cda\u0cdc\7\u0337\2\2\u0cdb\u0cb4\3\2\2")
        buf.write("\2\u0cdb\u0cc1\3\2\2\2\u0cdb\u0cd0\3\2\2\2\u0cdc\u0135")
        buf.write("\3\2\2\2\u0cdd\u0ce1\7\u031b\2\2\u0cde\u0ce1\7\u031d\2")
        buf.write("\2\u0cdf\u0ce1\5\u016c\u00b7\2\u0ce0\u0cdd\3\2\2\2\u0ce0")
        buf.write("\u0cde\3\2\2\2\u0ce0\u0cdf\3\2\2\2\u0ce1\u0ce2\3\2\2\2")
        buf.write("\u0ce2\u0ce3\7\u0331\2\2\u0ce3\u0ce4\7\u0294\2\2\u0ce4")
        buf.write("\u0ce5\7\u0336\2\2\u0ce5\u0ce6\7\u0320\2\2\u0ce6\u0cf4")
        buf.write("\7\u0337\2\2\u0ce7\u0ceb\7\u031b\2\2\u0ce8\u0ceb\7\u031d")
        buf.write("\2\2\u0ce9\u0ceb\5\u016c\u00b7\2\u0cea\u0ce7\3\2\2\2\u0cea")
        buf.write("\u0ce8\3\2\2\2\u0cea\u0ce9\3\2\2\2\u0ceb\u0cec\3\2\2\2")
        buf.write("\u0cec\u0ced\7\u0331\2\2\u0ced\u0cee\7\u02ba\2\2\u0cee")
        buf.write("\u0cef\7\u0331\2\2\u0cef\u0cf0\7\u0294\2\2\u0cf0\u0cf1")
        buf.write("\7\u0336\2\2\u0cf1\u0cf2\7\u0320\2\2\u0cf2\u0cf4\7\u0337")
        buf.write("\2\2\u0cf3\u0ce0\3\2\2\2\u0cf3\u0cea\3\2\2\2\u0cf4\u0137")
        buf.write("\3\2\2\2\u0cf5\u0cf6\t\61\2\2\u0cf6\u0cf7\7\u0331\2\2")
        buf.write("\u0cf7\u0cf8\7\u01f4\2\2\u0cf8\u0cf9\7\u0336\2\2\u0cf9")
        buf.write("\u0cfa\7\u0320\2\2\u0cfa\u0cfb\7\u0337\2\2\u0cfb\u0139")
        buf.write("\3\2\2\2\u0cfc\u0cfd\t\61\2\2\u0cfd\u0cfe\7\u0331\2\2")
        buf.write("\u0cfe\u0cff\7\u025c\2\2\u0cff\u0d00\7\u0336\2\2\u0d00")
        buf.write("\u0d01\7\u0320\2\2\u0d01\u0d02\7\u0337\2\2\u0d02\u013b")
        buf.write("\3\2\2\2\u0d03\u0d04\t\61\2\2\u0d04\u0d05\7\u0331\2\2")
        buf.write("\u0d05\u0d06\7\u0269\2\2\u0d06\u0d07\7\u0336\2\2\u0d07")
        buf.write("\u0d08\7\u0320\2\2\u0d08\u0d09\7\u0337\2\2\u0d09\u013d")
        buf.write("\3\2\2\2\u0d0a\u0d0b\7\u0179\2\2\u0d0b\u0d0c\5\u00c8e")
        buf.write("\2\u0d0c\u0d0d\7\u015d\2\2\u0d0d\u0d0e\5\u00c8e\2\u0d0e")
        buf.write("\u013f\3\2\2\2\u0d0f\u0d10\7\u0179\2\2\u0d10\u0d11\5\u00de")
        buf.write("p\2\u0d11\u0d12\7\u015d\2\2\u0d12\u0d13\5\u00c8e\2\u0d13")
        buf.write("\u0141\3\2\2\2\u0d14\u0d16\7\20\2\2\u0d15\u0d14\3\2\2")
        buf.write("\2\u0d15\u0d16\3\2\2\2\u0d16\u0d17\3\2\2\2\u0d17\u0d18")
        buf.write("\5\u0152\u00aa\2\u0d18\u0143\3\2\2\2\u0d19\u0d1b\7\20")
        buf.write("\2\2\u0d1a\u0d19\3\2\2\2\u0d1a\u0d1b\3\2\2\2\u0d1b\u0d1c")
        buf.write("\3\2\2\2\u0d1c\u0d1d\5\u0146\u00a4\2\u0d1d\u0145\3\2\2")
        buf.write("\2\u0d1e\u0d20\5\u01a2\u00d2\2\u0d1f\u0d21\5\u0148\u00a5")
        buf.write("\2\u0d20\u0d1f\3\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u0147")
        buf.write("\3\2\2\2\u0d22\u0d24\7\u017d\2\2\u0d23\u0d22\3\2\2\2\u0d23")
        buf.write("\u0d24\3\2\2\2\u0d24\u0d25\3\2\2\2\u0d25\u0d26\7\u0336")
        buf.write("\2\2\u0d26\u0d2d\5\u014c\u00a7\2\u0d27\u0d29\7\u0338\2")
        buf.write("\2\u0d28\u0d27\3\2\2\2\u0d28\u0d29\3\2\2\2\u0d29\u0d2a")
        buf.write("\3\2\2\2\u0d2a\u0d2c\5\u014c\u00a7\2\u0d2b\u0d28\3\2\2")
        buf.write("\2\u0d2c\u0d2f\3\2\2\2\u0d2d\u0d2b\3\2\2\2\u0d2d\u0d2e")
        buf.write("\3\2\2\2\u0d2e\u0d30\3\2\2\2\u0d2f\u0d2d\3\2\2\2\u0d30")
        buf.write("\u0d31\7\u0337\2\2\u0d31\u0149\3\2\2\2\u0d32\u0d33\7\u017d")
        buf.write("\2\2\u0d33\u0d34\7\u0336\2\2\u0d34\u0d3b\5\u014c\u00a7")
        buf.write("\2\u0d35\u0d37\7\u0338\2\2\u0d36\u0d35\3\2\2\2\u0d36\u0d37")
        buf.write("\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d3a\5\u014c\u00a7")
        buf.write("\2\u0d39\u0d36\3\2\2\2\u0d3a\u0d3d\3\2\2\2\u0d3b\u0d39")
        buf.write("\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d3e\3\2\2\2\u0d3d")
        buf.write("\u0d3b\3\2\2\2\u0d3e\u0d3f\7\u0337\2\2\u0d3f\u014b\3\2")
        buf.write("\2\2\u0d40\u0d42\7\u026a\2\2\u0d41\u0d40\3\2\2\2\u0d41")
        buf.write("\u0d42\3\2\2\2\u0d42\u0d73\3\2\2\2\u0d43\u0d57\7\u009f")
        buf.write("\2\2\u0d44\u0d45\7\u0336\2\2\u0d45\u0d4a\5\u014e\u00a8")
        buf.write("\2\u0d46\u0d47\7\u0338\2\2\u0d47\u0d49\5\u014e\u00a8\2")
        buf.write("\u0d48\u0d46\3\2\2\2\u0d49\u0d4c\3\2\2\2\u0d4a\u0d48\3")
        buf.write("\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u0d4d\3\2\2\2\u0d4c\u0d4a")
        buf.write("\3\2\2\2\u0d4d\u0d4e\7\u0337\2\2\u0d4e\u0d58\3\2\2\2\u0d4f")
        buf.write("\u0d54\5\u014e\u00a8\2\u0d50\u0d51\7\u0338\2\2\u0d51\u0d53")
        buf.write("\5\u014e\u00a8\2\u0d52\u0d50\3\2\2\2\u0d53\u0d56\3\2\2")
        buf.write("\2\u0d54\u0d52\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d58")
        buf.write("\3\2\2\2\u0d56\u0d54\3\2\2\2\u0d57\u0d44\3\2\2\2\u0d57")
        buf.write("\u0d4f\3\2\2\2\u0d58\u0d74\3\2\2\2\u0d59\u0d5a\7\u009f")
        buf.write("\2\2\u0d5a\u0d5b\7\u0324\2\2\u0d5b\u0d74\5\u014e\u00a8")
        buf.write("\2\u0d5c\u0d6b\7\u0087\2\2\u0d5d\u0d5e\7\u0336\2\2\u0d5e")
        buf.write("\u0d5f\5\u014e\u00a8\2\u0d5f\u0d60\7\u0336\2\2\u0d60\u0d65")
        buf.write("\7\u031d\2\2\u0d61\u0d62\7\u0338\2\2\u0d62\u0d64\7\u031d")
        buf.write("\2\2\u0d63\u0d61\3\2\2\2\u0d64\u0d67\3\2\2\2\u0d65\u0d63")
        buf.write("\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d68\3\2\2\2\u0d67")
        buf.write("\u0d65\3\2\2\2\u0d68\u0d69\7\u0337\2\2\u0d69\u0d6a\7\u0337")
        buf.write("\2\2\u0d6a\u0d6c\3\2\2\2\u0d6b\u0d5d\3\2\2\2\u0d6b\u0d6c")
        buf.write("\3\2\2\2\u0d6c\u0d74\3\2\2\2\u0d6d\u0d74\7\u02cf\2\2\u0d6e")
        buf.write("\u0d74\7\u02d9\2\2\u0d6f\u0d70\7\u02da\2\2\u0d70\u0d71")
        buf.write("\7\u0324\2\2\u0d71\u0d74\7\u031c\2\2\u0d72\u0d74\7\u031d")
        buf.write("\2\2\u0d73\u0d43\3\2\2\2\u0d73\u0d59\3\2\2\2\u0d73\u0d5c")
        buf.write("\3\2\2\2\u0d73\u0d6d\3\2\2\2\u0d73\u0d6e\3\2\2\2\u0d73")
        buf.write("\u0d6f\3\2\2\2\u0d73\u0d72\3\2\2\2\u0d74\u014d\3\2\2\2")
        buf.write("\u0d75\u0d78\5\u01a2\u00d2\2\u0d76\u0d78\7\u031c\2\2\u0d77")
        buf.write("\u0d75\3\2\2\2\u0d77\u0d76\3\2\2\2\u0d78\u014f\3\2\2\2")
        buf.write("\u0d79\u0d7a\7\u0336\2\2\u0d7a\u0d7f\5\u0152\u00aa\2\u0d7b")
        buf.write("\u0d7c\7\u0338\2\2\u0d7c\u0d7e\5\u0152\u00aa\2\u0d7d\u0d7b")
        buf.write("\3\2\2\2\u0d7e\u0d81\3\2\2\2\u0d7f\u0d7d\3\2\2\2\u0d7f")
        buf.write("\u0d80\3\2\2\2\u0d80\u0d82\3\2\2\2\u0d81\u0d7f\3\2\2\2")
        buf.write("\u0d82\u0d83\7\u0337\2\2\u0d83\u0151\3\2\2\2\u0d84\u0d87")
        buf.write("\5\u01a2\u00d2\2\u0d85\u0d87\7\u0320\2\2\u0d86\u0d84\3")
        buf.write("\2\2\2\u0d86\u0d85\3\2\2\2\u0d87\u0153\3\2\2\2\u0d88\u0d89")
        buf.write("\7\u0173\2\2\u0d89\u0d8a\7\u0336\2\2\u0d8a\u0d8b\5\u0156")
        buf.write("\u00ac\2\u0d8b\u0d93\7\u0337\2\2\u0d8c\u0d8d\7\u0338\2")
        buf.write("\2\u0d8d\u0d8e\7\u0336\2\2\u0d8e\u0d8f\5\u0156\u00ac\2")
        buf.write("\u0d8f\u0d90\7\u0337\2\2\u0d90\u0d92\3\2\2\2\u0d91\u0d8c")
        buf.write("\3\2\2\2\u0d92\u0d95\3\2\2\2\u0d93\u0d91\3\2\2\2\u0d93")
        buf.write("\u0d94\3\2\2\2\u0d94\u0155\3\2\2\2\u0d95\u0d93\3\2\2\2")
        buf.write("\u0d96\u0d9b\5\u00c8e\2\u0d97\u0d98\7\u0338\2\2\u0d98")
        buf.write("\u0d9a\5\u00c8e\2\u0d99\u0d97\3\2\2\2\u0d9a\u0d9d\3\2")
        buf.write("\2\2\u0d9b\u0d99\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0157")
        buf.write("\3\2\2\2\u0d9d\u0d9b\3\2\2\2\u0d9e\u0d9f\t\62\2\2\u0d9f")
        buf.write("\u0da0\7\u0336\2\2\u0da0\u0da1\7\u0337\2\2\u0da1\u0da9")
        buf.write("\5\u0160\u00b1\2\u0da2\u0da3\7\u026f\2\2\u0da3\u0da4\7")
        buf.write("\u0336\2\2\u0da4\u0da5\5\u00c8e\2\u0da5\u0da6\7\u0337")
        buf.write("\2\2\u0da6\u0da7\5\u0160\u00b1\2\u0da7\u0da9\3\2\2\2\u0da8")
        buf.write("\u0d9e\3\2\2\2\u0da8\u0da2\3\2\2\2\u0da9\u0159\3\2\2\2")
        buf.write("\u0daa\u0dab\t\63\2\2\u0dab\u0dac\7\u0336\2\2\u0dac\u0dad")
        buf.write("\5\u015e\u00b0\2\u0dad\u0daf\7\u0337\2\2\u0dae\u0db0\5")
        buf.write("\u0160\u00b1\2\u0daf\u0dae\3\2\2\2\u0daf\u0db0\3\2\2\2")
        buf.write("\u0db0\u0dcb\3\2\2\2\u0db1\u0db2\t\64\2\2\u0db2\u0db5")
        buf.write("\7\u0336\2\2\u0db3\u0db6\7\u033b\2\2\u0db4\u0db6\5\u015e")
        buf.write("\u00b0\2\u0db5\u0db3\3\2\2\2\u0db5\u0db4\3\2\2\2\u0db6")
        buf.write("\u0db7\3\2\2\2\u0db7\u0db9\7\u0337\2\2\u0db8\u0dba\5\u0160")
        buf.write("\u00b1\2\u0db9\u0db8\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba")
        buf.write("\u0dcb\3\2\2\2\u0dbb\u0dbc\7\u01b7\2\2\u0dbc\u0dbd\7\u0336")
        buf.write("\2\2\u0dbd\u0dbe\5\u015e\u00b0\2\u0dbe\u0dbf\7\u0337\2")
        buf.write("\2\u0dbf\u0dcb\3\2\2\2\u0dc0\u0dc1\7\u0213\2\2\u0dc1\u0dc2")
        buf.write("\7\u0336\2\2\u0dc2\u0dc3\5\u00c8e\2\u0dc3\u0dc4\7\u0337")
        buf.write("\2\2\u0dc4\u0dcb\3\2\2\2\u0dc5\u0dc6\7\u0214\2\2\u0dc6")
        buf.write("\u0dc7\7\u0336\2\2\u0dc7\u0dc8\5\u0156\u00ac\2\u0dc8\u0dc9")
        buf.write("\7\u0337\2\2\u0dc9\u0dcb\3\2\2\2\u0dca\u0daa\3\2\2\2\u0dca")
        buf.write("\u0db1\3\2\2\2\u0dca\u0dbb\3\2\2\2\u0dca\u0dc0\3\2\2\2")
        buf.write("\u0dca\u0dc5\3\2\2\2\u0dcb\u015b\3\2\2\2\u0dcc\u0dcd\t")
        buf.write("\65\2\2\u0dcd\u0dce\7\u0336\2\2\u0dce\u0dcf\5\u00c8e\2")
        buf.write("\u0dcf\u0dd0\7\u0337\2\2\u0dd0\u0dd1\5\u0160\u00b1\2\u0dd1")
        buf.write("\u0de1\3\2\2\2\u0dd2\u0dd3\t\66\2\2\u0dd3\u0dd4\7\u0336")
        buf.write("\2\2\u0dd4\u0ddb\5\u00c8e\2\u0dd5\u0dd6\7\u0338\2\2\u0dd6")
        buf.write("\u0dd9\5\u00c8e\2\u0dd7\u0dd8\7\u0338\2\2\u0dd8\u0dda")
        buf.write("\5\u00c8e\2\u0dd9\u0dd7\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda")
        buf.write("\u0ddc\3\2\2\2\u0ddb\u0dd5\3\2\2\2\u0ddb\u0ddc\3\2\2\2")
        buf.write("\u0ddc\u0ddd\3\2\2\2\u0ddd\u0dde\7\u0337\2\2\u0dde\u0ddf")
        buf.write("\5\u0160\u00b1\2\u0ddf\u0de1\3\2\2\2\u0de0\u0dcc\3\2\2")
        buf.write("\2\u0de0\u0dd2\3\2\2\2\u0de1\u015d\3\2\2\2\u0de2\u0de4")
        buf.write("\t\"\2\2\u0de3\u0de2\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4")
        buf.write("\u0de5\3\2\2\2\u0de5\u0de6\5\u00c8e\2\u0de6\u015f\3\2")
        buf.write("\2\2\u0de7\u0de8\7\u00f1\2\2\u0de8\u0dec\7\u0336\2\2\u0de9")
        buf.write("\u0dea\7\u0281\2\2\u0dea\u0deb\7&\2\2\u0deb\u0ded\5\u0156")
        buf.write("\u00ac\2\u0dec\u0de9\3\2\2\2\u0dec\u0ded\3\2\2\2\u0ded")
        buf.write("\u0def\3\2\2\2\u0dee\u0df0\5\u00f2z\2\u0def\u0dee\3\2")
        buf.write("\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df2\3\2\2\2\u0df1\u0df3")
        buf.write("\5\u0162\u00b2\2\u0df2\u0df1\3\2\2\2\u0df2\u0df3\3\2\2")
        buf.write("\2\u0df3\u0df4\3\2\2\2\u0df4\u0df5\7\u0337\2\2\u0df5\u0161")
        buf.write("\3\2\2\2\u0df6\u0df7\t\67\2\2\u0df7\u0df8\5\u0164\u00b3")
        buf.write("\2\u0df8\u0163\3\2\2\2\u0df9\u0e00\5\u0168\u00b5\2\u0dfa")
        buf.write("\u0dfb\7\35\2\2\u0dfb\u0dfc\5\u0166\u00b4\2\u0dfc\u0dfd")
        buf.write("\7\13\2\2\u0dfd\u0dfe\5\u0166\u00b4\2\u0dfe\u0e00\3\2")
        buf.write("\2\2\u0dff\u0df9\3\2\2\2\u0dff\u0dfa\3\2\2\2\u0e00\u0165")
        buf.write("\3\2\2\2\u0e01\u0e04\5\u0168\u00b5\2\u0e02\u0e04\5\u016a")
        buf.write("\u00b6\2\u0e03\u0e01\3\2\2\2\u0e03\u0e02\3\2\2\2\u0e04")
        buf.write("\u0167\3\2\2\2\u0e05\u0e06\7\u02fe\2\2\u0e06\u0e0c\7\u0288")
        buf.write("\2\2\u0e07\u0e08\7\u031c\2\2\u0e08\u0e0c\7\u0288\2\2\u0e09")
        buf.write("\u0e0a\7K\2\2\u0e0a\u0e0c\7\u02ba\2\2\u0e0b\u0e05\3\2")
        buf.write("\2\2\u0e0b\u0e07\3\2\2\2\u0e0b\u0e09\3\2\2\2\u0e0c\u0169")
        buf.write("\3\2\2\2\u0e0d\u0e0e\7\u02fe\2\2\u0e0e\u0e12\7\u0205\2")
        buf.write("\2\u0e0f\u0e10\7\u031c\2\2\u0e10\u0e12\7\u0205\2\2\u0e11")
        buf.write("\u0e0d\3\2\2\2\u0e11\u0e0f\3\2\2\2\u0e12\u016b\3\2\2\2")
        buf.write("\u0e13\u0e14\5\u01a2\u00d2\2\u0e14\u0e15\7\u0331\2\2\u0e15")
        buf.write("\u0e16\5\u01a2\u00d2\2\u0e16\u0e17\7\u0331\2\2\u0e17\u0e18")
        buf.write("\5\u01a2\u00d2\2\u0e18\u0e19\7\u0331\2\2\u0e19\u0e25\3")
        buf.write("\2\2\2\u0e1a\u0e1b\5\u01a2\u00d2\2\u0e1b\u0e1d\7\u0331")
        buf.write("\2\2\u0e1c\u0e1e\5\u01a2\u00d2\2\u0e1d\u0e1c\3\2\2\2\u0e1d")
        buf.write("\u0e1e\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e20\7\u0331")
        buf.write("\2\2\u0e20\u0e25\3\2\2\2\u0e21\u0e22\5\u01a2\u00d2\2\u0e22")
        buf.write("\u0e23\7\u0331\2\2\u0e23\u0e25\3\2\2\2\u0e24\u0e13\3\2")
        buf.write("\2\2\u0e24\u0e1a\3\2\2\2\u0e24\u0e21\3\2\2\2\u0e24\u0e25")
        buf.write("\3\2\2\2\u0e25\u0e26\3\2\2\2\u0e26\u0e27\5\u01a2\u00d2")
        buf.write("\2\u0e27\u016d\3\2\2\2\u0e28\u0e29\5\u01a2\u00d2\2\u0e29")
        buf.write("\u0e2b\7\u0331\2\2\u0e2a\u0e2c\5\u01a2\u00d2\2\u0e2b\u0e2a")
        buf.write("\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d")
        buf.write("\u0e2e\7\u0331\2\2\u0e2e\u0e33\3\2\2\2\u0e2f\u0e30\5\u01a2")
        buf.write("\u00d2\2\u0e30\u0e31\7\u0331\2\2\u0e31\u0e33\3\2\2\2\u0e32")
        buf.write("\u0e28\3\2\2\2\u0e32\u0e2f\3\2\2\2\u0e32\u0e33\3\2\2\2")
        buf.write("\u0e33\u0e34\3\2\2\2\u0e34\u0e43\5\u01a2\u00d2\2\u0e35")
        buf.write("\u0e36\5\u01a2\u00d2\2\u0e36\u0e38\7\u0331\2\2\u0e37\u0e39")
        buf.write("\5\u01a2\u00d2\2\u0e38\u0e37\3\2\2\2\u0e38\u0e39\3\2\2")
        buf.write("\2\u0e39\u0e3a\3\2\2\2\u0e3a\u0e3b\7\u0331\2\2\u0e3b\u0e40")
        buf.write("\3\2\2\2\u0e3c\u0e3d\5\u01a2\u00d2\2\u0e3d\u0e3e\7\u0331")
        buf.write("\2\2\u0e3e\u0e40\3\2\2\2\u0e3f\u0e35\3\2\2\2\u0e3f\u0e3c")
        buf.write("\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e41\3\2\2\2\u0e41")
        buf.write("\u0e43\7 \2\2\u0e42\u0e32\3\2\2\2\u0e42\u0e3f\3\2\2\2")
        buf.write("\u0e43\u016f\3\2\2\2\u0e44\u0e45\5\u01a2\u00d2\2\u0e45")
        buf.write("\u0e46\7\u0331\2\2\u0e46\u0e48\3\2\2\2\u0e47\u0e44\3\2")
        buf.write("\2\2\u0e47\u0e48\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e4a")
        buf.write("\5\u01a2\u00d2\2\u0e4a\u0171\3\2\2\2\u0e4b\u0e57\5\u0170")
        buf.write("\u00b9\2\u0e4c\u0e4d\5\u01a2\u00d2\2\u0e4d\u0e4f\7\u0331")
        buf.write("\2\2\u0e4e\u0e50\5\u01a2\u00d2\2\u0e4f\u0e4e\3\2\2\2\u0e4f")
        buf.write("\u0e50\3\2\2\2\u0e50\u0e51\3\2\2\2\u0e51\u0e52\7\u0331")
        buf.write("\2\2\u0e52\u0e54\3\2\2\2\u0e53\u0e4c\3\2\2\2\u0e53\u0e54")
        buf.write("\3\2\2\2\u0e54\u0e55\3\2\2\2\u0e55\u0e57\5\u01a2\u00d2")
        buf.write("\2\u0e56\u0e4b\3\2\2\2\u0e56\u0e53\3\2\2\2\u0e57\u0173")
        buf.write("\3\2\2\2\u0e58\u0e66\5\u0172\u00ba\2\u0e59\u0e5a\5\u01a2")
        buf.write("\u00d2\2\u0e5a\u0e5b\7\u0331\2\2\u0e5b\u0e5c\5\u01a2\u00d2")
        buf.write("\2\u0e5c\u0e5e\7\u0331\2\2\u0e5d\u0e5f\5\u01a2\u00d2\2")
        buf.write("\u0e5e\u0e5d\3\2\2\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e60\3")
        buf.write("\2\2\2\u0e60\u0e61\7\u0331\2\2\u0e61\u0e63\3\2\2\2\u0e62")
        buf.write("\u0e59\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e64\3\2\2\2")
        buf.write("\u0e64\u0e66\5\u01a2\u00d2\2\u0e65\u0e58\3\2\2\2\u0e65")
        buf.write("\u0e62\3\2\2\2\u0e66\u0175\3\2\2\2\u0e67\u0e6a\5\u016c")
        buf.write("\u00b7\2\u0e68\u0e6a\7\u031b\2\2\u0e69\u0e67\3\2\2\2\u0e69")
        buf.write("\u0e68\3\2\2\2\u0e6a\u0177\3\2\2\2\u0e6b\u0e6c\5\u016e")
        buf.write("\u00b8\2\u0e6c\u0e6d\7\u0331\2\2\u0e6d\u0e6f\3\2\2\2\u0e6e")
        buf.write("\u0e6b\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f\u0e70\3\2\2\2")
        buf.write("\u0e70\u0e9c\5\u01a2\u00d2\2\u0e71\u0e72\5\u016e\u00b8")
        buf.write("\2\u0e72\u0e73\7\u0331\2\2\u0e73\u0e75\3\2\2\2\u0e74\u0e71")
        buf.write("\3\2\2\2\u0e74\u0e75\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76")
        buf.write("\u0e9c\7\u01bc\2\2\u0e77\u0e78\5\u016e\u00b8\2\u0e78\u0e79")
        buf.write("\7\u0331\2\2\u0e79\u0e7b\3\2\2\2\u0e7a\u0e77\3\2\2\2\u0e7a")
        buf.write("\u0e7b\3\2\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c\u0e9c\7\u02df")
        buf.write("\2\2\u0e7d\u0e7e\5\u016e\u00b8\2\u0e7e\u0e7f\7\u0331\2")
        buf.write("\2\u0e7f\u0e81\3\2\2\2\u0e80\u0e7d\3\2\2\2\u0e80\u0e81")
        buf.write("\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e9c\7\u0297\2\2\u0e83")
        buf.write("\u0e84\5\u016e\u00b8\2\u0e84\u0e85\7\u0331\2\2\u0e85\u0e87")
        buf.write("\3\2\2\2\u0e86\u0e83\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87")
        buf.write("\u0e88\3\2\2\2\u0e88\u0e9c\7\u0198\2\2\u0e89\u0e8a\5\u016e")
        buf.write("\u00b8\2\u0e8a\u0e8b\7\u0331\2\2\u0e8b\u0e8d\3\2\2\2\u0e8c")
        buf.write("\u0e89\3\2\2\2\u0e8c\u0e8d\3\2\2\2\u0e8d\u0e8e\3\2\2\2")
        buf.write("\u0e8e\u0e9c\7\u0195\2\2\u0e8f\u0e90\5\u016e\u00b8\2\u0e90")
        buf.write("\u0e91\7\u0331\2\2\u0e91\u0e93\3\2\2\2\u0e92\u0e8f\3\2")
        buf.write("\2\2\u0e92\u0e93\3\2\2\2\u0e93\u0e94\3\2\2\2\u0e94\u0e9c")
        buf.write("\7\u0194\2\2\u0e95\u0e96\5\u016e\u00b8\2\u0e96\u0e97\7")
        buf.write("\u0331\2\2\u0e97\u0e99\3\2\2\2\u0e98\u0e95\3\2\2\2\u0e98")
        buf.write("\u0e99\3\2\2\2\u0e99\u0e9a\3\2\2\2\u0e9a\u0e9c\7\u0193")
        buf.write("\2\2\u0e9b\u0e6e\3\2\2\2\u0e9b\u0e74\3\2\2\2\u0e9b\u0e7a")
        buf.write("\3\2\2\2\u0e9b\u0e80\3\2\2\2\u0e9b\u0e86\3\2\2\2\u0e9b")
        buf.write("\u0e8c\3\2\2\2\u0e9b\u0e92\3\2\2\2\u0e9b\u0e98\3\2\2\2")
        buf.write("\u0e9c\u0179\3\2\2\2\u0e9d\u0e9f\5\u01a2\u00d2\2\u0e9e")
        buf.write("\u0ea0\t)\2\2\u0e9f\u0e9e\3\2\2\2\u0e9f\u0ea0\3\2\2\2")
        buf.write("\u0ea0\u0ea8\3\2\2\2\u0ea1\u0ea2\7\u0338\2\2\u0ea2\u0ea4")
        buf.write("\5\u01a2\u00d2\2\u0ea3\u0ea5\t)\2\2\u0ea4\u0ea3\3\2\2")
        buf.write("\2\u0ea4\u0ea5\3\2\2\2\u0ea5\u0ea7\3\2\2\2\u0ea6\u0ea1")
        buf.write("\3\2\2\2\u0ea7\u0eaa\3\2\2\2\u0ea8\u0ea6\3\2\2\2\u0ea8")
        buf.write("\u0ea9\3\2\2\2\u0ea9\u017b\3\2\2\2\u0eaa\u0ea8\3\2\2\2")
        buf.write("\u0eab\u0eb0\5\u01a2\u00d2\2\u0eac\u0ead\7\u0338\2\2\u0ead")
        buf.write("\u0eaf\5\u01a2\u00d2\2\u0eae\u0eac\3\2\2\2\u0eaf\u0eb2")
        buf.write("\3\2\2\2\u0eb0\u0eae\3\2\2\2\u0eb0\u0eb1\3\2\2\2\u0eb1")
        buf.write("\u017d\3\2\2\2\u0eb2\u0eb0\3\2\2\2\u0eb3\u0eb6\5\u01a2")
        buf.write("\u00d2\2\u0eb4\u0eb6\7\u031b\2\2\u0eb5\u0eb3\3\2\2\2\u0eb5")
        buf.write("\u0eb4\3\2\2\2\u0eb6\u017f\3\2\2\2\u0eb7\u0eb8\t\n\2\2")
        buf.write("\u0eb8\u0181\3\2\2\2\u0eb9\u0eba\t8\2\2\u0eba\u0183\3")
        buf.write("\2\2\2\u0ebb\u0ebd\7\u00dd\2\2\u0ebc\u0ebb\3\2\2\2\u0ebc")
        buf.write("\u0ebd\3\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe\u0ebf\7\u00e0")
        buf.write("\2\2\u0ebf\u0185\3\2\2\2\u0ec0\u0ec8\5\u0184\u00c3\2\u0ec1")
        buf.write("\u0ec2\7Z\2\2\u0ec2\u0ec5\5\u00d2j\2\u0ec3\u0ec4\7\u017d")
        buf.write("\2\2\u0ec4\u0ec6\7\u0173\2\2\u0ec5\u0ec3\3\2\2\2\u0ec5")
        buf.write("\u0ec6\3\2\2\2\u0ec6\u0ec8\3\2\2\2\u0ec7\u0ec0\3\2\2\2")
        buf.write("\u0ec7\u0ec1\3\2\2\2\u0ec8\u0187\3\2\2\2\u0ec9\u0ecf\5")
        buf.write("\u0174\u00bb\2\u0eca\u0ecf\7\u0120\2\2\u0ecb\u0ecf\7\u00b2")
        buf.write("\2\2\u0ecc\u0ecf\7\u01a9\2\2\u0ecd\u0ecf\7\u01b6\2\2\u0ece")
        buf.write("\u0ec9\3\2\2\2\u0ece\u0eca\3\2\2\2\u0ece\u0ecb\3\2\2\2")
        buf.write("\u0ece\u0ecc\3\2\2\2\u0ece\u0ecd\3\2\2\2\u0ecf\u0189\3")
        buf.write("\2\2\2\u0ed0\u0ed1\7\34\2\2\u0ed1\u0ed2\7F\2\2\u0ed2\u0ed3")
        buf.write("\7\u02f2\2\2\u0ed3\u0ed4\7\u0336\2\2\u0ed4\u0ed5\7\u031b")
        buf.write("\2\2\u0ed5\u0ed6\7\u0337\2\2\u0ed6\u0ed7\7\u02f1\2\2\u0ed7")
        buf.write("\u0ed8\7\u0324\2\2\u0ed8\u0eda\5\\/\2\u0ed9\u0edb\7\u0339")
        buf.write("\2\2\u0eda\u0ed9\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u018b")
        buf.write("\3\2\2\2\u0edc\u0edd\7\34\2\2\u0edd\u0edf\7\u01e1\2\2")
        buf.write("\u0ede\u0ee0\7F\2\2\u0edf\u0ede\3\2\2\2\u0edf\u0ee0\3")
        buf.write("\2\2\2\u0ee0\u0ee1\3\2\2\2\u0ee1\u0ee2\7\u031b\2\2\u0ee2")
        buf.write("\u0ee3\7\u008c\2\2\u0ee3\u0ee4\7\u0139\2\2\u0ee4\u0ee5")
        buf.write("\5\u0190\u00c9\2\u0ee5\u0ee6\7\u015e\2\2\u0ee6\u0ee7\7")
        buf.write("\u0139\2\2\u0ee7\u0eea\5\u0190\u00c9\2\u0ee8\u0ee9\7\u0338")
        buf.write("\2\2\u0ee9\u0eeb\7\u0320\2\2\u0eea\u0ee8\3\2\2\2\u0eea")
        buf.write("\u0eeb\3\2\2\2\u0eeb\u0eec\3\2\2\2\u0eec\u0eed\7\u00e6")
        buf.write("\2\2\u0eed\u0eee\7D\2\2\u0eee\u0f05\5\u018e\u00c8\2\u0eef")
        buf.write("\u0ef6\7\u017d\2\2\u0ef0\u0ef1\t9\2\2\u0ef1\u0ef2\7\u0324")
        buf.write("\2\2\u0ef2\u0ef4\7\u031b\2\2\u0ef3\u0ef5\7\u0338\2\2\u0ef4")
        buf.write("\u0ef3\3\2\2\2\u0ef4\u0ef5\3\2\2\2\u0ef5\u0ef7\3\2\2\2")
        buf.write("\u0ef6\u0ef0\3\2\2\2\u0ef6\u0ef7\3\2\2\2\u0ef7\u0efe\3")
        buf.write("\2\2\2\u0ef8\u0ef9\7\u00b4\2\2\u0ef9\u0efa\7\u0324\2\2")
        buf.write("\u0efa\u0efc\t\2\2\2\u0efb\u0efd\7\u0338\2\2\u0efc\u0efb")
        buf.write("\3\2\2\2\u0efc\u0efd\3\2\2\2\u0efd\u0eff\3\2\2\2\u0efe")
        buf.write("\u0ef8\3\2\2\2\u0efe\u0eff\3\2\2\2\u0eff\u0f03\3\2\2\2")
        buf.write("\u0f00\u0f01\7\u01ef\2\2\u0f01\u0f02\7\u0324\2\2\u0f02")
        buf.write("\u0f04\t\n\2\2\u0f03\u0f00\3\2\2\2\u0f03\u0f04\3\2\2\2")
        buf.write("\u0f04\u0f06\3\2\2\2\u0f05\u0eef\3\2\2\2\u0f05\u0f06\3")
        buf.write("\2\2\2\u0f06\u0f08\3\2\2\2\u0f07\u0f09\7\u0339\2\2\u0f08")
        buf.write("\u0f07\3\2\2\2\u0f08\u0f09\3\2\2\2\u0f09\u018d\3\2\2\2")
        buf.write("\u0f0a\u0f0d\5\u01a2\u00d2\2\u0f0b\u0f0d\5\u00c8e\2\u0f0c")
        buf.write("\u0f0a\3\2\2\2\u0f0c\u0f0b\3\2\2\2\u0f0d\u018f\3\2\2\2")
        buf.write("\u0f0e\u0f11\5\u01a2\u00d2\2\u0f0f\u0f11\5\u00c8e\2\u0f10")
        buf.write("\u0f0e\3\2\2\2\u0f10\u0f0f\3\2\2\2\u0f11\u0191\3\2\2\2")
        buf.write("\u0f12\u0f13\7m\2\2\u0f13\u0f14\7F\2\2\u0f14\u0f16\7\u031b")
        buf.write("\2\2\u0f15\u0f17\7\u0339\2\2\u0f16\u0f15\3\2\2\2\u0f16")
        buf.write("\u0f17\3\2\2\2\u0f17\u0f24\3\2\2\2\u0f18\u0f1f\7\u017d")
        buf.write("\2\2\u0f19\u0f1a\7q\2\2\u0f1a\u0f1b\7\u0324\2\2\u0f1b")
        buf.write("\u0f1c\t\3\2\2\u0f1c\u0f1d\7\u01de\2\2\u0f1d\u0f1e\7\u0324")
        buf.write("\2\2\u0f1e\u0f20\t\3\2\2\u0f1f\u0f19\3\2\2\2\u0f1f\u0f20")
        buf.write("\3\2\2\2\u0f20\u0f22\3\2\2\2\u0f21\u0f23\7\u01b8\2\2\u0f22")
        buf.write("\u0f21\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u0f25\3\2\2\2")
        buf.write("\u0f24\u0f18\3\2\2\2\u0f24\u0f25\3\2\2\2\u0f25\u0193\3")
        buf.write("\2\2\2\u0f26\u0f28\7\u0178\2\2\u0f27\u0f26\3\2\2\2\u0f27")
        buf.write("\u0f28\3\2\2\2\u0f28\u0f29\3\2\2\2\u0f29\u0f2a\7\u0336")
        buf.write("\2\2\u0f2a\u0f2b\5\u0196\u00cc\2\u0f2b\u0f31\7\u0337\2")
        buf.write("\2\u0f2c\u0f2e\7\u0338\2\2\u0f2d\u0f2c\3\2\2\2\u0f2d\u0f2e")
        buf.write("\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f30\7\u02f1\2\2\u0f30")
        buf.write("\u0f32\5\\/\2\u0f31\u0f2d\3\2\2\2\u0f31\u0f32\3\2\2\2")
        buf.write("\u0f32\u0f34\3\2\2\2\u0f33\u0f35\7\u0339\2\2\u0f34\u0f33")
        buf.write("\3\2\2\2\u0f34\u0f35\3\2\2\2\u0f35\u0195\3\2\2\2\u0f36")
        buf.write("\u0f37\7\u008f\2\2\u0f37\u0f38\7F\2\2\u0f38\u0f39\7\u0093")
        buf.write("\2\2\u0f39\u0f3a\t\3\2\2\u0f3a\u0f3b\7\u008c\2\2\u0f3b")
        buf.write("\u0f3d\5\u0198\u00cd\2\u0f3c\u0f3e\7\u0339\2\2\u0f3d\u0f3c")
        buf.write("\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0197\3\2\2\2\u0f3f")
        buf.write("\u0f40\5\u01a2\u00d2\2\u0f40\u0f41\7\u0331\2\2\u0f41\u0f42")
        buf.write("\5\u01a2\u00d2\2\u0f42\u0f43\7\u0331\2\2\u0f43\u0f44\5")
        buf.write("\u01a2\u00d2\2\u0f44\u0f47\3\2\2\2\u0f45\u0f47\5\u01a2")
        buf.write("\u00d2\2\u0f46\u0f3f\3\2\2\2\u0f46\u0f45\3\2\2\2\u0f47")
        buf.write("\u0199\3\2\2\2\u0f48\u0f49\7\u02cd\2\2\u0f49\u0f4a\7\u00e6")
        buf.write("\2\2\u0f4a\u0f4b\7F\2\2\u0f4b\u0f4c\t\3\2\2\u0f4c\u0f4d")
        buf.write("\7\u0252\2\2\u0f4d\u0f4e\7\u02fc\2\2\u0f4e\u0f52\5\u00c8")
        buf.write("e\2\u0f4f\u0f50\7\u0336\2\2\u0f50\u0f51\t\3\2\2\u0f51")
        buf.write("\u0f53\7\u0337\2\2\u0f52\u0f4f\3\2\2\2\u0f52\u0f53\3\2")
        buf.write("\2\2\u0f53\u0f55\3\2\2\2\u0f54\u0f56\7\u0339\2\2\u0f55")
        buf.write("\u0f54\3\2\2\2\u0f55\u0f56\3\2\2\2\u0f56\u019b\3\2\2\2")
        buf.write("\u0f57\u0f59\5\u01a2\u00d2\2\u0f58\u0f5a\7\u0097\2\2\u0f59")
        buf.write("\u0f58\3\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0f62\3\2\2\2")
        buf.write("\u0f5b\u0f5c\7\u0336\2\2\u0f5c\u0f5f\t:\2\2\u0f5d\u0f5e")
        buf.write("\7\u0338\2\2\u0f5e\u0f60\7\u031c\2\2\u0f5f\u0f5d\3\2\2")
        buf.write("\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f61\3\2\2\2\u0f61\u0f63")
        buf.write("\7\u0337\2\2\u0f62\u0f5b\3\2\2\2\u0f62\u0f63\3\2\2\2\u0f63")
        buf.write("\u0f6d\3\2\2\2\u0f64\u0f66\7e\2\2\u0f65\u0f67\7\u00ff")
        buf.write("\2\2\u0f66\u0f65\3\2\2\2\u0f66\u0f67\3\2\2\2\u0f67\u0f6d")
        buf.write("\3\2\2\2\u0f68\u0f6d\7\u0226\2\2\u0f69\u0f6d\7\u02f3\2")
        buf.write("\2\u0f6a\u0f6d\7\u02d8\2\2\u0f6b\u0f6d\7\u01a7\2\2\u0f6c")
        buf.write("\u0f57\3\2\2\2\u0f6c\u0f64\3\2\2\2\u0f6c\u0f68\3\2\2\2")
        buf.write("\u0f6c\u0f69\3\2\2\2\u0f6c\u0f6a\3\2\2\2\u0f6c\u0f6b\3")
        buf.write("\2\2\2\u0f6d\u019d\3\2\2\2\u0f6e\u0f7e\7\u0320\2\2\u0f6f")
        buf.write("\u0f7e\7\u0321\2\2\u0f70\u0f72\5\u01a0\u00d1\2\u0f71\u0f70")
        buf.write("\3\2\2\2\u0f71\u0f72\3\2\2\2\u0f72\u0f73\3\2\2\2\u0f73")
        buf.write("\u0f7e\7\u031c\2\2\u0f74\u0f76\5\u01a0\u00d1\2\u0f75\u0f74")
        buf.write("\3\2\2\2\u0f75\u0f76\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77")
        buf.write("\u0f7e\t#\2\2\u0f78\u0f7a\5\u01a0\u00d1\2\u0f79\u0f78")
        buf.write("\3\2\2\2\u0f79\u0f7a\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b")
        buf.write("\u0f7c\7\u0335\2\2\u0f7c\u0f7e\t;\2\2\u0f7d\u0f6e\3\2")
        buf.write("\2\2\u0f7d\u0f6f\3\2\2\2\u0f7d\u0f71\3\2\2\2\u0f7d\u0f75")
        buf.write("\3\2\2\2\u0f7d\u0f79\3\2\2\2\u0f7e\u019f\3\2\2\2\u0f7f")
        buf.write("\u0f80\t \2\2\u0f80\u01a1\3\2\2\2\u0f81\u0f85\5\u01a4")
        buf.write("\u00d3\2\u0f82\u0f85\7\u0318\2\2\u0f83\u0f85\7\u031a\2")
        buf.write("\2\u0f84\u0f81\3\2\2\2\u0f84\u0f82\3\2\2\2\u0f84\u0f83")
        buf.write("\3\2\2\2\u0f85\u01a3\3\2\2\2\u0f86\u0f87\t<\2\2\u0f87")
        buf.write("\u01a5\3\2\2\2\u0f88\u0f98\7\u0324\2\2\u0f89\u0f98\7\u0325")
        buf.write("\2\2\u0f8a\u0f98\7\u0326\2\2\u0f8b\u0f8c\7\u0326\2\2\u0f8c")
        buf.write("\u0f98\7\u0324\2\2\u0f8d\u0f8e\7\u0325\2\2\u0f8e\u0f98")
        buf.write("\7\u0324\2\2\u0f8f\u0f90\7\u0326\2\2\u0f90\u0f98\7\u0325")
        buf.write("\2\2\u0f91\u0f92\7\u0327\2\2\u0f92\u0f98\7\u0324\2\2\u0f93")
        buf.write("\u0f94\7\u0327\2\2\u0f94\u0f98\7\u0325\2\2\u0f95\u0f96")
        buf.write("\7\u0327\2\2\u0f96\u0f98\7\u0326\2\2\u0f97\u0f88\3\2\2")
        buf.write("\2\u0f97\u0f89\3\2\2\2\u0f97\u0f8a\3\2\2\2\u0f97\u0f8b")
        buf.write("\3\2\2\2\u0f97\u0f8d\3\2\2\2\u0f97\u0f8f\3\2\2\2\u0f97")
        buf.write("\u0f91\3\2\2\2\u0f97\u0f93\3\2\2\2\u0f97\u0f95\3\2\2\2")
        buf.write("\u0f98\u01a7\3\2\2\2\u0f99\u0f9a\t=\2\2\u0f9a\u01a9\3")
        buf.write("\2\2\2\u0247\u01ad\u01b6\u01ba\u01c0\u01c3\u01c7\u01cb")
        buf.write("\u01d1\u01d8\u01e6\u01ea\u01ed\u01f1\u01f5\u01f9\u01fe")
        buf.write("\u0203\u0205\u0209\u020c\u0213\u0216\u021f\u0222\u022d")
        buf.write("\u0230\u0235\u023a\u023d\u0242\u0246\u0249\u024d\u0250")
        buf.write("\u0253\u025a\u025e\u0260\u0265\u026b\u026f\u027c\u0282")
        buf.write("\u0285\u028e\u0291\u02a2\u02a8\u02ad\u02b0\u02b3\u02ba")
        buf.write("\u02be\u02c5\u02cc\u02d2\u02df\u02e3\u02e8\u02f2\u02fb")
        buf.write("\u02ff\u0305\u0308\u030d\u0314\u0316\u031c\u031e\u0326")
        buf.write("\u0328\u032e\u0330\u0336\u0338\u033f\u0342\u0344\u0347")
        buf.write("\u034b\u034d\u0356\u035c\u0360\u0368\u036f\u0375\u0377")
        buf.write("\u0382\u0387\u038d\u0391\u039b\u03a3\u03af\u03b2\u03ba")
        buf.write("\u03bc\u03bf\u03c3\u03c6\u03d0\u03d6\u03de\u03e2\u03e6")
        buf.write("\u03ef\u03f5\u03f9\u03fc\u0407\u040b\u0412\u0417\u041a")
        buf.write("\u0422\u0426\u0429\u042d\u0430\u0434\u043b\u043f\u0441")
        buf.write("\u0443\u0446\u0449\u044c\u0452\u0455\u045d\u045f\u0462")
        buf.write("\u0466\u0469\u046f\u0472\u0476\u0479\u047c\u0483\u0486")
        buf.write("\u048d\u0493\u0497\u04a1\u04a4\u04a7\u04ab\u04ae\u04b1")
        buf.write("\u04b4\u04b8\u04bb\u04c3\u04c5\u04c9\u04cc\u04d4\u04d8")
        buf.write("\u04dc\u04e3\u04e7\u04e9\u04eb\u04ee\u04f1\u04f4\u04fc")
        buf.write("\u0502\u0508\u050a\u050e\u0511\u0516\u051b\u051e\u0522")
        buf.write("\u0533\u0537\u053f\u0543\u054b\u054f\u0554\u0558\u055f")
        buf.write("\u0565\u0567\u056b\u056f\u0573\u0576\u057a\u0580\u0584")
        buf.write("\u0586\u058d\u0591\u0598\u059b\u059e\u05a6\u05ab\u05b0")
        buf.write("\u05b3\u05b5\u05b9\u05bd\u05c0\u05c4\u05ca\u05cf\u05d6")
        buf.write("\u05d8\u05dc\u05e4\u05ea\u05ee\u05f1\u05fa\u05fd\u0603")
        buf.write("\u060a\u060f\u0617\u061c\u0628\u062a\u0635\u063c\u0646")
        buf.write("\u065d\u066a\u067a\u067f\u0686\u0689\u068d\u068f\u06a0")
        buf.write("\u06af\u06b7\u06c0\u06c8\u06d1\u06dc\u06e0\u06e2\u06e4")
        buf.write("\u06ea\u06ef\u06f6\u0703\u0705\u0707\u070a\u070d\u0714")
        buf.write("\u0717\u071d\u0722\u0724\u0727\u072d\u0735\u0737\u073a")
        buf.write("\u073e\u0741\u074b\u074e\u0752\u0755\u075b\u075e\u0760")
        buf.write("\u0764\u0769\u076d\u0775\u077a\u0784\u078f\u0794\u079a")
        buf.write("\u07a0\u07a4\u07a7\u07ab\u07af\u07b7\u07bc\u07be\u07c1")
        buf.write("\u07c6\u07cf\u07d3\u07d8\u07db\u07de\u07e4\u07ec\u07f4")
        buf.write("\u07f7\u07fa\u07fe\u0803\u0806\u080c\u0810\u0816\u081e")
        buf.write("\u0824\u0826\u0829\u0838\u083b\u083e\u0840\u084b\u0856")
        buf.write("\u085f\u0869\u0873\u0875\u0877\u087a\u087d\u0888\u088a")
        buf.write("\u088c\u088f\u0894\u089f\u08a8\u08ab\u08ae\u08b7\u08ba")
        buf.write("\u08bd\u08c4\u08c7\u08d6\u08d9\u08e0\u08f0\u08f4\u08fe")
        buf.write("\u0911\u0913\u091a\u0921\u0925\u092d\u0931\u0935\u093b")
        buf.write("\u0945\u094f\u0956\u095d\u0966\u096d\u0974\u097d\u0981")
        buf.write("\u098b\u0992\u099a\u09a2\u09a6\u09bc\u09c5\u09cb\u09d1")
        buf.write("\u09d7\u09e1\u09e8\u09ed\u09f2\u09f6\u09fd\u0a01\u0a04")
        buf.write("\u0a09\u0a0d\u0a11\u0a16\u0a1d\u0a20\u0a24\u0a29\u0a2d")
        buf.write("\u0a36\u0a3d\u0a46\u0a52\u0a54\u0a5e\u0a61\u0a66\u0a6f")
        buf.write("\u0a71\u0a73\u0a78\u0a80\u0a85\u0a8d\u0a92\u0a98\u0aa2")
        buf.write("\u0aa4\u0aa8\u0aac\u0aae\u0ab5\u0ac0\u0ae2\u0af2\u0af9")
        buf.write("\u0afb\u0b02\u0b0b\u0b15\u0b1a\u0b21\u0b24\u0b2b\u0b32")
        buf.write("\u0b35\u0b37\u0b3f\u0b41\u0b47\u0b4e\u0b56\u0b5c\u0b61")
        buf.write("\u0b65\u0b69\u0b6e\u0b70\u0b77\u0b7b\u0b82\u0b84\u0b8b")
        buf.write("\u0b8d\u0b96\u0b9e\u0ba5\u0bab\u0bb6\u0bba\u0bbc\u0bbf")
        buf.write("\u0bd7\u0bf0\u0bf5\u0c09\u0c0d\u0c11\u0c21\u0c29\u0c3f")
        buf.write("\u0c79\u0c7d\u0ca7\u0cae\u0cb4\u0cc1\u0cd0\u0cdb\u0ce0")
        buf.write("\u0cea\u0cf3\u0d15\u0d1a\u0d20\u0d23\u0d28\u0d2d\u0d36")
        buf.write("\u0d3b\u0d41\u0d4a\u0d54\u0d57\u0d65\u0d6b\u0d73\u0d77")
        buf.write("\u0d7f\u0d86\u0d93\u0d9b\u0da8\u0daf\u0db5\u0db9\u0dca")
        buf.write("\u0dd9\u0ddb\u0de0\u0de3\u0dec\u0def\u0df2\u0dff\u0e03")
        buf.write("\u0e0b\u0e11\u0e1d\u0e24\u0e2b\u0e32\u0e38\u0e3f\u0e42")
        buf.write("\u0e47\u0e4f\u0e53\u0e56\u0e5e\u0e62\u0e65\u0e69\u0e6e")
        buf.write("\u0e74\u0e7a\u0e80\u0e86\u0e8c\u0e92\u0e98\u0e9b\u0e9f")
        buf.write("\u0ea4\u0ea8\u0eb0\u0eb5\u0ebc\u0ec5\u0ec7\u0ece\u0eda")
        buf.write("\u0edf\u0eea\u0ef4\u0ef6\u0efc\u0efe\u0f03\u0f05\u0f08")
        buf.write("\u0f0c\u0f10\u0f16\u0f1f\u0f22\u0f24\u0f27\u0f2d\u0f31")
        buf.write("\u0f34\u0f3d\u0f46\u0f52\u0f55\u0f59\u0f5f\u0f62\u0f66")
        buf.write("\u0f6c\u0f71\u0f75\u0f79\u0f7d\u0f84\u0f97")
        return buf.getvalue()


class TSqlParser ( Parser ):

    grammarFileName = "TSql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\\\'", "'//'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'BINARY BASE64'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'$ACTION'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'''", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", 
                     "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'*'", 
                     "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", 
                      "ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_SINGLE_EVENT_LOSS", 
                      "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", "APPLICATION", 
                      "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", 
                      "AUTHORIZATION", "AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", 
                      "AUTOMATIC", "AVAILABILITY_MODE", "BACKSLASH", "BACKUP", 
                      "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE", 
                      "BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", 
                      "BUFFERCOUNT", "BULK", "BY", "CACHE", "CALLED", "CASCADE", 
                      "CASE", "CERTIFICATE", "CHANGETABLE", "CHANGES", "CHECK", 
                      "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
                      "CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", 
                      "COALESCE", "COLLATE", "COLUMN", "COMPRESSION", "COMMIT", 
                      "COMPUTE", "CONFIGURATION", "CONSTRAINT", "CONTAINMENT", 
                      "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", 
                      "CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", 
                      "CONVERSATION", "CONVERT", "COPY_ONLY", "CREATE", 
                      "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", 
                      "DATA", "DATA_COMPRESSION", "DATA_SOURCE", "DATABASE", 
                      "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", 
                      "DEFAULT", "DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", 
                      "DENY", "DESC", "DIAGNOSTICS", "DIFFERENTIAL", "DISK", 
                      "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
                      "DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", 
                      "ELSE", "ENABLED", "END", "ENDPOINT", "ERRLVL", "ESCAPE", 
                      "ERROR", "EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", 
                      "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
                      "EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", 
                      "FAILOVER", "FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", 
                      "FILE", "FILENAME", "FILLFACTOR", "FILE_SNAPSHOT", 
                      "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
                      "FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", 
                      "FUNCTION", "GET", "GOTO", "GOVERNOR", "GRANT", "GROUP", 
                      "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", "IDENTITY", 
                      "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IIF", "IN", 
                      "INCLUDE", "INCREMENT", "INDEX", "INFINITE", "INIT", 
                      "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", 
                      "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", 
                      "KERBEROS", "KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", 
                      "KILL", "LANGUAGE", "LEFT", "LIBRARY", "LIFETIME", 
                      "LIKE", "LINENO", "LINUX", "LISTENER_IP", "LISTENER_PORT", 
                      "LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", 
                      "MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", 
                      "MAX_EVENT_SIZE", "MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", 
                      "MEDIADESCRIPTION", "MEDIANAME", "MEMBER", "MEMORY_PARTITION_MODE", 
                      "MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
                      "MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", 
                      "NOCHECK", "NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", 
                      "NOREWIND", "NOSKIP", "NOUNLOAD", "NO_CHECKSUM", "NO_COMPRESSION", 
                      "NO_EVENT_LOSS", "NOT", "NOTIFICATION", "NTLM", "NULL", 
                      "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", 
                      "ON", "ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", 
                      "OPENROWSET", "OPENXML", "OPTION", "OR", "ORDER", 
                      "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
                      "PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", 
                      "PER_DB", "PER_NODE", "PIVOT", "PLAN", "PLATFORM", 
                      "POLICY", "PRECISION", "PREDICATE", "PRIMARY", "PRINT", 
                      "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", 
                      "K_R", "RAISERROR", "RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", 
                      "RECONFIGURE", "REFERENCES", "REGENERATE", "RELATED_CONVERSATION", 
                      "RELATED_CONVERSATION_GROUP", "REPLICATION", "REQUIRED", 
                      "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", 
                      "RETAINDAYS", "RETURN", "RETURNS", "REVERT", "REVOKE", 
                      "REWIND", "RIGHT", "ROLLBACK", "ROLE", "ROWCOUNT", 
                      "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
                      "RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", 
                      "SCHEMA", "SCHEME", "SECURITY", "SECURITYAUDIT", "SELECT", 
                      "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
                      "SEMANTICSIMILARITYTABLE", "SEQUENCE", "SERVER", "SERVICE", 
                      "SERVICE_BROKER", "SERVICE_NAME", "SESSION", "SESSION_USER", 
                      "SET", "SETUSER", "SHUTDOWN", "SID", "SKIP_KEYWORD", 
                      "SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", "SPLIT", 
                      "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", 
                      "STATISTICS", "STATE", "STATS", "START", "STARTED", 
                      "STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", 
                      "SUPPORTED", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
                      "TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", "TO", 
                      "TOP", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSFER", 
                      "TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", "UNION", 
                      "UNIQUE", "UNLOCK", "UNPIVOT", "UNSAFE", "UPDATE", 
                      "UPDATETEXT", "URL", "USE", "USED", "USER", "VALUES", 
                      "VARYING", "VERBOSELOGGING", "VIEW", "VISIBILITY", 
                      "WAITFOR", "WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", 
                      "WITHIN", "WITHOUT", "WITNESS", "WRITETEXT", "ABSOLUTE", 
                      "ACCENT_SENSITIVITY", "ACTION", "ACTIVATION", "ACTIVE", 
                      "ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", 
                      "AFTER", "AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
                      "ALLOW_SNAPSHOT_ISOLATION", "ALLOWED", "ANSI_NULL_DEFAULT", 
                      "ANSI_NULLS", "ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", 
                      "APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", 
                      "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
                      "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
                      "AVAILABILITY", "AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", 
                      "BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", "BINDING", 
                      "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", 
                      "CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", 
                      "CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", 
                      "CHECKSUM_AGG", "CLEANUP", "COLLECTION", "COLUMN_MASTER_KEY", 
                      "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
                      "CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", 
                      "COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", 
                      "CREDENTIAL", "CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", 
                      "CURSOR_DEFAULT", "DATE_CORRELATION_OPTIMIZATION", 
                      "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DAYS", 
                      "DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", 
                      "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DELAY", 
                      "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DEPENDENTS", 
                      "DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", 
                      "DISABLE", "DISABLE_BROKER", "DISABLED", "DISK_DRIVE", 
                      "DOCUMENT", "DYNAMIC", "ELEMENTS", "EMERGENCY", "EMPTY", 
                      "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", 
                      "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", 
                      "EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", 
                      "FAIL_OPERATION", "FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", 
                      "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
                      "FILEPATH", "FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", 
                      "FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
                      "FORCED", "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", 
                      "GB", "GETDATE", "GETUTCDATE", "GLOBAL", "GO", "GROUP_MAX_REQUESTS", 
                      "GROUPING", "GROUPING_ID", "HADR", "HASH", "HEALTH_CHECK_TIMEOUT", 
                      "HIGH", "HONOR_BROKER_PRIORITY", "HOURS", "IDENTITY_VALUE", 
                      "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
                      "IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", 
                      "INCREMENTAL", "INITIATOR", "INPUT", "INSENSITIVE", 
                      "INSERTED", "INT", "IP", "ISOLATION", "JSON", "KB", 
                      "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", 
                      "LAG", "LAST", "LAST_VALUE", "LEAD", "LEVEL", "LIST", 
                      "LISTENER", "LISTENER_URL", "LOB_COMPACTION", "LOCAL", 
                      "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", 
                      "LOW", "MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", 
                      "MAX_DOP", "MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", 
                      "MAX_PROCESSES", "MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", 
                      "MAXDOP", "MAXRECURSION", "MAXSIZE", "MB", "MEDIUM", 
                      "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
                      "MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", 
                      "MINUTES", "MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", 
                      "MODE", "MODIFY", "MOVE", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", "NEXT", 
                      "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", 
                      "NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", 
                      "NORECOVERY", "NOWAIT", "NTILE", "NUMANODE", "NUMBER", 
                      "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
                      "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", 
                      "OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", 
                      "PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", "PARTITIONS", 
                      "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", "POOL", 
                      "PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", 
                      "PRIORITY_LEVEL", "PRIVATE", "PRIVATE_KEY", "PRIVILEGES", 
                      "PROCEDURE_NAME", "PROPERTY", "PROVIDER", "PROVIDER_KEY_NAME", 
                      "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
                      "RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", 
                      "READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", 
                      "READONLY", "REBUILD", "RECEIVE", "RECOMPILE", "RECOVERY", 
                      "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
                      "REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
                      "REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
                      "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", 
                      "RESOURCE", "RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", 
                      "RETENTION", "ROBUST", "ROOT", "ROUTE", "ROW", "ROW_NUMBER", 
                      "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", "SCOPED", 
                      "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
                      "SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY_LOG", 
                      "SEEDING_MODE", "SELF", "SEMI_SENSITIVE", "SEND", 
                      "SENT", "SERIALIZABLE", "SESSION_TIMEOUT", "SETERROR", 
                      "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", 
                      "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "STANDBY", "START_DATE", "STATIC", "STATS_STREAM", 
                      "STATUS", "STDEV", "STDEVP", "STOPLIST", "STUFF", 
                      "SUBJECT", "SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", 
                      "SYNONYM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
                      "THROW", "TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", 
                      "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", "TRIPLE_DES", 
                      "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
                      "TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", 
                      "UNKNOWN", "UNLIMITED", "USING", "VALID_XML", "VALIDATION", 
                      "VALUE", "VAR", "VARP", "VIEW_METADATA", "VIEWS", 
                      "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", 
                      "WORK", "WORKLOAD", "XML", "XMLDATA", "XMLNAMESPACES", 
                      "XMLSCHEMA", "XSINIL", "DOLLAR_ACTION", "SPACE", "COMMENT", 
                      "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", 
                      "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "IDENTIFIER", 
                      "QUOTED_URL", "QUOTED_HOST_AND_PORT", "STRING", "BINARY", 
                      "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
                      "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
                      "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", 
                      "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", 
                      "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", 
                      "BIT_OR", "BIT_AND", "BIT_XOR", "IPV4_OCTECT" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_cfl_statement = 5
    RULE_block_statement = 6
    RULE_break_statement = 7
    RULE_continue_statement = 8
    RULE_goto_statement = 9
    RULE_return_statement = 10
    RULE_if_statement = 11
    RULE_throw_statement = 12
    RULE_throw_error_number = 13
    RULE_throw_message = 14
    RULE_throw_state = 15
    RULE_try_catch_statement = 16
    RULE_waitfor_statement = 17
    RULE_while_statement = 18
    RULE_print_statement = 19
    RULE_raiseerror_statement = 20
    RULE_empty_statement = 21
    RULE_another_statement = 22
    RULE_file_path = 23
    RULE_file_directory_path_separator = 24
    RULE_event_session_predicate_expression = 25
    RULE_event_session_predicate_factor = 26
    RULE_event_session_predicate_leaf = 27
    RULE_create_queue = 28
    RULE_queue_settings = 29
    RULE_alter_queue = 30
    RULE_queue_action = 31
    RULE_queue_rebuild_options = 32
    RULE_create_contract = 33
    RULE_conversation_statement = 34
    RULE_message_statement = 35
    RULE_merge_statement = 36
    RULE_merge_matched = 37
    RULE_merge_not_matched = 38
    RULE_delete_statement = 39
    RULE_delete_statement_from = 40
    RULE_insert_statement = 41
    RULE_insert_statement_value = 42
    RULE_receive_statement = 43
    RULE_select_statement = 44
    RULE_time = 45
    RULE_update_statement = 46
    RULE_output_clause = 47
    RULE_output_dml_list_elem = 48
    RULE_output_column_name = 49
    RULE_rowset_function_limited = 50
    RULE_openquery = 51
    RULE_opendatasource = 52
    RULE_declare_statement = 53
    RULE_cursor_statement = 54
    RULE_execute_statement = 55
    RULE_execute_body = 56
    RULE_execute_statement_arg = 57
    RULE_execute_var_string = 58
    RULE_security_statement = 59
    RULE_create_certificate = 60
    RULE_existing_keys = 61
    RULE_private_key_options = 62
    RULE_generate_new_keys = 63
    RULE_date_options = 64
    RULE_open_key = 65
    RULE_close_key = 66
    RULE_create_key = 67
    RULE_key_options = 68
    RULE_algorithm = 69
    RULE_encryption_mechanism = 70
    RULE_decryption_mechanism = 71
    RULE_grant_permission = 72
    RULE_set_statement = 73
    RULE_transaction_statement = 74
    RULE_go_statement = 75
    RULE_use_statement = 76
    RULE_setuser_statement = 77
    RULE_execute_clause = 78
    RULE_declare_local = 79
    RULE_table_type_definition = 80
    RULE_xml_type_definition = 81
    RULE_xml_schema_collection = 82
    RULE_column_def_table_constraints = 83
    RULE_column_def_table_constraint = 84
    RULE_column_definition = 85
    RULE_materialized_column_definition = 86
    RULE_column_constraint = 87
    RULE_table_constraint = 88
    RULE_on_delete = 89
    RULE_on_update = 90
    RULE_index_options = 91
    RULE_index_option = 92
    RULE_declare_cursor = 93
    RULE_declare_set_cursor_common = 94
    RULE_declare_set_cursor_common_partial = 95
    RULE_fetch_cursor = 96
    RULE_set_special = 97
    RULE_constant_LOCAL_ID = 98
    RULE_expression = 99
    RULE_primitive_expression = 100
    RULE_case_expression = 101
    RULE_unary_operator_expression = 102
    RULE_bracket_expression = 103
    RULE_constant_expression = 104
    RULE_subquery = 105
    RULE_with_expression = 106
    RULE_common_table_expression = 107
    RULE_update_elem = 108
    RULE_search_condition_list = 109
    RULE_search_condition = 110
    RULE_search_condition_and = 111
    RULE_search_condition_not = 112
    RULE_predicate = 113
    RULE_query_expression = 114
    RULE_sql_union = 115
    RULE_query_specification = 116
    RULE_top_clause = 117
    RULE_top_percent = 118
    RULE_top_count = 119
    RULE_order_by_clause = 120
    RULE_for_clause = 121
    RULE_xml_common_directives = 122
    RULE_order_by_expression = 123
    RULE_group_by_item = 124
    RULE_option_clause = 125
    RULE_option = 126
    RULE_optimize_for_arg = 127
    RULE_select_list = 128
    RULE_udt_method_arguments = 129
    RULE_asterisk = 130
    RULE_column_elem = 131
    RULE_udt_elem = 132
    RULE_expression_elem = 133
    RULE_select_list_elem = 134
    RULE_table_sources = 135
    RULE_table_source = 136
    RULE_table_source_item_joined = 137
    RULE_table_source_item = 138
    RULE_open_xml = 139
    RULE_schema_declaration = 140
    RULE_column_declaration = 141
    RULE_change_table = 142
    RULE_join_part = 143
    RULE_pivot_clause = 144
    RULE_unpivot_clause = 145
    RULE_full_column_name_list = 146
    RULE_table_name_with_hint = 147
    RULE_rowset_function = 148
    RULE_bulk_option = 149
    RULE_derived_table = 150
    RULE_function_call = 151
    RULE_xml_data_type_methods = 152
    RULE_value_method = 153
    RULE_query_method = 154
    RULE_exist_method = 155
    RULE_modify_method = 156
    RULE_nodes_method = 157
    RULE_switch_section = 158
    RULE_switch_search_condition_section = 159
    RULE_as_column_alias = 160
    RULE_as_table_alias = 161
    RULE_table_alias = 162
    RULE_with_table_hints = 163
    RULE_insert_with_table_hints = 164
    RULE_table_hint = 165
    RULE_index_value = 166
    RULE_column_alias_list = 167
    RULE_column_alias = 168
    RULE_table_value_constructor = 169
    RULE_expression_list = 170
    RULE_ranking_windowed_function = 171
    RULE_aggregate_windowed_function = 172
    RULE_analytic_windowed_function = 173
    RULE_all_distinct_expression = 174
    RULE_over_clause = 175
    RULE_row_or_range_clause = 176
    RULE_window_frame_extent = 177
    RULE_window_frame_bound = 178
    RULE_window_frame_preceding = 179
    RULE_window_frame_following = 180
    RULE_full_table_name = 181
    RULE_table_name = 182
    RULE_func_proc_name_schema = 183
    RULE_func_proc_name_database_schema = 184
    RULE_func_proc_name_server_database_schema = 185
    RULE_ddl_object = 186
    RULE_full_column_name = 187
    RULE_column_name_list_with_order = 188
    RULE_column_name_list = 189
    RULE_cursor_name = 190
    RULE_on_off = 191
    RULE_clustered = 192
    RULE_null_notnull = 193
    RULE_null_or_default = 194
    RULE_scalar_function_name = 195
    RULE_begin_conversation_timer = 196
    RULE_begin_conversation_dialog = 197
    RULE_contract_name = 198
    RULE_service_name = 199
    RULE_end_conversation = 200
    RULE_waitfor_conversation = 201
    RULE_get_conversation = 202
    RULE_queue_id = 203
    RULE_send_conversation = 204
    RULE_data_type = 205
    RULE_constant = 206
    RULE_sign = 207
    RULE_identifier = 208
    RULE_simple_id = 209
    RULE_comparison_operator = 210
    RULE_assignment_operator = 211

    ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "cfl_statement", "block_statement", "break_statement", 
                   "continue_statement", "goto_statement", "return_statement", 
                   "if_statement", "throw_statement", "throw_error_number", 
                   "throw_message", "throw_state", "try_catch_statement", 
                   "waitfor_statement", "while_statement", "print_statement", 
                   "raiseerror_statement", "empty_statement", "another_statement", 
                   "file_path", "file_directory_path_separator", "event_session_predicate_expression", 
                   "event_session_predicate_factor", "event_session_predicate_leaf", 
                   "create_queue", "queue_settings", "alter_queue", "queue_action", 
                   "queue_rebuild_options", "create_contract", "conversation_statement", 
                   "message_statement", "merge_statement", "merge_matched", 
                   "merge_not_matched", "delete_statement", "delete_statement_from", 
                   "insert_statement", "insert_statement_value", "receive_statement", 
                   "select_statement", "time", "update_statement", "output_clause", 
                   "output_dml_list_elem", "output_column_name", "rowset_function_limited", 
                   "openquery", "opendatasource", "declare_statement", "cursor_statement", 
                   "execute_statement", "execute_body", "execute_statement_arg", 
                   "execute_var_string", "security_statement", "create_certificate", 
                   "existing_keys", "private_key_options", "generate_new_keys", 
                   "date_options", "open_key", "close_key", "create_key", 
                   "key_options", "algorithm", "encryption_mechanism", "decryption_mechanism", 
                   "grant_permission", "set_statement", "transaction_statement", 
                   "go_statement", "use_statement", "setuser_statement", 
                   "execute_clause", "declare_local", "table_type_definition", 
                   "xml_type_definition", "xml_schema_collection", "column_def_table_constraints", 
                   "column_def_table_constraint", "column_definition", "materialized_column_definition", 
                   "column_constraint", "table_constraint", "on_delete", 
                   "on_update", "index_options", "index_option", "declare_cursor", 
                   "declare_set_cursor_common", "declare_set_cursor_common_partial", 
                   "fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", 
                   "primitive_expression", "case_expression", "unary_operator_expression", 
                   "bracket_expression", "constant_expression", "subquery", 
                   "with_expression", "common_table_expression", "update_elem", 
                   "search_condition_list", "search_condition", "search_condition_and", 
                   "search_condition_not", "predicate", "query_expression", 
                   "sql_union", "query_specification", "top_clause", "top_percent", 
                   "top_count", "order_by_clause", "for_clause", "xml_common_directives", 
                   "order_by_expression", "group_by_item", "option_clause", 
                   "option", "optimize_for_arg", "select_list", "udt_method_arguments", 
                   "asterisk", "column_elem", "udt_elem", "expression_elem", 
                   "select_list_elem", "table_sources", "table_source", 
                   "table_source_item_joined", "table_source_item", "open_xml", 
                   "schema_declaration", "column_declaration", "change_table", 
                   "join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
                   "table_name_with_hint", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "xml_data_type_methods", 
                   "value_method", "query_method", "exist_method", "modify_method", 
                   "nodes_method", "switch_section", "switch_search_condition_section", 
                   "as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
                   "insert_with_table_hints", "table_hint", "index_value", 
                   "column_alias_list", "column_alias", "table_value_constructor", 
                   "expression_list", "ranking_windowed_function", "aggregate_windowed_function", 
                   "analytic_windowed_function", "all_distinct_expression", 
                   "over_clause", "row_or_range_clause", "window_frame_extent", 
                   "window_frame_bound", "window_frame_preceding", "window_frame_following", 
                   "full_table_name", "table_name", "func_proc_name_schema", 
                   "func_proc_name_database_schema", "func_proc_name_server_database_schema", 
                   "ddl_object", "full_column_name", "column_name_list_with_order", 
                   "column_name_list", "cursor_name", "on_off", "clustered", 
                   "null_notnull", "null_or_default", "scalar_function_name", 
                   "begin_conversation_timer", "begin_conversation_dialog", 
                   "contract_name", "service_name", "end_conversation", 
                   "waitfor_conversation", "get_conversation", "queue_id", 
                   "send_conversation", "data_type", "constant", "sign", 
                   "identifier", "simple_id", "comparison_operator", "assignment_operator" ]

    EOF = Token.EOF
    ABSENT=1
    ADD=2
    AES=3
    ALL=4
    ALLOW_CONNECTIONS=5
    ALLOW_MULTIPLE_EVENT_LOSS=6
    ALLOW_SINGLE_EVENT_LOSS=7
    ALTER=8
    AND=9
    ANONYMOUS=10
    ANY=11
    APPEND=12
    APPLICATION=13
    AS=14
    ASC=15
    ASYMMETRIC=16
    ASYNCHRONOUS_COMMIT=17
    AUTHORIZATION=18
    AUTHENTICATION=19
    AUTOMATED_BACKUP_PREFERENCE=20
    AUTOMATIC=21
    AVAILABILITY_MODE=22
    BACKSLASH=23
    BACKUP=24
    BEFORE=25
    BEGIN=26
    BETWEEN=27
    BLOCK=28
    BLOCKSIZE=29
    BLOCKING_HIERARCHY=30
    BREAK=31
    BROWSE=32
    BUFFER=33
    BUFFERCOUNT=34
    BULK=35
    BY=36
    CACHE=37
    CALLED=38
    CASCADE=39
    CASE=40
    CERTIFICATE=41
    CHANGETABLE=42
    CHANGES=43
    CHECK=44
    CHECKPOINT=45
    CHECK_POLICY=46
    CHECK_EXPIRATION=47
    CLASSIFIER_FUNCTION=48
    CLOSE=49
    CLUSTER=50
    CLUSTERED=51
    COALESCE=52
    COLLATE=53
    COLUMN=54
    COMPRESSION=55
    COMMIT=56
    COMPUTE=57
    CONFIGURATION=58
    CONSTRAINT=59
    CONTAINMENT=60
    CONTAINS=61
    CONTAINSTABLE=62
    CONTEXT=63
    CONTINUE=64
    CONTINUE_AFTER_ERROR=65
    CONTRACT=66
    CONTRACT_NAME=67
    CONVERSATION=68
    CONVERT=69
    COPY_ONLY=70
    CREATE=71
    CROSS=72
    CURRENT=73
    CURRENT_DATE=74
    CURRENT_TIME=75
    CURRENT_TIMESTAMP=76
    CURRENT_USER=77
    CURSOR=78
    CYCLE=79
    DATA=80
    DATA_COMPRESSION=81
    DATA_SOURCE=82
    DATABASE=83
    DATABASE_MIRRORING=84
    DBCC=85
    DEALLOCATE=86
    DECLARE=87
    DEFAULT=88
    DEFAULT_DATABASE=89
    DEFAULT_SCHEMA=90
    DELETE=91
    DENY=92
    DESC=93
    DIAGNOSTICS=94
    DIFFERENTIAL=95
    DISK=96
    DISTINCT=97
    DISTRIBUTED=98
    DOUBLE=99
    DOUBLE_BACK_SLASH=100
    DOUBLE_FORWARD_SLASH=101
    DROP=102
    DTC_SUPPORT=103
    DUMP=104
    ELSE=105
    ENABLED=106
    END=107
    ENDPOINT=108
    ERRLVL=109
    ESCAPE=110
    ERROR=111
    EVENT=112
    EVENTDATA=113
    EVENT_RETENTION_MODE=114
    EXCEPT=115
    EXECUTABLE_FILE=116
    EXECUTE=117
    EXISTS=118
    EXPIREDATE=119
    EXIT=120
    EXTENSION=121
    EXTERNAL=122
    EXTERNAL_ACCESS=123
    FAILOVER=124
    FAILURECONDITIONLEVEL=125
    FAN_IN=126
    FETCH=127
    FILE=128
    FILENAME=129
    FILLFACTOR=130
    FILE_SNAPSHOT=131
    FOR=132
    FORCESEEK=133
    FORCE_SERVICE_ALLOW_DATA_LOSS=134
    FOREIGN=135
    FREETEXT=136
    FREETEXTTABLE=137
    FROM=138
    FULL=139
    FUNCTION=140
    GET=141
    GOTO=142
    GOVERNOR=143
    GRANT=144
    GROUP=145
    HAVING=146
    HASHED=147
    HEALTHCHECKTIMEOUT=148
    IDENTITY=149
    IDENTITYCOL=150
    IDENTITY_INSERT=151
    IF=152
    IIF=153
    IN=154
    INCLUDE=155
    INCREMENT=156
    INDEX=157
    INFINITE=158
    INIT=159
    INNER=160
    INSERT=161
    INSTEAD=162
    INTERSECT=163
    INTO=164
    IPV4_ADDR=165
    IPV6_ADDR=166
    IS=167
    ISNULL=168
    JOIN=169
    KERBEROS=170
    KEY=171
    KEY_PATH=172
    KEY_STORE_PROVIDER_NAME=173
    KILL=174
    LANGUAGE=175
    LEFT=176
    LIBRARY=177
    LIFETIME=178
    LIKE=179
    LINENO=180
    LINUX=181
    LISTENER_IP=182
    LISTENER_PORT=183
    LOAD=184
    LOCAL_SERVICE_NAME=185
    LOG=186
    MATCHED=187
    MASTER=188
    MAX_MEMORY=189
    MAXTRANSFER=190
    MAXVALUE=191
    MAX_DISPATCH_LATENCY=192
    MAX_EVENT_SIZE=193
    MAX_SIZE=194
    MAX_OUTSTANDING_IO_PER_VOLUME=195
    MEDIADESCRIPTION=196
    MEDIANAME=197
    MEMBER=198
    MEMORY_PARTITION_MODE=199
    MERGE=200
    MESSAGE_FORWARDING=201
    MESSAGE_FORWARD_SIZE=202
    MINVALUE=203
    MIRROR=204
    MUST_CHANGE=205
    NATIONAL=206
    NEGOTIATE=207
    NOCHECK=208
    NOFORMAT=209
    NOINIT=210
    NONCLUSTERED=211
    NONE=212
    NOREWIND=213
    NOSKIP=214
    NOUNLOAD=215
    NO_CHECKSUM=216
    NO_COMPRESSION=217
    NO_EVENT_LOSS=218
    NOT=219
    NOTIFICATION=220
    NTLM=221
    NULL=222
    NULLIF=223
    OF=224
    OFF=225
    OFFSETS=226
    OLD_PASSWORD=227
    ON=228
    ON_FAILURE=229
    OPEN=230
    OPENDATASOURCE=231
    OPENQUERY=232
    OPENROWSET=233
    OPENXML=234
    OPTION=235
    OR=236
    ORDER=237
    OUTER=238
    OVER=239
    PAGE=240
    PARAM_NODE=241
    PARTIAL=242
    PASSWORD=243
    PERCENT=244
    PERMISSION_SET=245
    PER_CPU=246
    PER_DB=247
    PER_NODE=248
    PIVOT=249
    PLAN=250
    PLATFORM=251
    POLICY=252
    PRECISION=253
    PREDICATE=254
    PRIMARY=255
    PRINT=256
    PROC=257
    PROCEDURE=258
    PROCESS=259
    PUBLIC=260
    PYTHON=261
    K_R=262
    RAISERROR=263
    RAW=264
    READ=265
    READTEXT=266
    READ_WRITE_FILEGROUPS=267
    RECONFIGURE=268
    REFERENCES=269
    REGENERATE=270
    RELATED_CONVERSATION=271
    RELATED_CONVERSATION_GROUP=272
    REPLICATION=273
    REQUIRED=274
    RESET=275
    RESTART=276
    RESTORE=277
    RESTRICT=278
    RESUME=279
    RETAINDAYS=280
    RETURN=281
    RETURNS=282
    REVERT=283
    REVOKE=284
    REWIND=285
    RIGHT=286
    ROLLBACK=287
    ROLE=288
    ROWCOUNT=289
    ROWGUIDCOL=290
    RSA_512=291
    RSA_1024=292
    RSA_2048=293
    RSA_3072=294
    RSA_4096=295
    SAFETY=296
    RULE=297
    SAFE=298
    SAVE=299
    SCHEDULER=300
    SCHEMA=301
    SCHEME=302
    SECURITY=303
    SECURITYAUDIT=304
    SELECT=305
    SEMANTICKEYPHRASETABLE=306
    SEMANTICSIMILARITYDETAILSTABLE=307
    SEMANTICSIMILARITYTABLE=308
    SEQUENCE=309
    SERVER=310
    SERVICE=311
    SERVICE_BROKER=312
    SERVICE_NAME=313
    SESSION=314
    SESSION_USER=315
    SET=316
    SETUSER=317
    SHUTDOWN=318
    SID=319
    SKIP_KEYWORD=320
    SOFTNUMA=321
    SOME=322
    SOURCE=323
    SPECIFICATION=324
    SPLIT=325
    SQLDUMPERFLAGS=326
    SQLDUMPERPATH=327
    SQLDUMPERTIMEOUT=328
    STATISTICS=329
    STATE=330
    STATS=331
    START=332
    STARTED=333
    STARTUP_STATE=334
    STOP=335
    STOPPED=336
    STOP_ON_ERROR=337
    SUPPORTED=338
    SYSTEM=339
    SYSTEM_USER=340
    TABLE=341
    TABLESAMPLE=342
    TAPE=343
    TARGET=344
    TCP=345
    TEXTSIZE=346
    THEN=347
    TO=348
    TOP=349
    TRACK_CAUSALITY=350
    TRAN=351
    TRANSACTION=352
    TRANSFER=353
    TRIGGER=354
    TRUNCATE=355
    TSEQUAL=356
    UNCHECKED=357
    UNION=358
    UNIQUE=359
    UNLOCK=360
    UNPIVOT=361
    UNSAFE=362
    UPDATE=363
    UPDATETEXT=364
    URL=365
    USE=366
    USED=367
    USER=368
    VALUES=369
    VARYING=370
    VERBOSELOGGING=371
    VIEW=372
    VISIBILITY=373
    WAITFOR=374
    WHEN=375
    WHERE=376
    WHILE=377
    WINDOWS=378
    WITH=379
    WITHIN=380
    WITHOUT=381
    WITNESS=382
    WRITETEXT=383
    ABSOLUTE=384
    ACCENT_SENSITIVITY=385
    ACTION=386
    ACTIVATION=387
    ACTIVE=388
    ADDRESS=389
    AES_128=390
    AES_192=391
    AES_256=392
    AFFINITY=393
    AFTER=394
    AGGREGATE=395
    ALGORITHM=396
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=397
    ALLOW_SNAPSHOT_ISOLATION=398
    ALLOWED=399
    ANSI_NULL_DEFAULT=400
    ANSI_NULLS=401
    ANSI_PADDING=402
    ANSI_WARNINGS=403
    APPLICATION_LOG=404
    APPLY=405
    ARITHABORT=406
    ASSEMBLY=407
    AUDIT=408
    AUDIT_GUID=409
    AUTO=410
    AUTO_CLEANUP=411
    AUTO_CLOSE=412
    AUTO_CREATE_STATISTICS=413
    AUTO_SHRINK=414
    AUTO_UPDATE_STATISTICS=415
    AUTO_UPDATE_STATISTICS_ASYNC=416
    AVAILABILITY=417
    AVG=418
    BACKUP_PRIORITY=419
    BEGIN_DIALOG=420
    BIGINT=421
    BINARY_BASE64=422
    BINARY_CHECKSUM=423
    BINDING=424
    BLOB_STORAGE=425
    BROKER=426
    BROKER_INSTANCE=427
    BULK_LOGGED=428
    CALLER=429
    CAP_CPU_PERCENT=430
    CAST=431
    CATALOG=432
    CATCH=433
    CHANGE_RETENTION=434
    CHANGE_TRACKING=435
    CHECKSUM=436
    CHECKSUM_AGG=437
    CLEANUP=438
    COLLECTION=439
    COLUMN_MASTER_KEY=440
    COMMITTED=441
    COMPATIBILITY_LEVEL=442
    CONCAT=443
    CONCAT_NULL_YIELDS_NULL=444
    CONTENT=445
    CONTROL=446
    COOKIE=447
    COUNT=448
    COUNT_BIG=449
    COUNTER=450
    CPU=451
    CREATE_NEW=452
    CREATION_DISPOSITION=453
    CREDENTIAL=454
    CRYPTOGRAPHIC=455
    CURSOR_CLOSE_ON_COMMIT=456
    CURSOR_DEFAULT=457
    DATE_CORRELATION_OPTIMIZATION=458
    DATEADD=459
    DATEDIFF=460
    DATENAME=461
    DATEPART=462
    DAYS=463
    DB_CHAINING=464
    DB_FAILOVER=465
    DECRYPTION=466
    DEFAULT_DOUBLE_QUOTE=467
    DEFAULT_FULLTEXT_LANGUAGE=468
    DEFAULT_LANGUAGE=469
    DELAY=470
    DELAYED_DURABILITY=471
    DELETED=472
    DENSE_RANK=473
    DEPENDENTS=474
    DES=475
    DESCRIPTION=476
    DESX=477
    DHCP=478
    DIALOG=479
    DIRECTORY_NAME=480
    DISABLE=481
    DISABLE_BROKER=482
    DISABLED=483
    DISK_DRIVE=484
    DOCUMENT=485
    DYNAMIC=486
    ELEMENTS=487
    EMERGENCY=488
    EMPTY=489
    ENABLE=490
    ENABLE_BROKER=491
    ENCRYPTED_VALUE=492
    ENCRYPTION=493
    ENDPOINT_URL=494
    ERROR_BROKER_CONVERSATIONS=495
    EXCLUSIVE=496
    EXECUTABLE=497
    EXIST=498
    EXPAND=499
    EXPIRY_DATE=500
    EXPLICIT=501
    FAIL_OPERATION=502
    FAILOVER_MODE=503
    FAILURE=504
    FAILURE_CONDITION_LEVEL=505
    FAST=506
    FAST_FORWARD=507
    FILEGROUP=508
    FILEGROWTH=509
    FILEPATH=510
    FILESTREAM=511
    FILTER=512
    FIRST=513
    FIRST_VALUE=514
    FOLLOWING=515
    FORCE=516
    FORCE_FAILOVER_ALLOW_DATA_LOSS=517
    FORCED=518
    FORMAT=519
    FORWARD_ONLY=520
    FULLSCAN=521
    FULLTEXT=522
    GB=523
    GETDATE=524
    GETUTCDATE=525
    GLOBAL=526
    GO=527
    GROUP_MAX_REQUESTS=528
    GROUPING=529
    GROUPING_ID=530
    HADR=531
    HASH=532
    HEALTH_CHECK_TIMEOUT=533
    HIGH=534
    HONOR_BROKER_PRIORITY=535
    HOURS=536
    IDENTITY_VALUE=537
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=538
    IMMEDIATE=539
    IMPERSONATE=540
    IMPORTANCE=541
    INCLUDE_NULL_VALUES=542
    INCREMENTAL=543
    INITIATOR=544
    INPUT=545
    INSENSITIVE=546
    INSERTED=547
    INT=548
    IP=549
    ISOLATION=550
    JSON=551
    KB=552
    KEEP=553
    KEEPFIXED=554
    KEY_SOURCE=555
    KEYS=556
    KEYSET=557
    LAG=558
    LAST=559
    LAST_VALUE=560
    LEAD=561
    LEVEL=562
    LIST=563
    LISTENER=564
    LISTENER_URL=565
    LOB_COMPACTION=566
    LOCAL=567
    LOCATION=568
    LOCK=569
    LOCK_ESCALATION=570
    LOGIN=571
    LOOP=572
    LOW=573
    MANUAL=574
    MARK=575
    MATERIALIZED=576
    MAX=577
    MAX_CPU_PERCENT=578
    MAX_DOP=579
    MAX_FILES=580
    MAX_IOPS_PER_VOLUME=581
    MAX_MEMORY_PERCENT=582
    MAX_PROCESSES=583
    MAX_QUEUE_READERS=584
    MAX_ROLLOVER_FILES=585
    MAXDOP=586
    MAXRECURSION=587
    MAXSIZE=588
    MB=589
    MEDIUM=590
    MEMORY_OPTIMIZED_DATA=591
    MESSAGE=592
    MIN=593
    MIN_ACTIVE_ROWVERSION=594
    MIN_CPU_PERCENT=595
    MIN_IOPS_PER_VOLUME=596
    MIN_MEMORY_PERCENT=597
    MINUTES=598
    MIRROR_ADDRESS=599
    MIXED_PAGE_ALLOCATION=600
    MODE=601
    MODIFY=602
    MOVE=603
    MULTI_USER=604
    NAME=605
    NESTED_TRIGGERS=606
    NEW_ACCOUNT=607
    NEW_BROKER=608
    NEW_PASSWORD=609
    NEXT=610
    NO=611
    NO_TRUNCATE=612
    NO_WAIT=613
    NOCOUNT=614
    NODES=615
    NOEXPAND=616
    NON_TRANSACTED_ACCESS=617
    NORECOMPUTE=618
    NORECOVERY=619
    NOWAIT=620
    NTILE=621
    NUMANODE=622
    NUMBER=623
    NUMERIC_ROUNDABORT=624
    OBJECT=625
    OFFLINE=626
    OFFSET=627
    OLD_ACCOUNT=628
    ONLINE=629
    ONLY=630
    OPEN_EXISTING=631
    OPTIMISTIC=632
    OPTIMIZE=633
    OUT=634
    OUTPUT=635
    OWNER=636
    PAGE_VERIFY=637
    PARAMETERIZATION=638
    PARTITION=639
    PARTITIONS=640
    PARTNER=641
    PATH=642
    POISON_MESSAGE_HANDLING=643
    POOL=644
    PORT=645
    PRECEDING=646
    PRIMARY_ROLE=647
    PRIOR=648
    PRIORITY=649
    PRIORITY_LEVEL=650
    PRIVATE=651
    PRIVATE_KEY=652
    PRIVILEGES=653
    PROCEDURE_NAME=654
    PROPERTY=655
    PROVIDER=656
    PROVIDER_KEY_NAME=657
    QUERY=658
    QUEUE=659
    QUEUE_DELAY=660
    QUOTED_IDENTIFIER=661
    RANGE=662
    RANK=663
    RC2=664
    RC4=665
    RC4_128=666
    READ_COMMITTED_SNAPSHOT=667
    READ_ONLY=668
    READ_ONLY_ROUTING_LIST=669
    READ_WRITE=670
    READONLY=671
    REBUILD=672
    RECEIVE=673
    RECOMPILE=674
    RECOVERY=675
    RECURSIVE_TRIGGERS=676
    RELATIVE=677
    REMOTE=678
    REMOTE_SERVICE_NAME=679
    REMOVE=680
    REORGANIZE=681
    REPEATABLE=682
    REPLICA=683
    REQUEST_MAX_CPU_TIME_SEC=684
    REQUEST_MAX_MEMORY_GRANT_PERCENT=685
    REQUEST_MEMORY_GRANT_TIMEOUT_SEC=686
    REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=687
    RESERVE_DISK_SPACE=688
    RESOURCE=689
    RESOURCE_MANAGER_LOCATION=690
    RESTRICTED_USER=691
    RETENTION=692
    ROBUST=693
    ROOT=694
    ROUTE=695
    ROW=696
    ROW_NUMBER=697
    ROWGUID=698
    ROWS=699
    SAMPLE=700
    SCHEMABINDING=701
    SCOPED=702
    SCROLL=703
    SCROLL_LOCKS=704
    SEARCH=705
    SECONDARY=706
    SECONDARY_ONLY=707
    SECONDARY_ROLE=708
    SECONDS=709
    SECRET=710
    SECURITY_LOG=711
    SEEDING_MODE=712
    SELF=713
    SEMI_SENSITIVE=714
    SEND=715
    SENT=716
    SERIALIZABLE=717
    SESSION_TIMEOUT=718
    SETERROR=719
    SHARE=720
    SHOWPLAN=721
    SIGNATURE=722
    SIMPLE=723
    SINGLE_USER=724
    SIZE=725
    SMALLINT=726
    SNAPSHOT=727
    SPATIAL_WINDOW_MAX_CELLS=728
    STANDBY=729
    START_DATE=730
    STATIC=731
    STATS_STREAM=732
    STATUS=733
    STDEV=734
    STDEVP=735
    STOPLIST=736
    STUFF=737
    SUBJECT=738
    SUM=739
    SUSPEND=740
    SYMMETRIC=741
    SYNCHRONOUS_COMMIT=742
    SYNONYM=743
    TAKE=744
    TARGET_RECOVERY_TIME=745
    TB=746
    TEXTIMAGE_ON=747
    THROW=748
    TIES=749
    TIME=750
    TIMEOUT=751
    TIMER=752
    TINYINT=753
    TORN_PAGE_DETECTION=754
    TRANSFORM_NOISE_WORDS=755
    TRIPLE_DES=756
    TRIPLE_DES_3KEY=757
    TRUSTWORTHY=758
    TRY=759
    TSQL=760
    TWO_DIGIT_YEAR_CUTOFF=761
    TYPE=762
    TYPE_WARNING=763
    UNBOUNDED=764
    UNCOMMITTED=765
    UNKNOWN=766
    UNLIMITED=767
    USING=768
    VALID_XML=769
    VALIDATION=770
    VALUE=771
    VAR=772
    VARP=773
    VIEW_METADATA=774
    VIEWS=775
    WAIT=776
    WELL_FORMED_XML=777
    WITHOUT_ARRAY_WRAPPER=778
    WORK=779
    WORKLOAD=780
    XML=781
    XMLDATA=782
    XMLNAMESPACES=783
    XMLSCHEMA=784
    XSINIL=785
    DOLLAR_ACTION=786
    SPACE=787
    COMMENT=788
    LINE_COMMENT=789
    DOUBLE_QUOTE_ID=790
    SINGLE_QUOTE=791
    SQUARE_BRACKET_ID=792
    LOCAL_ID=793
    DECIMAL=794
    IDENTIFIER=795
    QUOTED_URL=796
    QUOTED_HOST_AND_PORT=797
    STRING=798
    BINARY=799
    FLOAT=800
    REAL=801
    EQUAL=802
    GREATER=803
    LESS=804
    EXCLAMATION=805
    PLUS_ASSIGN=806
    MINUS_ASSIGN=807
    MULT_ASSIGN=808
    DIV_ASSIGN=809
    MOD_ASSIGN=810
    AND_ASSIGN=811
    XOR_ASSIGN=812
    OR_ASSIGN=813
    DOUBLE_BAR=814
    DOT=815
    UNDERLINE=816
    AT=817
    SHARP=818
    DOLLAR=819
    LR_BRACKET=820
    RR_BRACKET=821
    COMMA=822
    SEMI=823
    COLON=824
    STAR=825
    DIVIDE=826
    MODULE=827
    PLUS=828
    MINUS=829
    BIT_NOT=830
    BIT_OR=831
    BIT_AND=832
    BIT_XOR=833
    IPV4_OCTECT=834

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Tsql_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(TSqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(TSqlParser.BatchContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_tsql_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsql_file" ):
                listener.enterTsql_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsql_file" ):
                listener.exitTsql_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsql_file" ):
                return visitor.visitTsql_file(self)
            else:
                return visitor.visitChildren(self)




    def tsql_file(self):

        localctx = TSqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TSqlParser.ALTER) | (1 << TSqlParser.BEGIN) | (1 << TSqlParser.BLOCKING_HIERARCHY) | (1 << TSqlParser.BREAK) | (1 << TSqlParser.CALLED) | (1 << TSqlParser.CASE) | (1 << TSqlParser.CLOSE) | (1 << TSqlParser.COALESCE) | (1 << TSqlParser.COMMIT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TSqlParser.CONTINUE - 64)) | (1 << (TSqlParser.CONVERT - 64)) | (1 << (TSqlParser.CREATE - 64)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (TSqlParser.CURRENT_USER - 64)) | (1 << (TSqlParser.DATA_COMPRESSION - 64)) | (1 << (TSqlParser.DEALLOCATE - 64)) | (1 << (TSqlParser.DECLARE - 64)) | (1 << (TSqlParser.DEFAULT - 64)) | (1 << (TSqlParser.DELETE - 64)) | (1 << (TSqlParser.END - 64)) | (1 << (TSqlParser.EVENTDATA - 64)) | (1 << (TSqlParser.EXECUTE - 64)) | (1 << (TSqlParser.FETCH - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (TSqlParser.FILENAME - 129)) | (1 << (TSqlParser.FILLFACTOR - 129)) | (1 << (TSqlParser.FORCESEEK - 129)) | (1 << (TSqlParser.GET - 129)) | (1 << (TSqlParser.GOTO - 129)) | (1 << (TSqlParser.GRANT - 129)) | (1 << (TSqlParser.IDENTITY - 129)) | (1 << (TSqlParser.IF - 129)) | (1 << (TSqlParser.IIF - 129)) | (1 << (TSqlParser.INIT - 129)) | (1 << (TSqlParser.INSERT - 129)) | (1 << (TSqlParser.ISNULL - 129)) | (1 << (TSqlParser.KEY - 129)) | (1 << (TSqlParser.LEFT - 129)) | (1 << (TSqlParser.MASTER - 129)) | (1 << (TSqlParser.MAX_MEMORY - 129)))) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (TSqlParser.MERGE - 200)) | (1 << (TSqlParser.NULL - 200)) | (1 << (TSqlParser.NULLIF - 200)) | (1 << (TSqlParser.OFFSETS - 200)) | (1 << (TSqlParser.OPEN - 200)) | (1 << (TSqlParser.OVER - 200)) | (1 << (TSqlParser.PAGE - 200)) | (1 << (TSqlParser.PRINT - 200)) | (1 << (TSqlParser.PUBLIC - 200)) | (1 << (TSqlParser.K_R - 200)) | (1 << (TSqlParser.RAISERROR - 200)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (TSqlParser.RAW - 264)) | (1 << (TSqlParser.RETURN - 264)) | (1 << (TSqlParser.RETURNS - 264)) | (1 << (TSqlParser.REVERT - 264)) | (1 << (TSqlParser.RIGHT - 264)) | (1 << (TSqlParser.ROLLBACK - 264)) | (1 << (TSqlParser.ROWCOUNT - 264)) | (1 << (TSqlParser.SAFETY - 264)) | (1 << (TSqlParser.SAVE - 264)) | (1 << (TSqlParser.SELECT - 264)) | (1 << (TSqlParser.SERVER - 264)) | (1 << (TSqlParser.SESSION_USER - 264)) | (1 << (TSqlParser.SET - 264)) | (1 << (TSqlParser.SETUSER - 264)) | (1 << (TSqlParser.SID - 264)) | (1 << (TSqlParser.SOURCE - 264)))) != 0) or ((((_la - 330)) & ~0x3f) == 0 and ((1 << (_la - 330)) & ((1 << (TSqlParser.STATE - 330)) | (1 << (TSqlParser.START - 330)) | (1 << (TSqlParser.SYSTEM_USER - 330)) | (1 << (TSqlParser.TARGET - 330)) | (1 << (TSqlParser.UPDATE - 330)) | (1 << (TSqlParser.USE - 330)) | (1 << (TSqlParser.WAITFOR - 330)) | (1 << (TSqlParser.WHILE - 330)) | (1 << (TSqlParser.WITH - 330)) | (1 << (TSqlParser.ABSOLUTE - 330)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 330)) | (1 << (TSqlParser.ACTION - 330)) | (1 << (TSqlParser.ACTIVATION - 330)) | (1 << (TSqlParser.ACTIVE - 330)) | (1 << (TSqlParser.ADDRESS - 330)) | (1 << (TSqlParser.AES_128 - 330)) | (1 << (TSqlParser.AES_192 - 330)) | (1 << (TSqlParser.AES_256 - 330)) | (1 << (TSqlParser.AFFINITY - 330)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (TSqlParser.AFTER - 394)) | (1 << (TSqlParser.AGGREGATE - 394)) | (1 << (TSqlParser.ALGORITHM - 394)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 394)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 394)) | (1 << (TSqlParser.ALLOWED - 394)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 394)) | (1 << (TSqlParser.ANSI_NULLS - 394)) | (1 << (TSqlParser.ANSI_PADDING - 394)) | (1 << (TSqlParser.ANSI_WARNINGS - 394)) | (1 << (TSqlParser.APPLICATION_LOG - 394)) | (1 << (TSqlParser.APPLY - 394)) | (1 << (TSqlParser.ARITHABORT - 394)) | (1 << (TSqlParser.ASSEMBLY - 394)) | (1 << (TSqlParser.AUDIT - 394)) | (1 << (TSqlParser.AUDIT_GUID - 394)) | (1 << (TSqlParser.AUTO - 394)) | (1 << (TSqlParser.AUTO_CLEANUP - 394)) | (1 << (TSqlParser.AUTO_CLOSE - 394)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 394)) | (1 << (TSqlParser.AUTO_SHRINK - 394)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 394)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 394)) | (1 << (TSqlParser.AVAILABILITY - 394)) | (1 << (TSqlParser.AVG - 394)) | (1 << (TSqlParser.BACKUP_PRIORITY - 394)) | (1 << (TSqlParser.BEGIN_DIALOG - 394)) | (1 << (TSqlParser.BIGINT - 394)) | (1 << (TSqlParser.BINARY_BASE64 - 394)) | (1 << (TSqlParser.BINARY_CHECKSUM - 394)) | (1 << (TSqlParser.BINDING - 394)) | (1 << (TSqlParser.BLOB_STORAGE - 394)) | (1 << (TSqlParser.BROKER - 394)) | (1 << (TSqlParser.BROKER_INSTANCE - 394)) | (1 << (TSqlParser.BULK_LOGGED - 394)) | (1 << (TSqlParser.CALLER - 394)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 394)) | (1 << (TSqlParser.CAST - 394)) | (1 << (TSqlParser.CATALOG - 394)) | (1 << (TSqlParser.CATCH - 394)) | (1 << (TSqlParser.CHANGE_RETENTION - 394)) | (1 << (TSqlParser.CHANGE_TRACKING - 394)) | (1 << (TSqlParser.CHECKSUM - 394)) | (1 << (TSqlParser.CHECKSUM_AGG - 394)) | (1 << (TSqlParser.CLEANUP - 394)) | (1 << (TSqlParser.COLLECTION - 394)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 394)) | (1 << (TSqlParser.COMMITTED - 394)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 394)) | (1 << (TSqlParser.CONCAT - 394)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 394)) | (1 << (TSqlParser.CONTENT - 394)) | (1 << (TSqlParser.CONTROL - 394)) | (1 << (TSqlParser.COOKIE - 394)) | (1 << (TSqlParser.COUNT - 394)) | (1 << (TSqlParser.COUNT_BIG - 394)) | (1 << (TSqlParser.COUNTER - 394)) | (1 << (TSqlParser.CPU - 394)) | (1 << (TSqlParser.CREATE_NEW - 394)) | (1 << (TSqlParser.CREATION_DISPOSITION - 394)) | (1 << (TSqlParser.CREDENTIAL - 394)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 394)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 394)) | (1 << (TSqlParser.CURSOR_DEFAULT - 394)))) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & ((1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 458)) | (1 << (TSqlParser.DATEADD - 458)) | (1 << (TSqlParser.DATEDIFF - 458)) | (1 << (TSqlParser.DATENAME - 458)) | (1 << (TSqlParser.DATEPART - 458)) | (1 << (TSqlParser.DAYS - 458)) | (1 << (TSqlParser.DB_CHAINING - 458)) | (1 << (TSqlParser.DB_FAILOVER - 458)) | (1 << (TSqlParser.DECRYPTION - 458)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 458)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 458)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 458)) | (1 << (TSqlParser.DELAY - 458)) | (1 << (TSqlParser.DELAYED_DURABILITY - 458)) | (1 << (TSqlParser.DELETED - 458)) | (1 << (TSqlParser.DENSE_RANK - 458)) | (1 << (TSqlParser.DEPENDENTS - 458)) | (1 << (TSqlParser.DES - 458)) | (1 << (TSqlParser.DESCRIPTION - 458)) | (1 << (TSqlParser.DESX - 458)) | (1 << (TSqlParser.DHCP - 458)) | (1 << (TSqlParser.DIALOG - 458)) | (1 << (TSqlParser.DIRECTORY_NAME - 458)) | (1 << (TSqlParser.DISABLE - 458)) | (1 << (TSqlParser.DISABLE_BROKER - 458)) | (1 << (TSqlParser.DISABLED - 458)) | (1 << (TSqlParser.DISK_DRIVE - 458)) | (1 << (TSqlParser.DOCUMENT - 458)) | (1 << (TSqlParser.DYNAMIC - 458)) | (1 << (TSqlParser.EMERGENCY - 458)) | (1 << (TSqlParser.EMPTY - 458)) | (1 << (TSqlParser.ENABLE - 458)) | (1 << (TSqlParser.ENABLE_BROKER - 458)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 458)) | (1 << (TSqlParser.ENCRYPTION - 458)) | (1 << (TSqlParser.ENDPOINT_URL - 458)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 458)) | (1 << (TSqlParser.EXCLUSIVE - 458)) | (1 << (TSqlParser.EXECUTABLE - 458)) | (1 << (TSqlParser.EXIST - 458)) | (1 << (TSqlParser.EXPAND - 458)) | (1 << (TSqlParser.EXPIRY_DATE - 458)) | (1 << (TSqlParser.EXPLICIT - 458)) | (1 << (TSqlParser.FAIL_OPERATION - 458)) | (1 << (TSqlParser.FAILOVER_MODE - 458)) | (1 << (TSqlParser.FAILURE - 458)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 458)) | (1 << (TSqlParser.FAST - 458)) | (1 << (TSqlParser.FAST_FORWARD - 458)) | (1 << (TSqlParser.FILEGROUP - 458)) | (1 << (TSqlParser.FILEGROWTH - 458)) | (1 << (TSqlParser.FILEPATH - 458)) | (1 << (TSqlParser.FILESTREAM - 458)) | (1 << (TSqlParser.FILTER - 458)) | (1 << (TSqlParser.FIRST - 458)) | (1 << (TSqlParser.FIRST_VALUE - 458)) | (1 << (TSqlParser.FOLLOWING - 458)) | (1 << (TSqlParser.FORCE - 458)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 458)) | (1 << (TSqlParser.FORCED - 458)) | (1 << (TSqlParser.FORMAT - 458)) | (1 << (TSqlParser.FORWARD_ONLY - 458)) | (1 << (TSqlParser.FULLSCAN - 458)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (TSqlParser.FULLTEXT - 522)) | (1 << (TSqlParser.GB - 522)) | (1 << (TSqlParser.GETDATE - 522)) | (1 << (TSqlParser.GETUTCDATE - 522)) | (1 << (TSqlParser.GLOBAL - 522)) | (1 << (TSqlParser.GO - 522)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 522)) | (1 << (TSqlParser.GROUPING - 522)) | (1 << (TSqlParser.GROUPING_ID - 522)) | (1 << (TSqlParser.HADR - 522)) | (1 << (TSqlParser.HASH - 522)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 522)) | (1 << (TSqlParser.HIGH - 522)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 522)) | (1 << (TSqlParser.HOURS - 522)) | (1 << (TSqlParser.IDENTITY_VALUE - 522)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 522)) | (1 << (TSqlParser.IMMEDIATE - 522)) | (1 << (TSqlParser.IMPERSONATE - 522)) | (1 << (TSqlParser.IMPORTANCE - 522)) | (1 << (TSqlParser.INCREMENTAL - 522)) | (1 << (TSqlParser.INITIATOR - 522)) | (1 << (TSqlParser.INPUT - 522)) | (1 << (TSqlParser.INSENSITIVE - 522)) | (1 << (TSqlParser.INSERTED - 522)) | (1 << (TSqlParser.INT - 522)) | (1 << (TSqlParser.IP - 522)) | (1 << (TSqlParser.ISOLATION - 522)) | (1 << (TSqlParser.KB - 522)) | (1 << (TSqlParser.KEEP - 522)) | (1 << (TSqlParser.KEEPFIXED - 522)) | (1 << (TSqlParser.KEY_SOURCE - 522)) | (1 << (TSqlParser.KEYS - 522)) | (1 << (TSqlParser.KEYSET - 522)) | (1 << (TSqlParser.LAG - 522)) | (1 << (TSqlParser.LAST - 522)) | (1 << (TSqlParser.LAST_VALUE - 522)) | (1 << (TSqlParser.LEAD - 522)) | (1 << (TSqlParser.LEVEL - 522)) | (1 << (TSqlParser.LIST - 522)) | (1 << (TSqlParser.LISTENER - 522)) | (1 << (TSqlParser.LISTENER_URL - 522)) | (1 << (TSqlParser.LOB_COMPACTION - 522)) | (1 << (TSqlParser.LOCAL - 522)) | (1 << (TSqlParser.LOCATION - 522)) | (1 << (TSqlParser.LOCK - 522)) | (1 << (TSqlParser.LOCK_ESCALATION - 522)) | (1 << (TSqlParser.LOGIN - 522)) | (1 << (TSqlParser.LOOP - 522)) | (1 << (TSqlParser.LOW - 522)) | (1 << (TSqlParser.MANUAL - 522)) | (1 << (TSqlParser.MARK - 522)) | (1 << (TSqlParser.MATERIALIZED - 522)) | (1 << (TSqlParser.MAX - 522)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 522)) | (1 << (TSqlParser.MAX_DOP - 522)) | (1 << (TSqlParser.MAX_FILES - 522)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 522)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 522)) | (1 << (TSqlParser.MAX_PROCESSES - 522)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 522)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 522)))) != 0) or ((((_la - 586)) & ~0x3f) == 0 and ((1 << (_la - 586)) & ((1 << (TSqlParser.MAXDOP - 586)) | (1 << (TSqlParser.MAXRECURSION - 586)) | (1 << (TSqlParser.MAXSIZE - 586)) | (1 << (TSqlParser.MB - 586)) | (1 << (TSqlParser.MEDIUM - 586)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 586)) | (1 << (TSqlParser.MESSAGE - 586)) | (1 << (TSqlParser.MIN - 586)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 586)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 586)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 586)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 586)) | (1 << (TSqlParser.MINUTES - 586)) | (1 << (TSqlParser.MIRROR_ADDRESS - 586)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 586)) | (1 << (TSqlParser.MODE - 586)) | (1 << (TSqlParser.MODIFY - 586)) | (1 << (TSqlParser.MOVE - 586)) | (1 << (TSqlParser.MULTI_USER - 586)) | (1 << (TSqlParser.NAME - 586)) | (1 << (TSqlParser.NESTED_TRIGGERS - 586)) | (1 << (TSqlParser.NEW_ACCOUNT - 586)) | (1 << (TSqlParser.NEW_BROKER - 586)) | (1 << (TSqlParser.NEW_PASSWORD - 586)) | (1 << (TSqlParser.NEXT - 586)) | (1 << (TSqlParser.NO - 586)) | (1 << (TSqlParser.NO_TRUNCATE - 586)) | (1 << (TSqlParser.NO_WAIT - 586)) | (1 << (TSqlParser.NOCOUNT - 586)) | (1 << (TSqlParser.NODES - 586)) | (1 << (TSqlParser.NOEXPAND - 586)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 586)) | (1 << (TSqlParser.NORECOMPUTE - 586)) | (1 << (TSqlParser.NORECOVERY - 586)) | (1 << (TSqlParser.NOWAIT - 586)) | (1 << (TSqlParser.NTILE - 586)) | (1 << (TSqlParser.NUMANODE - 586)) | (1 << (TSqlParser.NUMBER - 586)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 586)) | (1 << (TSqlParser.OBJECT - 586)) | (1 << (TSqlParser.OFFLINE - 586)) | (1 << (TSqlParser.OFFSET - 586)) | (1 << (TSqlParser.OLD_ACCOUNT - 586)) | (1 << (TSqlParser.ONLINE - 586)) | (1 << (TSqlParser.ONLY - 586)) | (1 << (TSqlParser.OPEN_EXISTING - 586)) | (1 << (TSqlParser.OPTIMISTIC - 586)) | (1 << (TSqlParser.OPTIMIZE - 586)) | (1 << (TSqlParser.OUT - 586)) | (1 << (TSqlParser.OUTPUT - 586)) | (1 << (TSqlParser.OWNER - 586)) | (1 << (TSqlParser.PAGE_VERIFY - 586)) | (1 << (TSqlParser.PARAMETERIZATION - 586)) | (1 << (TSqlParser.PARTITION - 586)) | (1 << (TSqlParser.PARTITIONS - 586)) | (1 << (TSqlParser.PARTNER - 586)) | (1 << (TSqlParser.PATH - 586)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 586)) | (1 << (TSqlParser.POOL - 586)) | (1 << (TSqlParser.PORT - 586)) | (1 << (TSqlParser.PRECEDING - 586)) | (1 << (TSqlParser.PRIMARY_ROLE - 586)) | (1 << (TSqlParser.PRIOR - 586)) | (1 << (TSqlParser.PRIORITY - 586)))) != 0) or ((((_la - 650)) & ~0x3f) == 0 and ((1 << (_la - 650)) & ((1 << (TSqlParser.PRIORITY_LEVEL - 650)) | (1 << (TSqlParser.PRIVATE - 650)) | (1 << (TSqlParser.PRIVATE_KEY - 650)) | (1 << (TSqlParser.PRIVILEGES - 650)) | (1 << (TSqlParser.PROCEDURE_NAME - 650)) | (1 << (TSqlParser.PROPERTY - 650)) | (1 << (TSqlParser.PROVIDER - 650)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 650)) | (1 << (TSqlParser.QUERY - 650)) | (1 << (TSqlParser.QUEUE - 650)) | (1 << (TSqlParser.QUEUE_DELAY - 650)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 650)) | (1 << (TSqlParser.RANGE - 650)) | (1 << (TSqlParser.RANK - 650)) | (1 << (TSqlParser.RC2 - 650)) | (1 << (TSqlParser.RC4 - 650)) | (1 << (TSqlParser.RC4_128 - 650)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 650)) | (1 << (TSqlParser.READ_ONLY - 650)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 650)) | (1 << (TSqlParser.READ_WRITE - 650)) | (1 << (TSqlParser.READONLY - 650)) | (1 << (TSqlParser.REBUILD - 650)) | (1 << (TSqlParser.RECEIVE - 650)) | (1 << (TSqlParser.RECOMPILE - 650)) | (1 << (TSqlParser.RECOVERY - 650)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 650)) | (1 << (TSqlParser.RELATIVE - 650)) | (1 << (TSqlParser.REMOTE - 650)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 650)) | (1 << (TSqlParser.REMOVE - 650)) | (1 << (TSqlParser.REORGANIZE - 650)) | (1 << (TSqlParser.REPEATABLE - 650)) | (1 << (TSqlParser.REPLICA - 650)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 650)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 650)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 650)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 650)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 650)) | (1 << (TSqlParser.RESOURCE - 650)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 650)) | (1 << (TSqlParser.RESTRICTED_USER - 650)) | (1 << (TSqlParser.RETENTION - 650)) | (1 << (TSqlParser.ROBUST - 650)) | (1 << (TSqlParser.ROOT - 650)) | (1 << (TSqlParser.ROUTE - 650)) | (1 << (TSqlParser.ROW - 650)) | (1 << (TSqlParser.ROW_NUMBER - 650)) | (1 << (TSqlParser.ROWGUID - 650)) | (1 << (TSqlParser.ROWS - 650)) | (1 << (TSqlParser.SAMPLE - 650)) | (1 << (TSqlParser.SCHEMABINDING - 650)) | (1 << (TSqlParser.SCOPED - 650)) | (1 << (TSqlParser.SCROLL - 650)) | (1 << (TSqlParser.SCROLL_LOCKS - 650)) | (1 << (TSqlParser.SEARCH - 650)) | (1 << (TSqlParser.SECONDARY - 650)) | (1 << (TSqlParser.SECONDARY_ONLY - 650)) | (1 << (TSqlParser.SECONDARY_ROLE - 650)) | (1 << (TSqlParser.SECONDS - 650)) | (1 << (TSqlParser.SECRET - 650)) | (1 << (TSqlParser.SECURITY_LOG - 650)) | (1 << (TSqlParser.SEEDING_MODE - 650)) | (1 << (TSqlParser.SELF - 650)))) != 0) or ((((_la - 714)) & ~0x3f) == 0 and ((1 << (_la - 714)) & ((1 << (TSqlParser.SEMI_SENSITIVE - 714)) | (1 << (TSqlParser.SEND - 714)) | (1 << (TSqlParser.SENT - 714)) | (1 << (TSqlParser.SERIALIZABLE - 714)) | (1 << (TSqlParser.SESSION_TIMEOUT - 714)) | (1 << (TSqlParser.SETERROR - 714)) | (1 << (TSqlParser.SHARE - 714)) | (1 << (TSqlParser.SHOWPLAN - 714)) | (1 << (TSqlParser.SIGNATURE - 714)) | (1 << (TSqlParser.SIMPLE - 714)) | (1 << (TSqlParser.SINGLE_USER - 714)) | (1 << (TSqlParser.SIZE - 714)) | (1 << (TSqlParser.SMALLINT - 714)) | (1 << (TSqlParser.SNAPSHOT - 714)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 714)) | (1 << (TSqlParser.STANDBY - 714)) | (1 << (TSqlParser.START_DATE - 714)) | (1 << (TSqlParser.STATIC - 714)) | (1 << (TSqlParser.STATS_STREAM - 714)) | (1 << (TSqlParser.STATUS - 714)) | (1 << (TSqlParser.STDEV - 714)) | (1 << (TSqlParser.STDEVP - 714)) | (1 << (TSqlParser.STOPLIST - 714)) | (1 << (TSqlParser.STUFF - 714)) | (1 << (TSqlParser.SUBJECT - 714)) | (1 << (TSqlParser.SUM - 714)) | (1 << (TSqlParser.SUSPEND - 714)) | (1 << (TSqlParser.SYMMETRIC - 714)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 714)) | (1 << (TSqlParser.SYNONYM - 714)) | (1 << (TSqlParser.TAKE - 714)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 714)) | (1 << (TSqlParser.TB - 714)) | (1 << (TSqlParser.TEXTIMAGE_ON - 714)) | (1 << (TSqlParser.THROW - 714)) | (1 << (TSqlParser.TIES - 714)) | (1 << (TSqlParser.TIME - 714)) | (1 << (TSqlParser.TIMEOUT - 714)) | (1 << (TSqlParser.TIMER - 714)) | (1 << (TSqlParser.TINYINT - 714)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 714)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 714)) | (1 << (TSqlParser.TRIPLE_DES - 714)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 714)) | (1 << (TSqlParser.TRUSTWORTHY - 714)) | (1 << (TSqlParser.TRY - 714)) | (1 << (TSqlParser.TSQL - 714)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 714)) | (1 << (TSqlParser.TYPE - 714)) | (1 << (TSqlParser.TYPE_WARNING - 714)) | (1 << (TSqlParser.UNBOUNDED - 714)) | (1 << (TSqlParser.UNCOMMITTED - 714)) | (1 << (TSqlParser.UNKNOWN - 714)) | (1 << (TSqlParser.UNLIMITED - 714)) | (1 << (TSqlParser.USING - 714)) | (1 << (TSqlParser.VALID_XML - 714)) | (1 << (TSqlParser.VALIDATION - 714)) | (1 << (TSqlParser.VALUE - 714)) | (1 << (TSqlParser.VAR - 714)) | (1 << (TSqlParser.VARP - 714)) | (1 << (TSqlParser.VIEW_METADATA - 714)) | (1 << (TSqlParser.VIEWS - 714)) | (1 << (TSqlParser.WAIT - 714)) | (1 << (TSqlParser.WELL_FORMED_XML - 714)))) != 0) or ((((_la - 779)) & ~0x3f) == 0 and ((1 << (_la - 779)) & ((1 << (TSqlParser.WORK - 779)) | (1 << (TSqlParser.WORKLOAD - 779)) | (1 << (TSqlParser.XML - 779)) | (1 << (TSqlParser.XMLNAMESPACES - 779)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 779)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 779)) | (1 << (TSqlParser.LOCAL_ID - 779)) | (1 << (TSqlParser.DECIMAL - 779)) | (1 << (TSqlParser.IDENTIFIER - 779)) | (1 << (TSqlParser.STRING - 779)) | (1 << (TSqlParser.BINARY - 779)) | (1 << (TSqlParser.FLOAT - 779)) | (1 << (TSqlParser.REAL - 779)) | (1 << (TSqlParser.DOLLAR - 779)) | (1 << (TSqlParser.LR_BRACKET - 779)) | (1 << (TSqlParser.SEMI - 779)) | (1 << (TSqlParser.PLUS - 779)) | (1 << (TSqlParser.MINUS - 779)) | (1 << (TSqlParser.BIT_NOT - 779)))) != 0):
                self.state = 424
                self.batch()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self.match(TSqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_body(self):
            return self.getTypedRuleContext(TSqlParser.Execute_bodyContext,0)


        def go_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Go_statementContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Go_statementContext,i)


        def sql_clauses(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBatch" ):
                return visitor.visitBatch(self)
            else:
                return visitor.visitChildren(self)




    def batch(self):

        localctx = TSqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        try:
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.execute_body()
                self.state = 436
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 433
                        self.go_statement() 
                    self.state = 438
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 439
                    self.execute_body()


                self.state = 442
                self.sql_clauses()
                self.state = 446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 443
                        self.go_statement() 
                    self.state = 448
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_sql_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clauses" ):
                listener.enterSql_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clauses" ):
                listener.exitSql_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clauses" ):
                return visitor.visitSql_clauses(self)
            else:
                return visitor.visitChildren(self)




    def sql_clauses(self):

        localctx = TSqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 451
                    self.sql_clause()
                    self.state = 453
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                    if la_ == 1:
                        self.state = 452
                        self.match(TSqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 457 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(TSqlParser.Dml_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(TSqlParser.Cfl_statementContext,0)


        def empty_statement(self):
            return self.getTypedRuleContext(TSqlParser.Empty_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(TSqlParser.Another_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clause" ):
                listener.enterSql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clause" ):
                listener.exitSql_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clause" ):
                return visitor.visitSql_clause(self)
            else:
                return visitor.visitChildren(self)




    def sql_clause(self):

        localctx = TSqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.cfl_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.empty_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 462
                self.another_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(TSqlParser.Merge_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(TSqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(TSqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(TSqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_dml_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_clause" ):
                listener.enterDml_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_clause" ):
                listener.exitDml_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_clause" ):
                return visitor.visitDml_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_clause(self):

        localctx = TSqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.merge_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.delete_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 467
                self.insert_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 468
                self.select_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 469
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cfl_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block_statement(self):
            return self.getTypedRuleContext(TSqlParser.Block_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(TSqlParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(TSqlParser.Continue_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(TSqlParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(TSqlParser.If_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(TSqlParser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(TSqlParser.Throw_statementContext,0)


        def try_catch_statement(self):
            return self.getTypedRuleContext(TSqlParser.Try_catch_statementContext,0)


        def waitfor_statement(self):
            return self.getTypedRuleContext(TSqlParser.Waitfor_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(TSqlParser.While_statementContext,0)


        def print_statement(self):
            return self.getTypedRuleContext(TSqlParser.Print_statementContext,0)


        def raiseerror_statement(self):
            return self.getTypedRuleContext(TSqlParser.Raiseerror_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_cfl_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCfl_statement" ):
                listener.enterCfl_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCfl_statement" ):
                listener.exitCfl_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCfl_statement" ):
                return visitor.visitCfl_statement(self)
            else:
                return visitor.visitChildren(self)




    def cfl_statement(self):

        localctx = TSqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_cfl_statement)
        try:
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.block_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.break_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 474
                self.continue_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 475
                self.goto_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 476
                self.if_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 477
                self.return_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 478
                self.throw_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 479
                self.try_catch_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 480
                self.waitfor_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 481
                self.while_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 482
                self.print_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 483
                self.raiseerror_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def sql_clauses(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_block_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_statement" ):
                return visitor.visitBlock_statement(self)
            else:
                return visitor.visitChildren(self)




    def block_statement(self):

        localctx = TSqlParser.Block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_block_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(TSqlParser.BEGIN)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 487
                self.match(TSqlParser.SEMI)


            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 490
                self.sql_clauses()


            self.state = 493
            self.match(TSqlParser.END)
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 494
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(TSqlParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)




    def break_statement(self):

        localctx = TSqlParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(TSqlParser.BREAK)
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 498
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(TSqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = TSqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(TSqlParser.CONTINUE)
            self.state = 503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 502
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(TSqlParser.GOTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COLON(self):
            return self.getToken(TSqlParser.COLON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)




    def goto_statement(self):

        localctx = TSqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_goto_statement)
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.GOTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.match(TSqlParser.GOTO)
                self.state = 506
                self.identifier()
                self.state = 508
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.identifier()
                self.state = 511
                self.match(TSqlParser.COLON)
                self.state = 513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 512
                    self.match(TSqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = TSqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_return_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(TSqlParser.RETURN)
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 518
                self.expression(0)


            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 521
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clauseContext,i)


        def ELSE(self):
            return self.getToken(TSqlParser.ELSE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = TSqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(TSqlParser.IF)
            self.state = 525
            self.search_condition()
            self.state = 526
            self.sql_clause()
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 527
                self.match(TSqlParser.ELSE)
                self.state = 528
                self.sql_clause()


            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 531
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(TSqlParser.THROW, 0)

        def throw_error_number(self):
            return self.getTypedRuleContext(TSqlParser.Throw_error_numberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def throw_message(self):
            return self.getTypedRuleContext(TSqlParser.Throw_messageContext,0)


        def throw_state(self):
            return self.getTypedRuleContext(TSqlParser.Throw_stateContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_statement" ):
                return visitor.visitThrow_statement(self)
            else:
                return visitor.visitChildren(self)




    def throw_statement(self):

        localctx = TSqlParser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_throw_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(TSqlParser.THROW)
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 535
                self.throw_error_number()
                self.state = 536
                self.match(TSqlParser.COMMA)
                self.state = 537
                self.throw_message()
                self.state = 538
                self.match(TSqlParser.COMMA)
                self.state = 539
                self.throw_state()


            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 543
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_error_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_error_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_error_number" ):
                listener.enterThrow_error_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_error_number" ):
                listener.exitThrow_error_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_error_number" ):
                return visitor.visitThrow_error_number(self)
            else:
                return visitor.visitChildren(self)




    def throw_error_number(self):

        localctx = TSqlParser.Throw_error_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_throw_error_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_messageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_message" ):
                listener.enterThrow_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_message" ):
                listener.exitThrow_message(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_message" ):
                return visitor.visitThrow_message(self)
            else:
                return visitor.visitChildren(self)




    def throw_message(self):

        localctx = TSqlParser.Throw_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_throw_message)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_stateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_state

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_state" ):
                listener.enterThrow_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_state" ):
                listener.exitThrow_state(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_state" ):
                return visitor.visitThrow_state(self)
            else:
                return visitor.visitChildren(self)




    def throw_state(self):

        localctx = TSqlParser.Throw_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_throw_state)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_catch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BEGIN)
            else:
                return self.getToken(TSqlParser.BEGIN, i)

        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TRY)
            else:
                return self.getToken(TSqlParser.TRY, i)

        def END(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.END)
            else:
                return self.getToken(TSqlParser.END, i)

        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CATCH)
            else:
                return self.getToken(TSqlParser.CATCH, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_try_catch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_catch_statement" ):
                listener.enterTry_catch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_catch_statement" ):
                listener.exitTry_catch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_catch_statement" ):
                return visitor.visitTry_catch_statement(self)
            else:
                return visitor.visitChildren(self)




    def try_catch_statement(self):

        localctx = TSqlParser.Try_catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_try_catch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(TSqlParser.BEGIN)
            self.state = 553
            self.match(TSqlParser.TRY)
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 554
                self.match(TSqlParser.SEMI)


            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 557
                localctx.try_clauses = self.sql_clauses()


            self.state = 560
            self.match(TSqlParser.END)
            self.state = 561
            self.match(TSqlParser.TRY)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.SEMI:
                self.state = 562
                self.match(TSqlParser.SEMI)


            self.state = 565
            self.match(TSqlParser.BEGIN)
            self.state = 566
            self.match(TSqlParser.CATCH)
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 567
                self.match(TSqlParser.SEMI)


            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 570
                localctx.catch_clauses = self.sql_clauses()


            self.state = 573
            self.match(TSqlParser.END)
            self.state = 574
            self.match(TSqlParser.CATCH)
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 575
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waitfor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAITFOR(self):
            return self.getToken(TSqlParser.WAITFOR, 0)

        def receive_statement(self):
            return self.getTypedRuleContext(TSqlParser.Receive_statementContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DELAY(self):
            return self.getToken(TSqlParser.DELAY, 0)

        def TIME(self):
            return self.getToken(TSqlParser.TIME, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_waitfor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_statement" ):
                listener.enterWaitfor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_statement" ):
                listener.exitWaitfor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitfor_statement" ):
                return visitor.visitWaitfor_statement(self)
            else:
                return visitor.visitChildren(self)




    def waitfor_statement(self):

        localctx = TSqlParser.Waitfor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_waitfor_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(TSqlParser.WAITFOR)
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 579
                self.receive_statement()


            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 582
                self.match(TSqlParser.COMMA)


            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 585
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DELAY or _la==TSqlParser.TIME or _la==TSqlParser.TIMEOUT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 586
                self.time()


            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 589
                self.expression(0)


            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 592
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(TSqlParser.WHILE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def sql_clause(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clauseContext,0)


        def BREAK(self):
            return self.getToken(TSqlParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(TSqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)




    def while_statement(self):

        localctx = TSqlParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(TSqlParser.WHILE)
            self.state = 596
            self.search_condition()
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 597
                self.sql_clause()
                pass

            elif la_ == 2:
                self.state = 598
                self.match(TSqlParser.BREAK)
                self.state = 600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 599
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.state = 602
                self.match(TSqlParser.CONTINUE)
                self.state = 604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 603
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(TSqlParser.PRINT, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_print_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_statement" ):
                return visitor.visitPrint_statement(self)
            else:
                return visitor.visitChildren(self)




    def print_statement(self):

        localctx = TSqlParser.Print_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_print_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(TSqlParser.PRINT)
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 609
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 610
                self.match(TSqlParser.DOUBLE_QUOTE_ID)
                pass


            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 613
                self.match(TSqlParser.COMMA)
                self.state = 614
                self.match(TSqlParser.LOCAL_ID)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 620
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raiseerror_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext
            self.formatstring = None # Token
            self.argument = None # Token

        def RAISERROR(self):
            return self.getToken(TSqlParser.RAISERROR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Constant_LOCAL_IDContext,i)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def SETERROR(self):
            return self.getToken(TSqlParser.SETERROR, 0)

        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_raiseerror_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseerror_statement" ):
                listener.enterRaiseerror_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseerror_statement" ):
                listener.exitRaiseerror_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseerror_statement" ):
                return visitor.visitRaiseerror_statement(self)
            else:
                return visitor.visitChildren(self)




    def raiseerror_statement(self):

        localctx = TSqlParser.Raiseerror_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_raiseerror_statement)
        self._la = 0 # Token type
        try:
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 623
                self.match(TSqlParser.RAISERROR)
                self.state = 624
                self.match(TSqlParser.LR_BRACKET)
                self.state = 625
                localctx.msg = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 793)) & ~0x3f) == 0 and ((1 << (_la - 793)) & ((1 << (TSqlParser.LOCAL_ID - 793)) | (1 << (TSqlParser.DECIMAL - 793)) | (1 << (TSqlParser.STRING - 793)))) != 0)):
                    localctx.msg = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 626
                self.match(TSqlParser.COMMA)
                self.state = 627
                localctx.severity = self.constant_LOCAL_ID()
                self.state = 628
                self.match(TSqlParser.COMMA)
                self.state = 629
                localctx.state = self.constant_LOCAL_ID()
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 630
                    self.match(TSqlParser.COMMA)
                    self.state = 631
                    self.constant_LOCAL_ID()
                    self.state = 636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 637
                self.match(TSqlParser.RR_BRACKET)
                self.state = 640
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self.match(TSqlParser.WITH)
                    self.state = 639
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LOG or _la==TSqlParser.SETERROR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 642
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.match(TSqlParser.RAISERROR)
                self.state = 646
                self.match(TSqlParser.DECIMAL)
                self.state = 647
                localctx.formatstring = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 790)) & ~0x3f) == 0 and ((1 << (_la - 790)) & ((1 << (TSqlParser.DOUBLE_QUOTE_ID - 790)) | (1 << (TSqlParser.LOCAL_ID - 790)) | (1 << (TSqlParser.STRING - 790)))) != 0)):
                    localctx.formatstring = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 648
                    self.match(TSqlParser.COMMA)
                    self.state = 649
                    localctx.argument = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 793)) & ~0x3f) == 0 and ((1 << (_la - 793)) & ((1 << (TSqlParser.LOCAL_ID - 793)) | (1 << (TSqlParser.DECIMAL - 793)) | (1 << (TSqlParser.STRING - 793)))) != 0)):
                        localctx.argument = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty_statement" ):
                return visitor.visitEmpty_statement(self)
            else:
                return visitor.visitChildren(self)




    def empty_statement(self):

        localctx = TSqlParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(TSqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Another_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declare_statement(self):
            return self.getTypedRuleContext(TSqlParser.Declare_statementContext,0)


        def cursor_statement(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_statementContext,0)


        def conversation_statement(self):
            return self.getTypedRuleContext(TSqlParser.Conversation_statementContext,0)


        def create_contract(self):
            return self.getTypedRuleContext(TSqlParser.Create_contractContext,0)


        def create_queue(self):
            return self.getTypedRuleContext(TSqlParser.Create_queueContext,0)


        def alter_queue(self):
            return self.getTypedRuleContext(TSqlParser.Alter_queueContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(TSqlParser.Execute_statementContext,0)


        def message_statement(self):
            return self.getTypedRuleContext(TSqlParser.Message_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(TSqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(TSqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(TSqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(TSqlParser.Use_statementContext,0)


        def setuser_statement(self):
            return self.getTypedRuleContext(TSqlParser.Setuser_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_another_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnother_statement" ):
                listener.enterAnother_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnother_statement" ):
                listener.exitAnother_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnother_statement" ):
                return visitor.visitAnother_statement(self)
            else:
                return visitor.visitChildren(self)




    def another_statement(self):

        localctx = TSqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_another_statement)
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.declare_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.cursor_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 661
                self.conversation_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 662
                self.create_contract()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 663
                self.create_queue()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 664
                self.alter_queue()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 665
                self.execute_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 666
                self.message_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 667
                self.security_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 668
                self.set_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 669
                self.transaction_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 670
                self.use_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 671
                self.setuser_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_pathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_directory_path_separator(self):
            return self.getTypedRuleContext(TSqlParser.File_directory_path_separatorContext,0)


        def file_path(self):
            return self.getTypedRuleContext(TSqlParser.File_pathContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_file_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_path" ):
                listener.enterFile_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_path" ):
                listener.exitFile_path(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_path" ):
                return visitor.visitFile_path(self)
            else:
                return visitor.visitChildren(self)




    def file_path(self):

        localctx = TSqlParser.File_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_file_path)
        try:
            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.BACKSLASH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.file_directory_path_separator()
                self.state = 675
                self.file_path()
                pass
            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 677
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_directory_path_separatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKSLASH(self):
            return self.getToken(TSqlParser.BACKSLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_directory_path_separator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_directory_path_separator" ):
                listener.enterFile_directory_path_separator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_directory_path_separator" ):
                listener.exitFile_directory_path_separator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_directory_path_separator" ):
                return visitor.visitFile_directory_path_separator(self)
            else:
                return visitor.visitChildren(self)




    def file_directory_path_separator(self):

        localctx = TSqlParser.File_directory_path_separatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_file_directory_path_separator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(TSqlParser.BACKSLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_session_predicate_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Event_session_predicate_factorContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Event_session_predicate_factorContext,i)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def event_session_predicate_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Event_session_predicate_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Event_session_predicate_expressionContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOT)
            else:
                return self.getToken(TSqlParser.NOT, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AND)
            else:
                return self.getToken(TSqlParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OR)
            else:
                return self.getToken(TSqlParser.OR, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_expression" ):
                listener.enterEvent_session_predicate_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_expression" ):
                listener.exitEvent_session_predicate_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_session_predicate_expression" ):
                return visitor.visitEvent_session_predicate_expression(self)
            else:
                return visitor.visitChildren(self)




    def event_session_predicate_expression(self):

        localctx = TSqlParser.Event_session_predicate_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_event_session_predicate_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 682
                    self.match(TSqlParser.COMMA)


                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AND or _la==TSqlParser.OR:
                    self.state = 685
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.AND or _la==TSqlParser.OR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 688
                    self.match(TSqlParser.NOT)


                self.state = 696
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 691
                    self.event_session_predicate_factor()
                    pass

                elif la_ == 2:
                    self.state = 692
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 693
                    self.event_session_predicate_expression()
                    self.state = 694
                    self.match(TSqlParser.RR_BRACKET)
                    pass


                self.state = 700 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.AND or _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)) | (1 << (TSqlParser.NOT - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.OR - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)) | (1 << (TSqlParser.LR_BRACKET - 768)) | (1 << (TSqlParser.COMMA - 768)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_session_predicate_leaf(self):
            return self.getTypedRuleContext(TSqlParser.Event_session_predicate_leafContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def event_session_predicate_expression(self):
            return self.getTypedRuleContext(TSqlParser.Event_session_predicate_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_factor" ):
                listener.enterEvent_session_predicate_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_factor" ):
                listener.exitEvent_session_predicate_factor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_session_predicate_factor" ):
                return visitor.visitEvent_session_predicate_factor(self)
            else:
                return visitor.visitChildren(self)




    def event_session_predicate_factor(self):

        localctx = TSqlParser.Event_session_predicate_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_event_session_predicate_factor)
        try:
            self.state = 707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.event_session_predicate_leaf()
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 703
                self.match(TSqlParser.LR_BRACKET)
                self.state = 704
                self.event_session_predicate_expression()
                self.state = 705
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_leafContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_field_name = None # IdentifierContext
            self.event_module_guid = None # IdentifierContext
            self.event_package_name = None # IdentifierContext
            self.predicate_source_name = None # IdentifierContext
            self.predicate_compare_name = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_leaf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_leaf" ):
                listener.enterEvent_session_predicate_leaf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_leaf" ):
                listener.exitEvent_session_predicate_leaf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_session_predicate_leaf" ):
                return visitor.visitEvent_session_predicate_leaf(self)
            else:
                return visitor.visitChildren(self)




    def event_session_predicate_leaf(self):

        localctx = TSqlParser.Event_session_predicate_leafContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_event_session_predicate_leaf)
        self._la = 0 # Token type
        try:
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 709
                    localctx.event_field_name = self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 720
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        self.state = 710
                        localctx.event_field_name = self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 714
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                        if la_ == 1:
                            self.state = 711
                            localctx.event_module_guid = self.identifier()
                            self.state = 712
                            self.match(TSqlParser.DOT)


                        self.state = 716
                        localctx.event_package_name = self.identifier()
                        self.state = 717
                        self.match(TSqlParser.DOT)
                        self.state = 718
                        localctx.predicate_source_name = self.identifier()
                        pass


                    self.state = 733
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                    if la_ == 1:
                        self.state = 722
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 2:
                        self.state = 723
                        self.match(TSqlParser.LESS)
                        self.state = 724
                        self.match(TSqlParser.GREATER)
                        pass

                    elif la_ == 3:
                        self.state = 725
                        self.match(TSqlParser.EXCLAMATION)
                        self.state = 726
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 4:
                        self.state = 727
                        self.match(TSqlParser.GREATER)
                        pass

                    elif la_ == 5:
                        self.state = 728
                        self.match(TSqlParser.GREATER)
                        self.state = 729
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 6:
                        self.state = 730
                        self.match(TSqlParser.LESS)
                        pass

                    elif la_ == 7:
                        self.state = 731
                        self.match(TSqlParser.LESS)
                        self.state = 732
                        self.match(TSqlParser.EQUAL)
                        pass


                    self.state = 735
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 739
                    localctx.event_module_guid = self.identifier()
                    self.state = 740
                    self.match(TSqlParser.DOT)


                self.state = 744
                localctx.event_package_name = self.identifier()
                self.state = 745
                self.match(TSqlParser.DOT)
                self.state = 746
                localctx.predicate_compare_name = self.identifier()
                self.state = 747
                self.match(TSqlParser.LR_BRACKET)
                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 748
                    localctx.event_field_name = self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 752
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 749
                        localctx.event_module_guid = self.identifier()
                        self.state = 750
                        self.match(TSqlParser.DOT)


                    self.state = 754
                    localctx.event_package_name = self.identifier()
                    self.state = 755
                    self.match(TSqlParser.DOT)
                    self.state = 756
                    localctx.predicate_source_name = self.identifier()
                    self.state = 758
                    self.match(TSqlParser.COMMA)
                    self.state = 759
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                self.state = 763
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_queueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.queue_name = None # IdentifierContext
            self.filegroup = None # IdentifierContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def queue_settings(self):
            return self.getTypedRuleContext(TSqlParser.Queue_settingsContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_queue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_queue" ):
                listener.enterCreate_queue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_queue" ):
                listener.exitCreate_queue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_queue" ):
                return visitor.visitCreate_queue(self)
            else:
                return visitor.visitChildren(self)




    def create_queue(self):

        localctx = TSqlParser.Create_queueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_create_queue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(TSqlParser.CREATE)
            self.state = 768
            self.match(TSqlParser.QUEUE)
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 769
                self.full_table_name()
                pass

            elif la_ == 2:
                self.state = 770
                localctx.queue_name = self.identifier()
                pass


            self.state = 774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 773
                self.queue_settings()


            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 776
                self.match(TSqlParser.ON)
                self.state = 777
                localctx.filegroup = self.identifier()

            elif la_ == 2:
                self.state = 778
                self.match(TSqlParser.DEFAULT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_settingsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_readers = None # Token
            self.user_name = None # Token

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATUS)
            else:
                return self.getToken(TSqlParser.STATUS, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RETENTION(self):
            return self.getToken(TSqlParser.RETENTION, 0)

        def ACTIVATION(self):
            return self.getToken(TSqlParser.ACTIVATION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def POISON_MESSAGE_HANDLING(self):
            return self.getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def PROCEDURE_NAME(self):
            return self.getToken(TSqlParser.PROCEDURE_NAME, 0)

        def func_proc_name_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_database_schemaContext,0)


        def MAX_QUEUE_READERS(self):
            return self.getToken(TSqlParser.MAX_QUEUE_READERS, 0)

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_settings" ):
                listener.enterQueue_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_settings" ):
                listener.exitQueue_settings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueue_settings" ):
                return visitor.visitQueue_settings(self)
            else:
                return visitor.visitChildren(self)




    def queue_settings(self):

        localctx = TSqlParser.Queue_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_queue_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(TSqlParser.WITH)
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 782
                self.match(TSqlParser.STATUS)
                self.state = 783
                self.match(TSqlParser.EQUAL)
                self.state = 784
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 785
                    self.match(TSqlParser.COMMA)




            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 790
                self.match(TSqlParser.RETENTION)
                self.state = 791
                self.match(TSqlParser.EQUAL)
                self.state = 792
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 793
                    self.match(TSqlParser.COMMA)




            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 798
                self.match(TSqlParser.ACTIVATION)
                self.state = 799
                self.match(TSqlParser.LR_BRACKET)
                self.state = 837
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.EXECUTE, TSqlParser.MAX_QUEUE_READERS, TSqlParser.PROCEDURE_NAME, TSqlParser.STATUS, TSqlParser.RR_BRACKET]:
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.STATUS:
                        self.state = 800
                        self.match(TSqlParser.STATUS)
                        self.state = 801
                        self.match(TSqlParser.EQUAL)
                        self.state = 802
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 804
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 803
                            self.match(TSqlParser.COMMA)




                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.PROCEDURE_NAME:
                        self.state = 808
                        self.match(TSqlParser.PROCEDURE_NAME)
                        self.state = 809
                        self.match(TSqlParser.EQUAL)
                        self.state = 810
                        self.func_proc_name_database_schema()
                        self.state = 812
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 811
                            self.match(TSqlParser.COMMA)




                    self.state = 822
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.MAX_QUEUE_READERS:
                        self.state = 816
                        self.match(TSqlParser.MAX_QUEUE_READERS)
                        self.state = 817
                        self.match(TSqlParser.EQUAL)
                        self.state = 818
                        localctx.max_readers = self.match(TSqlParser.DECIMAL)
                        self.state = 820
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 819
                            self.match(TSqlParser.COMMA)




                    self.state = 834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.EXECUTE:
                        self.state = 824
                        self.match(TSqlParser.EXECUTE)
                        self.state = 825
                        self.match(TSqlParser.AS)
                        self.state = 829
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.SELF]:
                            self.state = 826
                            self.match(TSqlParser.SELF)
                            pass
                        elif token in [TSqlParser.STRING]:
                            self.state = 827
                            localctx.user_name = self.match(TSqlParser.STRING)
                            pass
                        elif token in [TSqlParser.OWNER]:
                            self.state = 828
                            self.match(TSqlParser.OWNER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 832
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 831
                            self.match(TSqlParser.COMMA)




                    pass
                elif token in [TSqlParser.DROP]:
                    self.state = 836
                    self.match(TSqlParser.DROP)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 839
                self.match(TSqlParser.RR_BRACKET)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 840
                    self.match(TSqlParser.COMMA)




            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 845
                self.match(TSqlParser.POISON_MESSAGE_HANDLING)
                self.state = 846
                self.match(TSqlParser.LR_BRACKET)

                self.state = 847
                self.match(TSqlParser.STATUS)
                self.state = 848
                self.match(TSqlParser.EQUAL)
                self.state = 849
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 851
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_queueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.queue_name = None # IdentifierContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def queue_settings(self):
            return self.getTypedRuleContext(TSqlParser.Queue_settingsContext,0)


        def queue_action(self):
            return self.getTypedRuleContext(TSqlParser.Queue_actionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_queue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_queue" ):
                listener.enterAlter_queue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_queue" ):
                listener.exitAlter_queue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_queue" ):
                return visitor.visitAlter_queue(self)
            else:
                return visitor.visitChildren(self)




    def alter_queue(self):

        localctx = TSqlParser.Alter_queueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_alter_queue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(TSqlParser.ALTER)
            self.state = 855
            self.match(TSqlParser.QUEUE)
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 856
                self.full_table_name()
                pass

            elif la_ == 2:
                self.state = 857
                localctx.queue_name = self.identifier()
                pass


            self.state = 862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.WITH]:
                self.state = 860
                self.queue_settings()
                pass
            elif token in [TSqlParser.MOVE, TSqlParser.REBUILD, TSqlParser.REORGANIZE]:
                self.state = 861
                self.queue_action()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_actionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def queue_rebuild_options(self):
            return self.getTypedRuleContext(TSqlParser.Queue_rebuild_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def LOB_COMPACTION(self):
            return self.getToken(TSqlParser.LOB_COMPACTION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def MOVE(self):
            return self.getToken(TSqlParser.MOVE, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_action" ):
                listener.enterQueue_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_action" ):
                listener.exitQueue_action(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueue_action" ):
                return visitor.visitQueue_action(self)
            else:
                return visitor.visitChildren(self)




    def queue_action(self):

        localctx = TSqlParser.Queue_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_queue_action)
        self._la = 0 # Token type
        try:
            self.state = 885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.REBUILD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(TSqlParser.REBUILD)
                self.state = 870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 865
                    self.match(TSqlParser.WITH)
                    self.state = 866
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 867
                    self.queue_rebuild_options()
                    self.state = 868
                    self.match(TSqlParser.RR_BRACKET)


                pass
            elif token in [TSqlParser.REORGANIZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 872
                self.match(TSqlParser.REORGANIZE)
                self.state = 877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 873
                    self.match(TSqlParser.WITH)
                    self.state = 874
                    self.match(TSqlParser.LOB_COMPACTION)
                    self.state = 875
                    self.match(TSqlParser.EQUAL)
                    self.state = 876
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [TSqlParser.MOVE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 879
                self.match(TSqlParser.MOVE)
                self.state = 880
                self.match(TSqlParser.TO)
                self.state = 883
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                    self.state = 881
                    self.identifier()
                    pass
                elif token in [TSqlParser.DEFAULT]:
                    self.state = 882
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_rebuild_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_rebuild_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_rebuild_options" ):
                listener.enterQueue_rebuild_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_rebuild_options" ):
                listener.exitQueue_rebuild_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueue_rebuild_options" ):
                return visitor.visitQueue_rebuild_options(self)
            else:
                return visitor.visitChildren(self)




    def queue_rebuild_options(self):

        localctx = TSqlParser.Queue_rebuild_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_queue_rebuild_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(TSqlParser.MAXDOP)
            self.state = 888
            self.match(TSqlParser.EQUAL)
            self.state = 889
            self.match(TSqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_contractContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.owner_name = None # IdentifierContext
            self.message_type_name = None # IdentifierContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def contract_name(self):
            return self.getTypedRuleContext(TSqlParser.Contract_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def SENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SENT)
            else:
                return self.getToken(TSqlParser.SENT, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def INITIATOR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INITIATOR)
            else:
                return self.getToken(TSqlParser.INITIATOR, i)

        def TARGET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TARGET)
            else:
                return self.getToken(TSqlParser.TARGET, i)

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ANY)
            else:
                return self.getToken(TSqlParser.ANY, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT)
            else:
                return self.getToken(TSqlParser.DEFAULT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_contract

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_contract" ):
                listener.enterCreate_contract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_contract" ):
                listener.exitCreate_contract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_contract" ):
                return visitor.visitCreate_contract(self)
            else:
                return visitor.visitChildren(self)




    def create_contract(self):

        localctx = TSqlParser.Create_contractContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_create_contract)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(TSqlParser.CREATE)
            self.state = 892
            self.match(TSqlParser.CONTRACT)
            self.state = 893
            self.contract_name()
            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 894
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 895
                localctx.owner_name = self.identifier()


            self.state = 898
            self.match(TSqlParser.LR_BRACKET)
            self.state = 909 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 901
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                    self.state = 899
                    localctx.message_type_name = self.identifier()
                    pass
                elif token in [TSqlParser.DEFAULT]:
                    self.state = 900
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 903
                self.match(TSqlParser.SENT)
                self.state = 904
                self.match(TSqlParser.BY)
                self.state = 905
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ANY or _la==TSqlParser.TARGET or _la==TSqlParser.INITIATOR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 906
                    self.match(TSqlParser.COMMA)


                self.state = 911 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.DEFAULT - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0)):
                    break

            self.state = 913
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_conversation_timer(self):
            return self.getTypedRuleContext(TSqlParser.Begin_conversation_timerContext,0)


        def begin_conversation_dialog(self):
            return self.getTypedRuleContext(TSqlParser.Begin_conversation_dialogContext,0)


        def end_conversation(self):
            return self.getTypedRuleContext(TSqlParser.End_conversationContext,0)


        def get_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Get_conversationContext,0)


        def send_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Send_conversationContext,0)


        def waitfor_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Waitfor_conversationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_conversation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversation_statement" ):
                listener.enterConversation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversation_statement" ):
                listener.exitConversation_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversation_statement" ):
                return visitor.visitConversation_statement(self)
            else:
                return visitor.visitChildren(self)




    def conversation_statement(self):

        localctx = TSqlParser.Conversation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_conversation_statement)
        try:
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.begin_conversation_timer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.begin_conversation_dialog()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.end_conversation()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 918
                self.get_conversation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 919
                self.send_conversation()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 920
                self.waitfor_conversation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Message_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.message_type_name = None # IdentifierContext
            self.owner_name = None # IdentifierContext
            self.schema_collection_name = None # IdentifierContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def VALIDATION(self):
            return self.getToken(TSqlParser.VALIDATION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def EMPTY(self):
            return self.getToken(TSqlParser.EMPTY, 0)

        def WELL_FORMED_XML(self):
            return self.getToken(TSqlParser.WELL_FORMED_XML, 0)

        def VALID_XML(self):
            return self.getToken(TSqlParser.VALID_XML, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_message_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessage_statement" ):
                listener.enterMessage_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessage_statement" ):
                listener.exitMessage_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessage_statement" ):
                return visitor.visitMessage_statement(self)
            else:
                return visitor.visitChildren(self)




    def message_statement(self):

        localctx = TSqlParser.Message_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_message_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(TSqlParser.CREATE)
            self.state = 924
            self.match(TSqlParser.MESSAGE)
            self.state = 925
            self.match(TSqlParser.TYPE)
            self.state = 926
            localctx.message_type_name = self.identifier()
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 927
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 928
                localctx.owner_name = self.identifier()


            self.state = 931
            self.match(TSqlParser.VALIDATION)
            self.state = 932
            self.match(TSqlParser.EQUAL)
            self.state = 941
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.NONE]:
                self.state = 933
                self.match(TSqlParser.NONE)
                pass
            elif token in [TSqlParser.EMPTY]:
                self.state = 934
                self.match(TSqlParser.EMPTY)
                pass
            elif token in [TSqlParser.WELL_FORMED_XML]:
                self.state = 935
                self.match(TSqlParser.WELL_FORMED_XML)
                pass
            elif token in [TSqlParser.VALID_XML]:
                self.state = 936
                self.match(TSqlParser.VALID_XML)
                self.state = 937
                self.match(TSqlParser.WITH)
                self.state = 938
                self.match(TSqlParser.SCHEMA)
                self.state = 939
                self.match(TSqlParser.COLLECTION)
                self.state = 940
                localctx.schema_collection_name = self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.Insert_with_table_hintsContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WHEN)
            else:
                return self.getToken(TSqlParser.WHEN, i)

        def MATCHED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MATCHED)
            else:
                return self.getToken(TSqlParser.MATCHED, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.THEN)
            else:
                return self.getToken(TSqlParser.THEN, i)

        def merge_matched(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Merge_matchedContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Merge_matchedContext,i)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOT)
            else:
                return self.getToken(TSqlParser.NOT, i)

        def merge_not_matched(self):
            return self.getTypedRuleContext(TSqlParser.Merge_not_matchedContext,0)


        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def SOURCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SOURCE)
            else:
                return self.getToken(TSqlParser.SOURCE, i)

        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AND)
            else:
                return self.getToken(TSqlParser.AND, i)

        def TARGET(self):
            return self.getToken(TSqlParser.TARGET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_statement" ):
                return visitor.visitMerge_statement(self)
            else:
                return visitor.visitChildren(self)




    def merge_statement(self):

        localctx = TSqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 943
                self.with_expression()


            self.state = 946
            self.match(TSqlParser.MERGE)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.TOP:
                self.state = 947
                self.match(TSqlParser.TOP)
                self.state = 948
                self.match(TSqlParser.LR_BRACKET)
                self.state = 949
                self.expression(0)
                self.state = 950
                self.match(TSqlParser.RR_BRACKET)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PERCENT:
                    self.state = 951
                    self.match(TSqlParser.PERCENT)




            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 956
                self.match(TSqlParser.INTO)


            self.state = 959
            self.ddl_object()
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 960
                self.insert_with_table_hints()


            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 963
                self.as_table_alias()


            self.state = 966
            self.match(TSqlParser.USING)
            self.state = 967
            self.table_sources()
            self.state = 968
            self.match(TSqlParser.ON)
            self.state = 969
            self.search_condition()
            self.state = 980
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 970
                    self.match(TSqlParser.WHEN)
                    self.state = 971
                    self.match(TSqlParser.MATCHED)
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.AND:
                        self.state = 972
                        self.match(TSqlParser.AND)
                        self.state = 973
                        self.search_condition()


                    self.state = 976
                    self.match(TSqlParser.THEN)
                    self.state = 977
                    self.merge_matched() 
                self.state = 982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 983
                self.match(TSqlParser.WHEN)
                self.state = 984
                self.match(TSqlParser.NOT)
                self.state = 985
                self.match(TSqlParser.MATCHED)
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.BY:
                    self.state = 986
                    self.match(TSqlParser.BY)
                    self.state = 987
                    self.match(TSqlParser.TARGET)


                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AND:
                    self.state = 990
                    self.match(TSqlParser.AND)
                    self.state = 991
                    self.search_condition()


                self.state = 994
                self.match(TSqlParser.THEN)
                self.state = 995
                self.merge_not_matched()


            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.WHEN:
                self.state = 998
                self.match(TSqlParser.WHEN)
                self.state = 999
                self.match(TSqlParser.NOT)
                self.state = 1000
                self.match(TSqlParser.MATCHED)
                self.state = 1001
                self.match(TSqlParser.BY)
                self.state = 1002
                self.match(TSqlParser.SOURCE)
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AND:
                    self.state = 1003
                    self.match(TSqlParser.AND)
                    self.state = 1004
                    self.search_condition()


                self.state = 1007
                self.match(TSqlParser.THEN)
                self.state = 1008
                self.merge_matched()
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OUTPUT:
                self.state = 1014
                self.output_clause()


            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OPTION:
                self.state = 1017
                self.option_clause()


            self.state = 1020
            self.match(TSqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_matchedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Update_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_matched" ):
                listener.enterMerge_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_matched" ):
                listener.exitMerge_matched(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_matched" ):
                return visitor.visitMerge_matched(self)
            else:
                return visitor.visitChildren(self)




    def merge_matched(self):

        localctx = TSqlParser.Merge_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_merge_matched)
        self._la = 0 # Token type
        try:
            self.state = 1033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.match(TSqlParser.UPDATE)
                self.state = 1023
                self.match(TSqlParser.SET)
                self.state = 1024
                self.update_elem()
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 1025
                    self.match(TSqlParser.COMMA)
                    self.state = 1026
                    self.update_elem()
                    self.state = 1031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [TSqlParser.DELETE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.match(TSqlParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_not_matchedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_not_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_not_matched" ):
                listener.enterMerge_not_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_not_matched" ):
                listener.exitMerge_not_matched(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_not_matched" ):
                return visitor.visitMerge_not_matched(self)
            else:
                return visitor.visitChildren(self)




    def merge_not_matched(self):

        localctx = TSqlParser.Merge_not_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_merge_not_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(TSqlParser.INSERT)
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LR_BRACKET:
                self.state = 1036
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1037
                self.column_name_list()
                self.state = 1038
                self.match(TSqlParser.RR_BRACKET)


            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.VALUES]:
                self.state = 1042
                self.table_value_constructor()
                pass
            elif token in [TSqlParser.DEFAULT]:
                self.state = 1043
                self.match(TSqlParser.DEFAULT)
                self.state = 1044
                self.match(TSqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(TSqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FROM)
            else:
                return self.getToken(TSqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = TSqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 1047
                self.with_expression()


            self.state = 1050
            self.match(TSqlParser.DELETE)
            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1051
                self.match(TSqlParser.TOP)
                self.state = 1052
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1053
                self.expression(0)
                self.state = 1054
                self.match(TSqlParser.RR_BRACKET)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PERCENT:
                    self.state = 1055
                    self.match(TSqlParser.PERCENT)



            elif la_ == 2:
                self.state = 1058
                self.match(TSqlParser.TOP)
                self.state = 1059
                self.match(TSqlParser.DECIMAL)


            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 1062
                self.match(TSqlParser.FROM)


            self.state = 1065
            self.delete_statement_from()
            self.state = 1067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1066
                self.insert_with_table_hints()


            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1069
                self.output_clause()


            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 1072
                self.match(TSqlParser.FROM)
                self.state = 1073
                self.table_sources()


            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WHERE:
                self.state = 1076
                self.match(TSqlParser.WHERE)
                self.state = 1087
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.CASE, TSqlParser.COALESCE, TSqlParser.CONVERT, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.DEFAULT, TSqlParser.EVENTDATA, TSqlParser.EXISTS, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.IDENTITY, TSqlParser.IIF, TSqlParser.INIT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.NOT, TSqlParser.NULL, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.OVER, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.RIGHT, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.IDENTIFIER, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.LR_BRACKET, TSqlParser.PLUS, TSqlParser.MINUS, TSqlParser.BIT_NOT]:
                    self.state = 1077
                    self.search_condition()
                    pass
                elif token in [TSqlParser.CURRENT]:
                    self.state = 1078
                    self.match(TSqlParser.CURRENT)
                    self.state = 1079
                    self.match(TSqlParser.OF)
                    self.state = 1085
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                    if la_ == 1:
                        self.state = 1081
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                        if la_ == 1:
                            self.state = 1080
                            self.match(TSqlParser.GLOBAL)


                        self.state = 1083
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 1084
                        localctx.cursor_var = self.match(TSqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 1091
                self.for_clause()


            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OPTION:
                self.state = 1094
                self.option_clause()


            self.state = 1098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1097
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statement_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(TSqlParser.Table_aliasContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_delete_statement_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_from" ):
                listener.enterDelete_statement_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_from" ):
                listener.exitDelete_statement_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement_from" ):
                return visitor.visitDelete_statement_from(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement_from(self):

        localctx = TSqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_delete_statement_from)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.ddl_object()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1101
                self.table_alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1102
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1103
                localctx.table_var = self.match(TSqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(TSqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.Insert_with_table_hintsContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = TSqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 1106
                self.with_expression()


            self.state = 1109
            self.match(TSqlParser.INSERT)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.TOP:
                self.state = 1110
                self.match(TSqlParser.TOP)
                self.state = 1111
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1112
                self.expression(0)
                self.state = 1113
                self.match(TSqlParser.RR_BRACKET)
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PERCENT:
                    self.state = 1114
                    self.match(TSqlParser.PERCENT)




            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 1119
                self.match(TSqlParser.INTO)


            self.state = 1124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.state = 1122
                self.ddl_object()
                pass
            elif token in [TSqlParser.OPENDATASOURCE, TSqlParser.OPENQUERY]:
                self.state = 1123
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1126
                self.insert_with_table_hints()


            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1129
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1130
                self.column_name_list()
                self.state = 1131
                self.match(TSqlParser.RR_BRACKET)


            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OUTPUT:
                self.state = 1135
                self.output_clause()


            self.state = 1138
            self.insert_statement_value()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 1139
                self.for_clause()


            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OPTION:
                self.state = 1142
                self.option_clause()


            self.state = 1146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1145
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statement_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(TSqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(TSqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_statement_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement_value" ):
                listener.enterInsert_statement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement_value" ):
                listener.exitInsert_statement_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement_value" ):
                return visitor.visitInsert_statement_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement_value(self):

        localctx = TSqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_insert_statement_value)
        try:
            self.state = 1153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.table_value_constructor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1149
                self.derived_table()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1150
                self.execute_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1151
                self.match(TSqlParser.DEFAULT)
                self.state = 1152
                self.match(TSqlParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Receive_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_variable = None # IdentifierContext
            self.where = None # Search_conditionContext

        def RECEIVE(self):
            return self.getToken(TSqlParser.RECEIVE, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def top_clause(self):
            return self.getTypedRuleContext(TSqlParser.Top_clauseContext,0)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_receive_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceive_statement" ):
                listener.enterReceive_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceive_statement" ):
                listener.exitReceive_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceive_statement" ):
                return visitor.visitReceive_statement(self)
            else:
                return visitor.visitChildren(self)




    def receive_statement(self):

        localctx = TSqlParser.Receive_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_receive_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LR_BRACKET:
                self.state = 1155
                self.match(TSqlParser.LR_BRACKET)


            self.state = 1158
            self.match(TSqlParser.RECEIVE)
            self.state = 1163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ALL]:
                self.state = 1159
                self.match(TSqlParser.ALL)
                pass
            elif token in [TSqlParser.DISTINCT]:
                self.state = 1160
                self.match(TSqlParser.DISTINCT)
                pass
            elif token in [TSqlParser.TOP]:
                self.state = 1161
                self.top_clause()
                pass
            elif token in [TSqlParser.STAR]:
                self.state = 1162
                self.match(TSqlParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.LOCAL_ID:
                self.state = 1165
                self.match(TSqlParser.LOCAL_ID)
                self.state = 1166
                self.match(TSqlParser.EQUAL)
                self.state = 1167
                self.expression(0)
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 1168
                    self.match(TSqlParser.COMMA)


                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1176
            self.match(TSqlParser.FROM)
            self.state = 1177
            self.full_table_name()
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 1178
                self.match(TSqlParser.INTO)
                self.state = 1179
                localctx.table_variable = self.identifier()

                self.state = 1180
                self.match(TSqlParser.WHERE)
                self.state = 1181
                localctx.where = self.search_condition()


            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.RR_BRACKET:
                self.state = 1185
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(TSqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = TSqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 1188
                self.with_expression()


            self.state = 1191
            self.query_expression()
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1192
                self.order_by_clause()


            self.state = 1196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1195
                self.for_clause()


            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1198
                self.option_clause()


            self.state = 1202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1201
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime" ):
                listener.enterTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime" ):
                listener.exitTime(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTime" ):
                return visitor.visitTime(self)
            else:
                return visitor.visitChildren(self)




    def time(self):

        localctx = TSqlParser.TimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.LOCAL_ID]:
                self.state = 1204
                self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.state = 1205
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def search_condition_list(self):
            return self.getTypedRuleContext(TSqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = TSqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 1208
                self.with_expression()


            self.state = 1211
            self.match(TSqlParser.UPDATE)
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.TOP:
                self.state = 1212
                self.match(TSqlParser.TOP)
                self.state = 1213
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1214
                self.expression(0)
                self.state = 1215
                self.match(TSqlParser.RR_BRACKET)
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PERCENT:
                    self.state = 1216
                    self.match(TSqlParser.PERCENT)




            self.state = 1223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.state = 1221
                self.ddl_object()
                pass
            elif token in [TSqlParser.OPENDATASOURCE, TSqlParser.OPENQUERY]:
                self.state = 1222
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH or _la==TSqlParser.LR_BRACKET:
                self.state = 1225
                self.with_table_hints()


            self.state = 1228
            self.match(TSqlParser.SET)
            self.state = 1229
            self.update_elem()
            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 1230
                self.match(TSqlParser.COMMA)
                self.state = 1231
                self.update_elem()
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1237
                self.output_clause()


            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 1240
                self.match(TSqlParser.FROM)
                self.state = 1241
                self.table_sources()


            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WHERE:
                self.state = 1244
                self.match(TSqlParser.WHERE)
                self.state = 1255
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.CASE, TSqlParser.COALESCE, TSqlParser.CONVERT, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.DEFAULT, TSqlParser.EVENTDATA, TSqlParser.EXISTS, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.IDENTITY, TSqlParser.IIF, TSqlParser.INIT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.NOT, TSqlParser.NULL, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.OVER, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.RIGHT, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.IDENTIFIER, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.LR_BRACKET, TSqlParser.PLUS, TSqlParser.MINUS, TSqlParser.BIT_NOT]:
                    self.state = 1245
                    self.search_condition_list()
                    pass
                elif token in [TSqlParser.CURRENT]:
                    self.state = 1246
                    self.match(TSqlParser.CURRENT)
                    self.state = 1247
                    self.match(TSqlParser.OF)
                    self.state = 1253
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        self.state = 1249
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                        if la_ == 1:
                            self.state = 1248
                            self.match(TSqlParser.GLOBAL)


                        self.state = 1251
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 1252
                        localctx.cursor_var = self.match(TSqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 1259
                self.for_clause()


            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OPTION:
                self.state = 1262
                self.option_clause()


            self.state = 1266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1265
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Output_dml_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_output_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_clause" ):
                listener.enterOutput_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_clause" ):
                listener.exitOutput_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_clause" ):
                return visitor.visitOutput_clause(self)
            else:
                return visitor.visitChildren(self)




    def output_clause(self):

        localctx = TSqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(TSqlParser.OUTPUT)
            self.state = 1269
            self.output_dml_list_elem()
            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 1270
                self.match(TSqlParser.COMMA)
                self.state = 1271
                self.output_dml_list_elem()
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 1277
                self.match(TSqlParser.INTO)
                self.state = 1280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1278
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 1279
                    self.table_name()
                    pass


                self.state = 1286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1282
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1283
                    self.column_name_list()
                    self.state = 1284
                    self.match(TSqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_dml_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_output_dml_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_dml_list_elem" ):
                listener.enterOutput_dml_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_dml_list_elem" ):
                listener.exitOutput_dml_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_dml_list_elem" ):
                return visitor.visitOutput_dml_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def output_dml_list_elem(self):

        localctx = TSqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_output_dml_list_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1290
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 1291
                self.expression(0)
                pass


            self.state = 1295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1294
                self.as_column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def DELETED(self):
            return self.getToken(TSqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(TSqlParser.INSERTED, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(TSqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_output_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_column_name" ):
                listener.enterOutput_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_column_name" ):
                listener.exitOutput_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_column_name" ):
                return visitor.visitOutput_column_name(self)
            else:
                return visitor.visitChildren(self)




    def output_column_name(self):

        localctx = TSqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_output_column_name)
        try:
            self.state = 1308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1297
                    self.match(TSqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 1298
                    self.match(TSqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 1299
                    self.table_name()
                    pass


                self.state = 1302
                self.match(TSqlParser.DOT)
                self.state = 1305
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.STAR]:
                    self.state = 1303
                    self.match(TSqlParser.STAR)
                    pass
                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                    self.state = 1304
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.DOLLAR_ACTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.match(TSqlParser.DOLLAR_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_function_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(TSqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(TSqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_rowset_function_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function_limited" ):
                listener.enterRowset_function_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function_limited" ):
                listener.exitRowset_function_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function_limited" ):
                return visitor.visitRowset_function_limited(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function_limited(self):

        localctx = TSqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_rowset_function_limited)
        try:
            self.state = 1312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.OPENQUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self.openquery()
                pass
            elif token in [TSqlParser.OPENDATASOURCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # IdentifierContext
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(TSqlParser.OPENQUERY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_openquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenquery" ):
                listener.enterOpenquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenquery" ):
                listener.exitOpenquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenquery" ):
                return visitor.visitOpenquery(self)
            else:
                return visitor.visitChildren(self)




    def openquery(self):

        localctx = TSqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(TSqlParser.OPENQUERY)
            self.state = 1315
            self.match(TSqlParser.LR_BRACKET)
            self.state = 1316
            localctx.linked_server = self.identifier()
            self.state = 1317
            self.match(TSqlParser.COMMA)
            self.state = 1318
            localctx.query = self.match(TSqlParser.STRING)
            self.state = 1319
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpendatasourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # IdentifierContext
            self.scheme = None # IdentifierContext
            self.table = None # IdentifierContext

        def OPENDATASOURCE(self):
            return self.getToken(TSqlParser.OPENDATASOURCE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_opendatasource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpendatasource" ):
                listener.enterOpendatasource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpendatasource" ):
                listener.exitOpendatasource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpendatasource" ):
                return visitor.visitOpendatasource(self)
            else:
                return visitor.visitChildren(self)




    def opendatasource(self):

        localctx = TSqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(TSqlParser.OPENDATASOURCE)
            self.state = 1322
            self.match(TSqlParser.LR_BRACKET)
            self.state = 1323
            localctx.provider = self.match(TSqlParser.STRING)
            self.state = 1324
            self.match(TSqlParser.COMMA)
            self.state = 1325
            localctx.init = self.match(TSqlParser.STRING)
            self.state = 1326
            self.match(TSqlParser.RR_BRACKET)
            self.state = 1327
            self.match(TSqlParser.DOT)
            self.state = 1329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                self.state = 1328
                localctx.database = self.identifier()


            self.state = 1331
            self.match(TSqlParser.DOT)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                self.state = 1332
                localctx.scheme = self.identifier()


            self.state = 1335
            self.match(TSqlParser.DOT)

            self.state = 1336
            localctx.table = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Token

        def DECLARE(self):
            return self.getToken(TSqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(TSqlParser.Table_type_definitionContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Declare_localContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def xml_type_definition(self):
            return self.getTypedRuleContext(TSqlParser.Xml_type_definitionContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TSqlParser.XMLNAMESPACES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_statement" ):
                return visitor.visitDeclare_statement(self)
            else:
                return visitor.visitChildren(self)




    def declare_statement(self):

        localctx = TSqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1338
                self.match(TSqlParser.DECLARE)
                self.state = 1339
                self.match(TSqlParser.LOCAL_ID)
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AS:
                    self.state = 1340
                    self.match(TSqlParser.AS)


                self.state = 1343
                self.table_type_definition()
                self.state = 1345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1344
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1347
                self.match(TSqlParser.DECLARE)
                self.state = 1348
                self.declare_local()
                self.state = 1353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 1349
                    self.match(TSqlParser.COMMA)
                    self.state = 1350
                    self.declare_local()
                    self.state = 1355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1356
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1359
                self.match(TSqlParser.DECLARE)
                self.state = 1360
                self.match(TSqlParser.LOCAL_ID)
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AS:
                    self.state = 1361
                    self.match(TSqlParser.AS)


                self.state = 1364
                self.xml_type_definition()
                self.state = 1366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1365
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1368
                self.match(TSqlParser.WITH)
                self.state = 1369
                self.match(TSqlParser.XMLNAMESPACES)
                self.state = 1370
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1371
                localctx.xml_namespace_uri = self.match(TSqlParser.STRING)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 1372
                    self.match(TSqlParser.COMMA)


                self.state = 1375
                self.match(TSqlParser.AS)
                self.state = 1376
                self.identifier()
                self.state = 1377
                self.match(TSqlParser.RR_BRACKET)
                self.state = 1379
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1378
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(TSqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DEALLOCATE(self):
            return self.getToken(TSqlParser.DEALLOCATE, 0)

        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(TSqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(TSqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(TSqlParser.OPEN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_cursor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_statement" ):
                listener.enterCursor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_statement" ):
                listener.exitCursor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_statement" ):
                return visitor.visitCursor_statement(self)
            else:
                return visitor.visitChildren(self)




    def cursor_statement(self):

        localctx = TSqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_cursor_statement)
        self._la = 0 # Token type
        try:
            self.state = 1412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1383
                self.match(TSqlParser.CLOSE)
                self.state = 1385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1384
                    self.match(TSqlParser.GLOBAL)


                self.state = 1387
                self.cursor_name()
                self.state = 1389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1388
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [TSqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.match(TSqlParser.DEALLOCATE)
                self.state = 1393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1392
                    self.match(TSqlParser.GLOBAL)


                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CURSOR:
                    self.state = 1395
                    self.match(TSqlParser.CURSOR)


                self.state = 1398
                self.cursor_name()
                self.state = 1400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [TSqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1402
                self.declare_cursor()
                pass
            elif token in [TSqlParser.FETCH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1403
                self.fetch_cursor()
                pass
            elif token in [TSqlParser.OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1404
                self.match(TSqlParser.OPEN)
                self.state = 1406
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1405
                    self.match(TSqlParser.GLOBAL)


                self.state = 1408
                self.cursor_name()
                self.state = 1410
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1409
                    self.match(TSqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def execute_body(self):
            return self.getTypedRuleContext(TSqlParser.Execute_bodyContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_execute_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement" ):
                listener.enterExecute_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement" ):
                listener.exitExecute_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement" ):
                return visitor.visitExecute_statement(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement(self):

        localctx = TSqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_execute_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(TSqlParser.EXECUTE)
            self.state = 1415
            self.execute_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def func_proc_name_server_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_server_database_schemaContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_statement_argContext,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_var_stringContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PLUS)
            else:
                return self.getToken(TSqlParser.PLUS, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_body" ):
                listener.enterExecute_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_body" ):
                listener.exitExecute_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_body" ):
                return visitor.visitExecute_body(self)
            else:
                return visitor.visitChildren(self)




    def execute_body(self):

        localctx = TSqlParser.Execute_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_execute_body)
        self._la = 0 # Token type
        try:
            self.state = 1459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1417
                    localctx.return_status = self.match(TSqlParser.LOCAL_ID)
                    self.state = 1418
                    self.match(TSqlParser.EQUAL)


                self.state = 1423
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1421
                    self.func_proc_name_server_database_schema()
                    pass

                elif la_ == 2:
                    self.state = 1422
                    self.expression(0)
                    pass


                self.state = 1433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1425
                    self.execute_statement_arg()
                    self.state = 1430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.COMMA:
                        self.state = 1426
                        self.match(TSqlParser.COMMA)
                        self.state = 1427
                        self.execute_statement_arg()
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1435
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1438
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1439
                self.execute_var_string()
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.PLUS:
                    self.state = 1440
                    self.match(TSqlParser.PLUS)
                    self.state = 1441
                    self.execute_var_string()
                    self.state = 1446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1447
                self.match(TSqlParser.RR_BRACKET)
                self.state = 1454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.AS:
                        self.state = 1448
                        self.match(TSqlParser.AS)


                    self.state = 1451
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.USER or _la==TSqlParser.LOGIN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1452
                    self.match(TSqlParser.EQUAL)
                    self.state = 1453
                    self.match(TSqlParser.STRING)


                self.state = 1457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1456
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(TSqlParser.Constant_LOCAL_IDContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_statement_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg" ):
                listener.enterExecute_statement_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg" ):
                listener.exitExecute_statement_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement_arg" ):
                return visitor.visitExecute_statement_arg(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement_arg(self):

        localctx = TSqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1461
                localctx.parameter = self.match(TSqlParser.LOCAL_ID)
                self.state = 1462
                self.match(TSqlParser.EQUAL)


            self.state = 1474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.IDENTIFIER, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.state = 1467
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1465
                    self.constant_LOCAL_ID()
                    pass

                elif la_ == 2:
                    self.state = 1466
                    self.identifier()
                    pass


                self.state = 1470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1469
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OUT or _la==TSqlParser.OUTPUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [TSqlParser.DEFAULT]:
                self.state = 1472
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [TSqlParser.NULL]:
                self.state = 1473
                self.match(TSqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_var_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_var_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_var_string" ):
                listener.enterExecute_var_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_var_string" ):
                listener.exitExecute_var_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_var_string" ):
                return visitor.visitExecute_var_string(self)
            else:
                return visitor.visitChildren(self)




    def execute_var_string(self):

        localctx = TSqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self._identifier = None # IdentifierContext
            self.to_principal = list() # of IdentifierContexts
            self.as_principal = None # IdentifierContext

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GRANT)
            else:
                return self.getToken(TSqlParser.GRANT, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(TSqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(TSqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(TSqlParser.PRIVILEGES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def REVERT(self):
            return self.getToken(TSqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(TSqlParser.COOKIE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def open_key(self):
            return self.getTypedRuleContext(TSqlParser.Open_keyContext,0)


        def close_key(self):
            return self.getTypedRuleContext(TSqlParser.Close_keyContext,0)


        def create_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_keyContext,0)


        def create_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Create_certificateContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_security_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_statement" ):
                listener.enterSecurity_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_statement" ):
                listener.exitSecurity_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurity_statement" ):
                return visitor.visitSecurity_statement(self)
            else:
                return visitor.visitChildren(self)




    def security_statement(self):

        localctx = TSqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 1537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1478
                self.execute_clause()
                self.state = 1480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1479
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1482
                self.match(TSqlParser.GRANT)
                self.state = 1494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.ALL]:
                    self.state = 1483
                    self.match(TSqlParser.ALL)
                    self.state = 1485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.PRIVILEGES:
                        self.state = 1484
                        self.match(TSqlParser.PRIVILEGES)


                    pass
                elif token in [TSqlParser.ALTER, TSqlParser.CREATE, TSqlParser.EXECUTE, TSqlParser.INSERT, TSqlParser.REFERENCES, TSqlParser.SELECT, TSqlParser.VIEW, TSqlParser.CONTROL, TSqlParser.IMPERSONATE, TSqlParser.SHOWPLAN, TSqlParser.TAKE]:
                    self.state = 1487
                    self.grant_permission()
                    self.state = 1492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.LR_BRACKET:
                        self.state = 1488
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 1489
                        self.column_name_list()
                        self.state = 1490
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ON:
                    self.state = 1496
                    self.match(TSqlParser.ON)
                    self.state = 1497
                    localctx.on_id = self.table_name()


                self.state = 1500
                self.match(TSqlParser.TO)

                self.state = 1501
                localctx._identifier = self.identifier()
                localctx.to_principal.append(localctx._identifier)
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 1502
                    self.match(TSqlParser.COMMA)
                    self.state = 1503
                    localctx._identifier = self.identifier()
                    localctx.to_principal.append(localctx._identifier)
                    self.state = 1508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1509
                    self.match(TSqlParser.WITH)
                    self.state = 1510
                    self.match(TSqlParser.GRANT)
                    self.state = 1511
                    self.match(TSqlParser.OPTION)


                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AS:
                    self.state = 1514
                    self.match(TSqlParser.AS)
                    self.state = 1515
                    localctx.as_principal = self.identifier()


                self.state = 1519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1518
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1521
                self.match(TSqlParser.REVERT)
                self.state = 1528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1522
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1523
                    self.match(TSqlParser.WITH)
                    self.state = 1524
                    self.match(TSqlParser.COOKIE)
                    self.state = 1525
                    self.match(TSqlParser.EQUAL)
                    self.state = 1526
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 1527
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 1531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1530
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1533
                self.open_key()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1534
                self.close_key()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1535
                self.create_key()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1536
                self.create_certificate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_certificateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # IdentifierContext
            self.user_name = None # IdentifierContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def existing_keys(self):
            return self.getTypedRuleContext(TSqlParser.Existing_keysContext,0)


        def generate_new_keys(self):
            return self.getTypedRuleContext(TSqlParser.Generate_new_keysContext,0)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def ACTIVE(self):
            return self.getToken(TSqlParser.ACTIVE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_certificate" ):
                listener.enterCreate_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_certificate" ):
                listener.exitCreate_certificate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_certificate" ):
                return visitor.visitCreate_certificate(self)
            else:
                return visitor.visitChildren(self)




    def create_certificate(self):

        localctx = TSqlParser.Create_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_create_certificate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(TSqlParser.CREATE)
            self.state = 1540
            self.match(TSqlParser.CERTIFICATE)
            self.state = 1541
            localctx.certificate_name = self.identifier()
            self.state = 1544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 1542
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 1543
                localctx.user_name = self.identifier()


            self.state = 1549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FROM]:
                self.state = 1546
                self.match(TSqlParser.FROM)
                self.state = 1547
                self.existing_keys()
                pass
            elif token in [TSqlParser.WITH, TSqlParser.ENCRYPTION]:
                self.state = 1548
                self.generate_new_keys()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1551
                self.match(TSqlParser.ACTIVE)
                self.state = 1552
                self.match(TSqlParser.FOR)
                self.state = 1553
                self.match(TSqlParser.BEGIN)
                self.state = 1554
                self.match(TSqlParser.DIALOG)
                self.state = 1555
                self.match(TSqlParser.EQUAL)
                self.state = 1556
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Existing_keysContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # IdentifierContext
            self.path_to_file = None # Token

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EXECUTABLE(self):
            return self.getToken(TSqlParser.EXECUTABLE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def private_key_options(self):
            return self.getTypedRuleContext(TSqlParser.Private_key_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_existing_keys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExisting_keys" ):
                listener.enterExisting_keys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExisting_keys" ):
                listener.exitExisting_keys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExisting_keys" ):
                return visitor.visitExisting_keys(self)
            else:
                return visitor.visitChildren(self)




    def existing_keys(self):

        localctx = TSqlParser.Existing_keysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_existing_keys)
        self._la = 0 # Token type
        try:
            self.state = 1576
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ASSEMBLY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1559
                self.match(TSqlParser.ASSEMBLY)
                self.state = 1560
                localctx.assembly_name = self.identifier()
                pass
            elif token in [TSqlParser.FILE, TSqlParser.EXECUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.EXECUTABLE:
                    self.state = 1561
                    self.match(TSqlParser.EXECUTABLE)


                self.state = 1564
                self.match(TSqlParser.FILE)
                self.state = 1565
                self.match(TSqlParser.EQUAL)
                self.state = 1566
                localctx.path_to_file = self.match(TSqlParser.STRING)
                self.state = 1574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.match(TSqlParser.WITH)
                    self.state = 1568
                    self.match(TSqlParser.PRIVATE)
                    self.state = 1569
                    self.match(TSqlParser.KEY)
                    self.state = 1570
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1571
                    self.private_key_options()
                    self.state = 1572
                    self.match(TSqlParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Private_key_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # Token
            self.password = None # Token

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_private_key_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_key_options" ):
                listener.enterPrivate_key_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_key_options" ):
                listener.exitPrivate_key_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate_key_options" ):
                return visitor.visitPrivate_key_options(self)
            else:
                return visitor.visitChildren(self)




    def private_key_options(self):

        localctx = TSqlParser.Private_key_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_private_key_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            _la = self._input.LA(1)
            if not(_la==TSqlParser.FILE or _la==TSqlParser.BINARY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1579
            self.match(TSqlParser.EQUAL)
            self.state = 1580
            localctx.path = self.match(TSqlParser.STRING)
            self.state = 1587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 1581
                self.match(TSqlParser.COMMA)
                self.state = 1582
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DECRYPTION or _la==TSqlParser.ENCRYPTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1583
                self.match(TSqlParser.BY)
                self.state = 1584
                self.match(TSqlParser.PASSWORD)
                self.state = 1585
                self.match(TSqlParser.EQUAL)
                self.state = 1586
                localctx.password = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generate_new_keysContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.certificate_subject_name = None # Token

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SUBJECT(self):
            return self.getToken(TSqlParser.SUBJECT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def date_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Date_optionsContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Date_optionsContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_generate_new_keys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerate_new_keys" ):
                listener.enterGenerate_new_keys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerate_new_keys" ):
                listener.exitGenerate_new_keys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenerate_new_keys" ):
                return visitor.visitGenerate_new_keys(self)
            else:
                return visitor.visitChildren(self)




    def generate_new_keys(self):

        localctx = TSqlParser.Generate_new_keysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_generate_new_keys)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ENCRYPTION:
                self.state = 1589
                self.match(TSqlParser.ENCRYPTION)
                self.state = 1590
                self.match(TSqlParser.BY)
                self.state = 1591
                self.match(TSqlParser.PASSWORD)
                self.state = 1592
                self.match(TSqlParser.EQUAL)
                self.state = 1593
                localctx.password = self.match(TSqlParser.STRING)


            self.state = 1596
            self.match(TSqlParser.WITH)
            self.state = 1597
            self.match(TSqlParser.SUBJECT)
            self.state = 1598
            self.match(TSqlParser.EQUAL)
            self.state = 1599
            localctx.certificate_subject_name = self.match(TSqlParser.STRING)
            self.state = 1604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 1600
                self.match(TSqlParser.COMMA)
                self.state = 1601
                self.date_options()
                self.state = 1606
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def START_DATE(self):
            return self.getToken(TSqlParser.START_DATE, 0)

        def EXPIRY_DATE(self):
            return self.getToken(TSqlParser.EXPIRY_DATE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_date_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_options" ):
                listener.enterDate_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_options" ):
                listener.exitDate_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDate_options" ):
                return visitor.visitDate_options(self)
            else:
                return visitor.visitChildren(self)




    def date_options(self):

        localctx = TSqlParser.Date_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_date_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            _la = self._input.LA(1)
            if not(_la==TSqlParser.EXPIRY_DATE or _la==TSqlParser.START_DATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1608
            self.match(TSqlParser.EQUAL)
            self.state = 1609
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdentifierContext
            self.password = None # Token

        def OPEN(self):
            return self.getToken(TSqlParser.OPEN, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def decryption_mechanism(self):
            return self.getTypedRuleContext(TSqlParser.Decryption_mechanismContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_open_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_key" ):
                listener.enterOpen_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_key" ):
                listener.exitOpen_key(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_key" ):
                return visitor.visitOpen_key(self)
            else:
                return visitor.visitChildren(self)




    def open_key(self):

        localctx = TSqlParser.Open_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_open_key)
        try:
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1611
                self.match(TSqlParser.OPEN)
                self.state = 1612
                self.match(TSqlParser.SYMMETRIC)
                self.state = 1613
                self.match(TSqlParser.KEY)
                self.state = 1614
                localctx.key_name = self.identifier()
                self.state = 1615
                self.match(TSqlParser.DECRYPTION)
                self.state = 1616
                self.match(TSqlParser.BY)
                self.state = 1617
                self.decryption_mechanism()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1619
                self.match(TSqlParser.OPEN)
                self.state = 1620
                self.match(TSqlParser.MASTER)
                self.state = 1621
                self.match(TSqlParser.KEY)
                self.state = 1622
                self.match(TSqlParser.DECRYPTION)
                self.state = 1623
                self.match(TSqlParser.BY)
                self.state = 1624
                self.match(TSqlParser.PASSWORD)
                self.state = 1625
                self.match(TSqlParser.EQUAL)
                self.state = 1626
                localctx.password = self.match(TSqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdentifierContext

        def CLOSE(self):
            return self.getToken(TSqlParser.CLOSE, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def KEYS(self):
            return self.getToken(TSqlParser.KEYS, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_close_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_key" ):
                listener.enterClose_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_key" ):
                listener.exitClose_key(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClose_key" ):
                return visitor.visitClose_key(self)
            else:
                return visitor.visitChildren(self)




    def close_key(self):

        localctx = TSqlParser.Close_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_close_key)
        try:
            self.state = 1640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1629
                self.match(TSqlParser.CLOSE)
                self.state = 1630
                self.match(TSqlParser.SYMMETRIC)
                self.state = 1631
                self.match(TSqlParser.KEY)
                self.state = 1632
                localctx.key_name = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1633
                self.match(TSqlParser.CLOSE)
                self.state = 1634
                self.match(TSqlParser.ALL)
                self.state = 1635
                self.match(TSqlParser.SYMMETRIC)
                self.state = 1636
                self.match(TSqlParser.KEYS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1637
                self.match(TSqlParser.CLOSE)
                self.state = 1638
                self.match(TSqlParser.MASTER)
                self.state = 1639
                self.match(TSqlParser.KEY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.key_name = None # IdentifierContext
            self.user_name = None # IdentifierContext
            self.provider_name = None # IdentifierContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def key_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Key_optionsContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Key_optionsContext,i)


        def encryption_mechanism(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Encryption_mechanismContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Encryption_mechanismContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_key" ):
                listener.enterCreate_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_key" ):
                listener.exitCreate_key(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_key" ):
                return visitor.visitCreate_key(self)
            else:
                return visitor.visitChildren(self)




    def create_key(self):

        localctx = TSqlParser.Create_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_create_key)
        self._la = 0 # Token type
        try:
            self.state = 1677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1642
                self.match(TSqlParser.CREATE)
                self.state = 1643
                self.match(TSqlParser.MASTER)
                self.state = 1644
                self.match(TSqlParser.KEY)
                self.state = 1645
                self.match(TSqlParser.ENCRYPTION)
                self.state = 1646
                self.match(TSqlParser.BY)
                self.state = 1647
                self.match(TSqlParser.PASSWORD)
                self.state = 1648
                self.match(TSqlParser.EQUAL)
                self.state = 1649
                localctx.password = self.match(TSqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1650
                self.match(TSqlParser.CREATE)
                self.state = 1651
                self.match(TSqlParser.SYMMETRIC)
                self.state = 1652
                self.match(TSqlParser.KEY)
                self.state = 1653
                localctx.key_name = self.identifier()
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AUTHORIZATION:
                    self.state = 1654
                    self.match(TSqlParser.AUTHORIZATION)
                    self.state = 1655
                    localctx.user_name = self.identifier()


                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FROM:
                    self.state = 1658
                    self.match(TSqlParser.FROM)
                    self.state = 1659
                    self.match(TSqlParser.PROVIDER)
                    self.state = 1660
                    localctx.provider_name = self.identifier()


                self.state = 1663
                self.match(TSqlParser.WITH)
                self.state = 1673 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1668
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.ALGORITHM, TSqlParser.CREATION_DISPOSITION, TSqlParser.IDENTITY_VALUE, TSqlParser.KEY_SOURCE, TSqlParser.PROVIDER_KEY_NAME]:
                            self.state = 1664
                            self.key_options()
                            pass
                        elif token in [TSqlParser.ENCRYPTION]:
                            self.state = 1665
                            self.match(TSqlParser.ENCRYPTION)
                            self.state = 1666
                            self.match(TSqlParser.BY)
                            self.state = 1667
                            self.encryption_mechanism()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1671
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 1670
                            self.match(TSqlParser.COMMA)



                    else:
                        raise NoViableAltException(self)
                    self.state = 1675 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pass_phrase = None # Token
            self.identity_phrase = None # Token
            self.key_name_in_provider = None # Token

        def KEY_SOURCE(self):
            return self.getToken(TSqlParser.KEY_SOURCE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def algorithm(self):
            return self.getTypedRuleContext(TSqlParser.AlgorithmContext,0)


        def IDENTITY_VALUE(self):
            return self.getToken(TSqlParser.IDENTITY_VALUE, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_key_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_options" ):
                listener.enterKey_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_options" ):
                listener.exitKey_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_options" ):
                return visitor.visitKey_options(self)
            else:
                return visitor.visitChildren(self)




    def key_options(self):

        localctx = TSqlParser.Key_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_key_options)
        self._la = 0 # Token type
        try:
            self.state = 1694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.KEY_SOURCE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                self.match(TSqlParser.KEY_SOURCE)
                self.state = 1680
                self.match(TSqlParser.EQUAL)
                self.state = 1681
                localctx.pass_phrase = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.ALGORITHM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1682
                self.match(TSqlParser.ALGORITHM)
                self.state = 1683
                self.match(TSqlParser.EQUAL)
                self.state = 1684
                self.algorithm()
                pass
            elif token in [TSqlParser.IDENTITY_VALUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1685
                self.match(TSqlParser.IDENTITY_VALUE)
                self.state = 1686
                self.match(TSqlParser.EQUAL)
                self.state = 1687
                localctx.identity_phrase = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.PROVIDER_KEY_NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1688
                self.match(TSqlParser.PROVIDER_KEY_NAME)
                self.state = 1689
                self.match(TSqlParser.EQUAL)
                self.state = 1690
                localctx.key_name_in_provider = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.CREATION_DISPOSITION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1691
                self.match(TSqlParser.CREATION_DISPOSITION)
                self.state = 1692
                self.match(TSqlParser.EQUAL)
                self.state = 1693
                _la = self._input.LA(1)
                if not(_la==TSqlParser.CREATE_NEW or _la==TSqlParser.OPEN_EXISTING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlgorithmContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DES(self):
            return self.getToken(TSqlParser.DES, 0)

        def TRIPLE_DES(self):
            return self.getToken(TSqlParser.TRIPLE_DES, 0)

        def TRIPLE_DES_3KEY(self):
            return self.getToken(TSqlParser.TRIPLE_DES_3KEY, 0)

        def RC2(self):
            return self.getToken(TSqlParser.RC2, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def RC4_128(self):
            return self.getToken(TSqlParser.RC4_128, 0)

        def DESX(self):
            return self.getToken(TSqlParser.DESX, 0)

        def AES_128(self):
            return self.getToken(TSqlParser.AES_128, 0)

        def AES_192(self):
            return self.getToken(TSqlParser.AES_192, 0)

        def AES_256(self):
            return self.getToken(TSqlParser.AES_256, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_algorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlgorithm" ):
                listener.enterAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlgorithm" ):
                listener.exitAlgorithm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlgorithm" ):
                return visitor.visitAlgorithm(self)
            else:
                return visitor.visitChildren(self)




    def algorithm(self):

        localctx = TSqlParser.AlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_algorithm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            _la = self._input.LA(1)
            if not(((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (TSqlParser.AES_128 - 390)) | (1 << (TSqlParser.AES_192 - 390)) | (1 << (TSqlParser.AES_256 - 390)))) != 0) or _la==TSqlParser.DES or _la==TSqlParser.DESX or ((((_la - 664)) & ~0x3f) == 0 and ((1 << (_la - 664)) & ((1 << (TSqlParser.RC2 - 664)) | (1 << (TSqlParser.RC4 - 664)) | (1 << (TSqlParser.RC4_128 - 664)))) != 0) or _la==TSqlParser.TRIPLE_DES or _la==TSqlParser.TRIPLE_DES_3KEY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encryption_mechanismContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # IdentifierContext
            self.asym_key_name = None # IdentifierContext
            self.decrypting_Key_name = None # IdentifierContext

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_encryption_mechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncryption_mechanism" ):
                listener.enterEncryption_mechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncryption_mechanism" ):
                listener.exitEncryption_mechanism(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncryption_mechanism" ):
                return visitor.visitEncryption_mechanism(self)
            else:
                return visitor.visitChildren(self)




    def encryption_mechanism(self):

        localctx = TSqlParser.Encryption_mechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_encryption_mechanism)
        try:
            self.state = 1709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CERTIFICATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1698
                self.match(TSqlParser.CERTIFICATE)
                self.state = 1699
                localctx.certificate_name = self.identifier()
                pass
            elif token in [TSqlParser.ASYMMETRIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1700
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 1701
                self.match(TSqlParser.KEY)
                self.state = 1702
                localctx.asym_key_name = self.identifier()
                pass
            elif token in [TSqlParser.SYMMETRIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1703
                self.match(TSqlParser.SYMMETRIC)
                self.state = 1704
                self.match(TSqlParser.KEY)
                self.state = 1705
                localctx.decrypting_Key_name = self.identifier()
                pass
            elif token in [TSqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1706
                self.match(TSqlParser.PASSWORD)
                self.state = 1707
                self.match(TSqlParser.EQUAL)
                self.state = 1708
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decryption_mechanismContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # IdentifierContext
            self.asym_key_name = None # IdentifierContext
            self.decrypting_Key_name = None # IdentifierContext

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_decryption_mechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecryption_mechanism" ):
                listener.enterDecryption_mechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecryption_mechanism" ):
                listener.exitDecryption_mechanism(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecryption_mechanism" ):
                return visitor.visitDecryption_mechanism(self)
            else:
                return visitor.visitChildren(self)




    def decryption_mechanism(self):

        localctx = TSqlParser.Decryption_mechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_decryption_mechanism)
        try:
            self.state = 1734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CERTIFICATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1711
                self.match(TSqlParser.CERTIFICATE)
                self.state = 1712
                localctx.certificate_name = self.identifier()
                self.state = 1717
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1713
                    self.match(TSqlParser.WITH)
                    self.state = 1714
                    self.match(TSqlParser.PASSWORD)
                    self.state = 1715
                    self.match(TSqlParser.EQUAL)
                    self.state = 1716
                    self.match(TSqlParser.STRING)


                pass
            elif token in [TSqlParser.ASYMMETRIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1719
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 1720
                self.match(TSqlParser.KEY)
                self.state = 1721
                localctx.asym_key_name = self.identifier()
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1722
                    self.match(TSqlParser.WITH)
                    self.state = 1723
                    self.match(TSqlParser.PASSWORD)
                    self.state = 1724
                    self.match(TSqlParser.EQUAL)
                    self.state = 1725
                    self.match(TSqlParser.STRING)


                pass
            elif token in [TSqlParser.SYMMETRIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1728
                self.match(TSqlParser.SYMMETRIC)
                self.state = 1729
                self.match(TSqlParser.KEY)
                self.state = 1730
                localctx.decrypting_Key_name = self.identifier()
                pass
            elif token in [TSqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1731
                self.match(TSqlParser.PASSWORD)
                self.state = 1732
                self.match(TSqlParser.EQUAL)
                self.state = 1733
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_permissionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(TSqlParser.VIEW, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def TAKE(self):
            return self.getToken(TSqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(TSqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(TSqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(TSqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(TSqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(TSqlParser.ANY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_grant_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permission" ):
                listener.enterGrant_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permission" ):
                listener.exitGrant_permission(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant_permission" ):
                return visitor.visitGrant_permission(self)
            else:
                return visitor.visitChildren(self)




    def grant_permission(self):

        localctx = TSqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 1762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1736
                self.match(TSqlParser.EXECUTE)
                pass
            elif token in [TSqlParser.VIEW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1737
                self.match(TSqlParser.VIEW)
                self.state = 1738
                self.identifier()
                pass
            elif token in [TSqlParser.TAKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1739
                self.match(TSqlParser.TAKE)
                self.state = 1740
                self.identifier()
                pass
            elif token in [TSqlParser.CONTROL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1741
                self.match(TSqlParser.CONTROL)
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                    self.state = 1742
                    self.identifier()


                pass
            elif token in [TSqlParser.CREATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1745
                self.match(TSqlParser.CREATE)
                self.state = 1746
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TABLE or _la==TSqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.SHOWPLAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1747
                self.match(TSqlParser.SHOWPLAN)
                pass
            elif token in [TSqlParser.IMPERSONATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1748
                self.match(TSqlParser.IMPERSONATE)
                pass
            elif token in [TSqlParser.SELECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1749
                self.match(TSqlParser.SELECT)
                pass
            elif token in [TSqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1750
                self.match(TSqlParser.REFERENCES)
                pass
            elif token in [TSqlParser.INSERT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1751
                self.match(TSqlParser.INSERT)
                pass
            elif token in [TSqlParser.ALTER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1752
                self.match(TSqlParser.ALTER)
                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ANY or _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.DATABASE - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                    self.state = 1754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.ANY:
                        self.state = 1753
                        self.match(TSqlParser.ANY)


                    self.state = 1758
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                        self.state = 1756
                        self.identifier()
                        pass
                    elif token in [TSqlParser.DATABASE]:
                        self.state = 1757
                        self.match(TSqlParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # IdentifierContext

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(TSqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_set_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_statement" ):
                listener.enterSet_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_statement" ):
                listener.exitSet_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_statement" ):
                return visitor.visitSet_statement(self)
            else:
                return visitor.visitChildren(self)




    def set_statement(self):

        localctx = TSqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 1803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1764
                self.match(TSqlParser.SET)
                self.state = 1765
                self.match(TSqlParser.LOCAL_ID)
                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.DOT:
                    self.state = 1766
                    self.match(TSqlParser.DOT)
                    self.state = 1767
                    localctx.member_name = self.identifier()


                self.state = 1770
                self.match(TSqlParser.EQUAL)
                self.state = 1771
                self.expression(0)
                self.state = 1773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                if la_ == 1:
                    self.state = 1772
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1775
                self.match(TSqlParser.SET)
                self.state = 1776
                self.match(TSqlParser.LOCAL_ID)
                self.state = 1777
                self.assignment_operator()
                self.state = 1778
                self.expression(0)
                self.state = 1780
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1779
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1782
                self.match(TSqlParser.SET)
                self.state = 1783
                self.match(TSqlParser.LOCAL_ID)
                self.state = 1784
                self.match(TSqlParser.EQUAL)
                self.state = 1785
                self.match(TSqlParser.CURSOR)
                self.state = 1786
                self.declare_set_cursor_common()
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FOR:
                    self.state = 1787
                    self.match(TSqlParser.FOR)
                    self.state = 1795
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.READ]:
                        self.state = 1788
                        self.match(TSqlParser.READ)
                        self.state = 1789
                        self.match(TSqlParser.ONLY)
                        pass
                    elif token in [TSqlParser.UPDATE]:
                        self.state = 1790
                        self.match(TSqlParser.UPDATE)
                        self.state = 1793
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.OF:
                            self.state = 1791
                            self.match(TSqlParser.OF)
                            self.state = 1792
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 1800
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1799
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1802
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(TSqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(TSqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(TSqlParser.TRANSACTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(TSqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(TSqlParser.COMMIT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(TSqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def WORK(self):
            return self.getToken(TSqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(TSqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(TSqlParser.SAVE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_transaction_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_statement" ):
                listener.enterTransaction_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_statement" ):
                listener.exitTransaction_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_statement" ):
                return visitor.visitTransaction_statement(self)
            else:
                return visitor.visitChildren(self)




    def transaction_statement(self):

        localctx = TSqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 1886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1805
                self.match(TSqlParser.BEGIN)
                self.state = 1806
                self.match(TSqlParser.DISTRIBUTED)
                self.state = 1807
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 1808
                    self.identifier()

                elif la_ == 2:
                    self.state = 1809
                    self.match(TSqlParser.LOCAL_ID)


                self.state = 1813
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 1812
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1815
                self.match(TSqlParser.BEGIN)
                self.state = 1816
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 1819
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                    if la_ == 1:
                        self.state = 1817
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 1818
                        self.match(TSqlParser.LOCAL_ID)
                        pass


                    self.state = 1824
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 1821
                        self.match(TSqlParser.WITH)
                        self.state = 1822
                        self.match(TSqlParser.MARK)
                        self.state = 1823
                        self.match(TSqlParser.STRING)




                self.state = 1829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 1828
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1831
                self.match(TSqlParser.COMMIT)
                self.state = 1832
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1845
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 1835
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        self.state = 1833
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 1834
                        self.match(TSqlParser.LOCAL_ID)
                        pass


                    self.state = 1843
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                    if la_ == 1:
                        self.state = 1837
                        self.match(TSqlParser.WITH)
                        self.state = 1838
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 1839
                        self.match(TSqlParser.DELAYED_DURABILITY)
                        self.state = 1840
                        self.match(TSqlParser.EQUAL)
                        self.state = 1841
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1842
                        self.match(TSqlParser.RR_BRACKET)




                self.state = 1848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 1847
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1850
                self.match(TSqlParser.COMMIT)
                self.state = 1852
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 1851
                    self.match(TSqlParser.WORK)


                self.state = 1855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 1854
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1857
                self.match(TSqlParser.COMMIT)
                self.state = 1858
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1859
                self.match(TSqlParser.ROLLBACK)
                self.state = 1860
                self.identifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1861
                self.match(TSqlParser.ROLLBACK)
                self.state = 1862
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 1863
                    self.identifier()

                elif la_ == 2:
                    self.state = 1864
                    self.match(TSqlParser.LOCAL_ID)


                self.state = 1868
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                if la_ == 1:
                    self.state = 1867
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1870
                self.match(TSqlParser.ROLLBACK)
                self.state = 1872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 1871
                    self.match(TSqlParser.WORK)


                self.state = 1875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 1874
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1877
                self.match(TSqlParser.SAVE)
                self.state = 1878
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 1879
                    self.identifier()

                elif la_ == 2:
                    self.state = 1880
                    self.match(TSqlParser.LOCAL_ID)


                self.state = 1884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 1883
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Go_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(TSqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_go_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGo_statement" ):
                listener.enterGo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGo_statement" ):
                listener.exitGo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_statement" ):
                return visitor.visitGo_statement(self)
            else:
                return visitor.visitChildren(self)




    def go_statement(self):

        localctx = TSqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_go_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            self.match(TSqlParser.GO)
            self.state = 1890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 1889
                localctx.count = self.match(TSqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # IdentifierContext

        def USE(self):
            return self.getToken(TSqlParser.USE, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_use_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_statement" ):
                listener.enterUse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_statement" ):
                listener.exitUse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse_statement" ):
                return visitor.visitUse_statement(self)
            else:
                return visitor.visitChildren(self)




    def use_statement(self):

        localctx = TSqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            self.match(TSqlParser.USE)
            self.state = 1893
            localctx.database = self.identifier()
            self.state = 1895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 1894
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setuser_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user = None # Token

        def SETUSER(self):
            return self.getToken(TSqlParser.SETUSER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_setuser_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetuser_statement" ):
                listener.enterSetuser_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetuser_statement" ):
                listener.exitSetuser_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetuser_statement" ):
                return visitor.visitSetuser_statement(self)
            else:
                return visitor.visitChildren(self)




    def setuser_statement(self):

        localctx = TSqlParser.Setuser_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_setuser_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.match(TSqlParser.SETUSER)
            self.state = 1899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.state = 1898
                localctx.user = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(TSqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_clause" ):
                listener.enterExecute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_clause" ):
                listener.exitExecute_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_clause" ):
                return visitor.visitExecute_clause(self)
            else:
                return visitor.visitChildren(self)




    def execute_clause(self):

        localctx = TSqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.match(TSqlParser.EXECUTE)
            self.state = 1902
            self.match(TSqlParser.AS)
            self.state = 1903
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.CALLER or _la==TSqlParser.OWNER or _la==TSqlParser.SELF or _la==TSqlParser.STRING):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_localContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_local" ):
                listener.enterDeclare_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_local" ):
                listener.exitDeclare_local(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_local" ):
                return visitor.visitDeclare_local(self)
            else:
                return visitor.visitChildren(self)




    def declare_local(self):

        localctx = TSqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self.match(TSqlParser.LOCAL_ID)
            self.state = 1907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 1906
                self.match(TSqlParser.AS)


            self.state = 1909
            self.data_type()
            self.state = 1912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.EQUAL:
                self.state = 1910
                self.match(TSqlParser.EQUAL)
                self.state = 1911
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_definition" ):
                return visitor.visitTable_type_definition(self)
            else:
                return visitor.visitChildren(self)




    def table_type_definition(self):

        localctx = TSqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(TSqlParser.TABLE)
            self.state = 1915
            self.match(TSqlParser.LR_BRACKET)
            self.state = 1916
            self.column_def_table_constraints()
            self.state = 1917
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def xml_schema_collection(self):
            return self.getTypedRuleContext(TSqlParser.Xml_schema_collectionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def DOCUMENT(self):
            return self.getToken(TSqlParser.DOCUMENT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_type_definition" ):
                listener.enterXml_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_type_definition" ):
                listener.exitXml_type_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_type_definition" ):
                return visitor.visitXml_type_definition(self)
            else:
                return visitor.visitChildren(self)




    def xml_type_definition(self):

        localctx = TSqlParser.Xml_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_xml_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1919
            self.match(TSqlParser.XML)
            self.state = 1920
            self.match(TSqlParser.LR_BRACKET)
            self.state = 1922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONTENT or _la==TSqlParser.DOCUMENT:
                self.state = 1921
                _la = self._input.LA(1)
                if not(_la==TSqlParser.CONTENT or _la==TSqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1924
            self.xml_schema_collection()
            self.state = 1925
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_schema_collectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.IDENTIFIER)
            else:
                return self.getToken(TSqlParser.IDENTIFIER, i)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_schema_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_schema_collection" ):
                listener.enterXml_schema_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_schema_collection" ):
                listener.exitXml_schema_collection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_schema_collection" ):
                return visitor.visitXml_schema_collection(self)
            else:
                return visitor.visitChildren(self)




    def xml_schema_collection(self):

        localctx = TSqlParser.Xml_schema_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_xml_schema_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self.match(TSqlParser.IDENTIFIER)
            self.state = 1928
            self.match(TSqlParser.DOT)
            self.state = 1929
            self.match(TSqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_def_table_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraints" ):
                listener.enterColumn_def_table_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraints" ):
                listener.exitColumn_def_table_constraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraints" ):
                return visitor.visitColumn_def_table_constraints(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraints(self):

        localctx = TSqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.column_def_table_constraint()
            self.state = 1938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TSqlParser.CALLED) | (1 << TSqlParser.CHECK) | (1 << TSqlParser.CONSTRAINT))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.DEFAULT - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)) | (1 << (TSqlParser.FOREIGN - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PRIMARY - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)) | (1 << (TSqlParser.UNIQUE - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)) | (1 << (TSqlParser.COMMA - 768)))) != 0):
                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 1932
                    self.match(TSqlParser.COMMA)


                self.state = 1935
                self.column_def_table_constraint()
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(TSqlParser.Column_definitionContext,0)


        def materialized_column_definition(self):
            return self.getTypedRuleContext(TSqlParser.Materialized_column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(TSqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_column_def_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraint" ):
                listener.enterColumn_def_table_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraint" ):
                listener.exitColumn_def_table_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraint" ):
                return visitor.visitColumn_def_table_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraint(self):

        localctx = TSqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_column_def_table_constraint)
        try:
            self.state = 1944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1941
                self.column_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.materialized_column_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1943
                self.table_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # IdentifierContext
            self.seed = None # Token
            self.increment = None # Token

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def null_or_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Null_or_defaultContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Null_or_defaultContext,i)


        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(TSqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_definition" ):
                return visitor.visitColumn_definition(self)
            else:
                return visitor.visitChildren(self)




    def column_definition(self):

        localctx = TSqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.identifier()
            self.state = 1950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.DOUBLE, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.state = 1947
                self.data_type()
                pass
            elif token in [TSqlParser.AS]:
                self.state = 1948
                self.match(TSqlParser.AS)
                self.state = 1949
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COLLATE:
                self.state = 1952
                self.match(TSqlParser.COLLATE)
                self.state = 1953
                self.identifier()


            self.state = 1957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 1956
                self.null_notnull()


            self.state = 1980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 1961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CONSTRAINT:
                    self.state = 1959
                    self.match(TSqlParser.CONSTRAINT)
                    self.state = 1960
                    localctx.constraint = self.identifier()


                self.state = 1963
                self.null_or_default()
                self.state = 1965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 1964
                    self.null_or_default()



            elif la_ == 2:
                self.state = 1967
                self.match(TSqlParser.IDENTITY)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 1968
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1969
                    localctx.seed = self.match(TSqlParser.DECIMAL)
                    self.state = 1970
                    self.match(TSqlParser.COMMA)
                    self.state = 1971
                    localctx.increment = self.match(TSqlParser.DECIMAL)
                    self.state = 1972
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 1978
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                if la_ == 1:
                    self.state = 1975
                    self.match(TSqlParser.NOT)
                    self.state = 1976
                    self.match(TSqlParser.FOR)
                    self.state = 1977
                    self.match(TSqlParser.REPLICATION)




            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ROWGUIDCOL:
                self.state = 1982
                self.match(TSqlParser.ROWGUIDCOL)


            self.state = 1988
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1985
                    self.column_constraint() 
                self.state = 1990
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Materialized_column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def COMPUTE(self):
            return self.getToken(TSqlParser.COMPUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def MATERIALIZED(self):
            return self.getToken(TSqlParser.MATERIALIZED, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_materialized_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterialized_column_definition" ):
                listener.enterMaterialized_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterialized_column_definition" ):
                listener.exitMaterialized_column_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterialized_column_definition" ):
                return visitor.visitMaterialized_column_definition(self)
            else:
                return visitor.visitChildren(self)




    def materialized_column_definition(self):

        localctx = TSqlParser.Materialized_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_materialized_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.identifier()
            self.state = 1992
            _la = self._input.LA(1)
            if not(_la==TSqlParser.AS or _la==TSqlParser.COMPUTE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1993
            self.expression(0)
            self.state = 1997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 1994
                self.match(TSqlParser.MATERIALIZED)

            elif la_ == 2:
                self.state = 1995
                self.match(TSqlParser.NOT)
                self.state = 1996
                self.match(TSqlParser.MATERIALIZED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # IdentifierContext
            self.pk = None # Column_name_listContext

        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(TSqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def FOREIGN(self):
            return self.getToken(TSqlParser.FOREIGN, 0)

        def on_delete(self):
            return self.getTypedRuleContext(TSqlParser.On_deleteContext,0)


        def on_update(self):
            return self.getTypedRuleContext(TSqlParser.On_updateContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = TSqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONSTRAINT:
                self.state = 1999
                self.match(TSqlParser.CONSTRAINT)
                self.state = 2000
                localctx.constraint = self.identifier()


            self.state = 2040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.PRIMARY, TSqlParser.UNIQUE]:
                self.state = 2006
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.PRIMARY]:
                    self.state = 2003
                    self.match(TSqlParser.PRIMARY)
                    self.state = 2004
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [TSqlParser.UNIQUE]:
                    self.state = 2005
                    self.match(TSqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CLUSTERED or _la==TSqlParser.NONCLUSTERED:
                    self.state = 2008
                    self.clustered()


                self.state = 2012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.WITH:
                    self.state = 2011
                    self.index_options()


                pass
            elif token in [TSqlParser.CHECK]:
                self.state = 2014
                self.match(TSqlParser.CHECK)
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 2015
                    self.match(TSqlParser.NOT)
                    self.state = 2016
                    self.match(TSqlParser.FOR)
                    self.state = 2017
                    self.match(TSqlParser.REPLICATION)


                self.state = 2020
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2021
                self.search_condition()
                self.state = 2022
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.FOREIGN, TSqlParser.REFERENCES]:
                self.state = 2026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FOREIGN:
                    self.state = 2024
                    self.match(TSqlParser.FOREIGN)
                    self.state = 2025
                    self.match(TSqlParser.KEY)


                self.state = 2028
                self.match(TSqlParser.REFERENCES)
                self.state = 2029
                self.table_name()
                self.state = 2030
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2031
                localctx.pk = self.column_name_list()
                self.state = 2032
                self.match(TSqlParser.RR_BRACKET)
                self.state = 2034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2033
                    self.on_delete()


                self.state = 2037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ON:
                    self.state = 2036
                    self.on_update()


                pass
            elif token in [TSqlParser.NOT, TSqlParser.NULL]:
                self.state = 2039
                self.null_notnull()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # IdentifierContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def column_name_list_with_order(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_list_with_orderContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def FOREIGN(self):
            return self.getToken(TSqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_name_listContext,i)


        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(TSqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PLUS)
            else:
                return self.getToken(TSqlParser.PLUS, i)

        def function_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Function_callContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Function_callContext,i)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def on_delete(self):
            return self.getTypedRuleContext(TSqlParser.On_deleteContext,0)


        def on_update(self):
            return self.getTypedRuleContext(TSqlParser.On_updateContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = TSqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONSTRAINT:
                self.state = 2042
                self.match(TSqlParser.CONSTRAINT)
                self.state = 2043
                localctx.constraint = self.identifier()


            self.state = 2110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.PRIMARY, TSqlParser.UNIQUE]:
                self.state = 2049
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.PRIMARY]:
                    self.state = 2046
                    self.match(TSqlParser.PRIMARY)
                    self.state = 2047
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [TSqlParser.UNIQUE]:
                    self.state = 2048
                    self.match(TSqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CLUSTERED or _la==TSqlParser.NONCLUSTERED:
                    self.state = 2051
                    self.clustered()


                self.state = 2054
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2055
                self.column_name_list_with_order()
                self.state = 2056
                self.match(TSqlParser.RR_BRACKET)
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.WITH:
                    self.state = 2057
                    self.index_options()


                self.state = 2062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ON:
                    self.state = 2060
                    self.match(TSqlParser.ON)
                    self.state = 2061
                    self.identifier()


                pass
            elif token in [TSqlParser.CHECK]:
                self.state = 2064
                self.match(TSqlParser.CHECK)
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 2065
                    self.match(TSqlParser.NOT)
                    self.state = 2066
                    self.match(TSqlParser.FOR)
                    self.state = 2067
                    self.match(TSqlParser.REPLICATION)


                self.state = 2070
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2071
                self.search_condition()
                self.state = 2072
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.DEFAULT]:
                self.state = 2074
                self.match(TSqlParser.DEFAULT)
                self.state = 2076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 2075
                    self.match(TSqlParser.LR_BRACKET)


                self.state = 2082 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2082
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.STRING]:
                        self.state = 2078
                        self.match(TSqlParser.STRING)
                        pass
                    elif token in [TSqlParser.PLUS]:
                        self.state = 2079
                        self.match(TSqlParser.PLUS)
                        pass
                    elif token in [TSqlParser.CALLED, TSqlParser.COALESCE, TSqlParser.CONVERT, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.IDENTITY, TSqlParser.IIF, TSqlParser.INIT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.RIGHT, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                        self.state = 2080
                        self.function_call()
                        pass
                    elif token in [TSqlParser.DECIMAL]:
                        self.state = 2081
                        self.match(TSqlParser.DECIMAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2084 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.CALLED or _la==TSqlParser.COALESCE or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (TSqlParser.CONVERT - 69)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 69)) | (1 << (TSqlParser.CURRENT_USER - 69)) | (1 << (TSqlParser.DATA_COMPRESSION - 69)) | (1 << (TSqlParser.EVENTDATA - 69)) | (1 << (TSqlParser.FILENAME - 69)) | (1 << (TSqlParser.FILLFACTOR - 69)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (TSqlParser.FORCESEEK - 133)) | (1 << (TSqlParser.IDENTITY - 133)) | (1 << (TSqlParser.IIF - 133)) | (1 << (TSqlParser.INIT - 133)) | (1 << (TSqlParser.ISNULL - 133)) | (1 << (TSqlParser.KEY - 133)) | (1 << (TSqlParser.LEFT - 133)) | (1 << (TSqlParser.MASTER - 133)) | (1 << (TSqlParser.MAX_MEMORY - 133)))) != 0) or ((((_la - 223)) & ~0x3f) == 0 and ((1 << (_la - 223)) & ((1 << (TSqlParser.NULLIF - 223)) | (1 << (TSqlParser.OFFSETS - 223)) | (1 << (TSqlParser.PAGE - 223)) | (1 << (TSqlParser.PUBLIC - 223)) | (1 << (TSqlParser.K_R - 223)) | (1 << (TSqlParser.RAW - 223)) | (1 << (TSqlParser.RETURN - 223)) | (1 << (TSqlParser.RETURNS - 223)) | (1 << (TSqlParser.RIGHT - 223)))) != 0) or ((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & ((1 << (TSqlParser.ROWCOUNT - 289)) | (1 << (TSqlParser.SAFETY - 289)) | (1 << (TSqlParser.SERVER - 289)) | (1 << (TSqlParser.SESSION_USER - 289)) | (1 << (TSqlParser.SID - 289)) | (1 << (TSqlParser.SOURCE - 289)) | (1 << (TSqlParser.STATE - 289)) | (1 << (TSqlParser.START - 289)) | (1 << (TSqlParser.SYSTEM_USER - 289)) | (1 << (TSqlParser.TARGET - 289)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.DECIMAL - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)) | (1 << (TSqlParser.STRING - 768)) | (1 << (TSqlParser.PLUS - 768)))) != 0)):
                        break

                self.state = 2087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.RR_BRACKET:
                    self.state = 2086
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 2089
                self.match(TSqlParser.FOR)
                self.state = 2090
                self.identifier()
                pass
            elif token in [TSqlParser.FOREIGN]:
                self.state = 2091
                self.match(TSqlParser.FOREIGN)
                self.state = 2092
                self.match(TSqlParser.KEY)
                self.state = 2093
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2094
                localctx.fk = self.column_name_list()
                self.state = 2095
                self.match(TSqlParser.RR_BRACKET)
                self.state = 2096
                self.match(TSqlParser.REFERENCES)
                self.state = 2097
                self.table_name()
                self.state = 2102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 2098
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2099
                    localctx.pk = self.column_name_list()
                    self.state = 2100
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 2105
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                if la_ == 1:
                    self.state = 2104
                    self.on_delete()


                self.state = 2108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ON:
                    self.state = 2107
                    self.on_update()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def CASCADE(self):
            return self.getToken(TSqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_delete" ):
                listener.enterOn_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_delete" ):
                listener.exitOn_delete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_delete" ):
                return visitor.visitOn_delete(self)
            else:
                return visitor.visitChildren(self)




    def on_delete(self):

        localctx = TSqlParser.On_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_on_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self.match(TSqlParser.ON)
            self.state = 2113
            self.match(TSqlParser.DELETE)
            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 2114
                self.match(TSqlParser.NO)
                self.state = 2115
                self.match(TSqlParser.ACTION)
                pass

            elif la_ == 2:
                self.state = 2116
                self.match(TSqlParser.CASCADE)
                pass

            elif la_ == 3:
                self.state = 2117
                self.match(TSqlParser.SET)
                self.state = 2118
                self.match(TSqlParser.NULL)
                pass

            elif la_ == 4:
                self.state = 2119
                self.match(TSqlParser.SET)
                self.state = 2120
                self.match(TSqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_updateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def CASCADE(self):
            return self.getToken(TSqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_update" ):
                listener.enterOn_update(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_update" ):
                listener.exitOn_update(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_update" ):
                return visitor.visitOn_update(self)
            else:
                return visitor.visitChildren(self)




    def on_update(self):

        localctx = TSqlParser.On_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_on_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.match(TSqlParser.ON)
            self.state = 2124
            self.match(TSqlParser.UPDATE)
            self.state = 2132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.state = 2125
                self.match(TSqlParser.NO)
                self.state = 2126
                self.match(TSqlParser.ACTION)
                pass

            elif la_ == 2:
                self.state = 2127
                self.match(TSqlParser.CASCADE)
                pass

            elif la_ == 3:
                self.state = 2128
                self.match(TSqlParser.SET)
                self.state = 2129
                self.match(TSqlParser.NULL)
                pass

            elif la_ == 4:
                self.state = 2130
                self.match(TSqlParser.SET)
                self.state = 2131
                self.match(TSqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_options" ):
                return visitor.visitIndex_options(self)
            else:
                return visitor.visitChildren(self)




    def index_options(self):

        localctx = TSqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self.match(TSqlParser.WITH)
            self.state = 2135
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2136
            self.index_option()
            self.state = 2141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 2137
                self.match(TSqlParser.COMMA)
                self.state = 2138
                self.index_option()
                self.state = 2143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2144
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_idContext,i)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_option" ):
                listener.enterIndex_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_option" ):
                listener.exitIndex_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_option" ):
                return visitor.visitIndex_option(self)
            else:
                return visitor.visitChildren(self)




    def index_option(self):

        localctx = TSqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2146
            self.simple_id()
            self.state = 2147
            self.match(TSqlParser.EQUAL)
            self.state = 2151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.state = 2148
                self.simple_id()
                pass
            elif token in [TSqlParser.OFF, TSqlParser.ON]:
                self.state = 2149
                self.on_off()
                pass
            elif token in [TSqlParser.DECIMAL]:
                self.state = 2150
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(TSqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FOR)
            else:
                return self.getToken(TSqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_commonContext,0)


        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def SEMI_SENSITIVE(self):
            return self.getToken(TSqlParser.SEMI_SENSITIVE, 0)

        def INSENSITIVE(self):
            return self.getToken(TSqlParser.INSENSITIVE, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_cursor" ):
                listener.enterDeclare_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_cursor" ):
                listener.exitDeclare_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_cursor" ):
                return visitor.visitDeclare_cursor(self)
            else:
                return visitor.visitChildren(self)




    def declare_cursor(self):

        localctx = TSqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self.match(TSqlParser.DECLARE)
            self.state = 2154
            self.cursor_name()
            self.state = 2186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2155
                self.match(TSqlParser.CURSOR)
                self.state = 2165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                if la_ == 1:
                    self.state = 2156
                    self.declare_set_cursor_common()
                    self.state = 2163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.FOR:
                        self.state = 2157
                        self.match(TSqlParser.FOR)
                        self.state = 2158
                        self.match(TSqlParser.UPDATE)
                        self.state = 2161
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.OF:
                            self.state = 2159
                            self.match(TSqlParser.OF)
                            self.state = 2160
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 2168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.INSENSITIVE or _la==TSqlParser.SEMI_SENSITIVE:
                    self.state = 2167
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.INSENSITIVE or _la==TSqlParser.SEMI_SENSITIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.SCROLL:
                    self.state = 2170
                    self.match(TSqlParser.SCROLL)


                self.state = 2173
                self.match(TSqlParser.CURSOR)
                self.state = 2174
                self.match(TSqlParser.FOR)
                self.state = 2175
                self.select_statement()
                self.state = 2184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FOR:
                    self.state = 2176
                    self.match(TSqlParser.FOR)
                    self.state = 2182
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.READ]:
                        self.state = 2177
                        self.match(TSqlParser.READ)
                        self.state = 2178
                        self.match(TSqlParser.ONLY)
                        pass
                    elif token in [TSqlParser.UPDATE]:
                        self.state = 2179
                        self.match(TSqlParser.UPDATE)
                        pass
                    elif token in [TSqlParser.OF]:
                        self.state = 2180
                        self.match(TSqlParser.OF)
                        self.state = 2181
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 2189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2188
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_set_cursor_commonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def declare_set_cursor_common_partial(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Declare_set_cursor_common_partialContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_common_partialContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_set_cursor_common

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common" ):
                listener.enterDeclare_set_cursor_common(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common" ):
                listener.exitDeclare_set_cursor_common(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_set_cursor_common" ):
                return visitor.visitDeclare_set_cursor_common(self)
            else:
                return visitor.visitChildren(self)




    def declare_set_cursor_common(self):

        localctx = TSqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 486)) & ~0x3f) == 0 and ((1 << (_la - 486)) & ((1 << (TSqlParser.DYNAMIC - 486)) | (1 << (TSqlParser.FAST_FORWARD - 486)) | (1 << (TSqlParser.FORWARD_ONLY - 486)) | (1 << (TSqlParser.GLOBAL - 486)))) != 0) or _la==TSqlParser.KEYSET or _la==TSqlParser.LOCAL or _la==TSqlParser.OPTIMISTIC or _la==TSqlParser.READ_ONLY or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL - 703)) | (1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)))) != 0):
                self.state = 2191
                self.declare_set_cursor_common_partial()
                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2197
            self.match(TSqlParser.FOR)
            self.state = 2198
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_set_cursor_common_partialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(TSqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(TSqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(TSqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(TSqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(TSqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(TSqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(TSqlParser.OPTIMISTIC, 0)

        def TYPE_WARNING(self):
            return self.getToken(TSqlParser.TYPE_WARNING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_declare_set_cursor_common_partial

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common_partial" ):
                listener.enterDeclare_set_cursor_common_partial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common_partial" ):
                listener.exitDeclare_set_cursor_common_partial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_set_cursor_common_partial" ):
                return visitor.visitDeclare_set_cursor_common_partial(self)
            else:
                return visitor.visitChildren(self)




    def declare_set_cursor_common_partial(self):

        localctx = TSqlParser.Declare_set_cursor_common_partialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_declare_set_cursor_common_partial)
        self._la = 0 # Token type
        try:
            self.state = 2205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.GLOBAL, TSqlParser.LOCAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2200
                _la = self._input.LA(1)
                if not(_la==TSqlParser.GLOBAL or _la==TSqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.FORWARD_ONLY, TSqlParser.SCROLL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2201
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FORWARD_ONLY or _la==TSqlParser.SCROLL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.DYNAMIC, TSqlParser.FAST_FORWARD, TSqlParser.KEYSET, TSqlParser.STATIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2202
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DYNAMIC or _la==TSqlParser.FAST_FORWARD or _la==TSqlParser.KEYSET or _la==TSqlParser.STATIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.OPTIMISTIC, TSqlParser.READ_ONLY, TSqlParser.SCROLL_LOCKS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2203
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OPTIMISTIC or _la==TSqlParser.READ_ONLY or _la==TSqlParser.SCROLL_LOCKS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.TYPE_WARNING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2204
                self.match(TSqlParser.TYPE_WARNING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(TSqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TSqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TSqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ABSOLUTE(self):
            return self.getToken(TSqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(TSqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_fetch_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_cursor" ):
                listener.enterFetch_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_cursor" ):
                listener.exitFetch_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_cursor" ):
                return visitor.visitFetch_cursor(self)
            else:
                return visitor.visitChildren(self)




    def fetch_cursor(self):

        localctx = TSqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self.match(TSqlParser.FETCH)
            self.state = 2217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2214
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.NEXT]:
                    self.state = 2208
                    self.match(TSqlParser.NEXT)
                    pass
                elif token in [TSqlParser.PRIOR]:
                    self.state = 2209
                    self.match(TSqlParser.PRIOR)
                    pass
                elif token in [TSqlParser.FIRST]:
                    self.state = 2210
                    self.match(TSqlParser.FIRST)
                    pass
                elif token in [TSqlParser.LAST]:
                    self.state = 2211
                    self.match(TSqlParser.LAST)
                    pass
                elif token in [TSqlParser.ABSOLUTE, TSqlParser.RELATIVE]:
                    self.state = 2212
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ABSOLUTE or _la==TSqlParser.RELATIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2213
                    self.expression(0)
                    pass
                elif token in [TSqlParser.FROM]:
                    pass
                else:
                    pass
                self.state = 2216
                self.match(TSqlParser.FROM)


            self.state = 2220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2219
                self.match(TSqlParser.GLOBAL)


            self.state = 2222
            self.cursor_name()
            self.state = 2232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 2223
                self.match(TSqlParser.INTO)
                self.state = 2224
                self.match(TSqlParser.LOCAL_ID)
                self.state = 2229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 2225
                    self.match(TSqlParser.COMMA)
                    self.state = 2226
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 2231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2234
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_specialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(TSqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def TRANSACTION(self):
            return self.getToken(TSqlParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(TSqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(TSqlParser.LEVEL, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(TSqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(TSqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(TSqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def IDENTITY_INSERT(self):
            return self.getToken(TSqlParser.IDENTITY_INSERT, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def modify_method(self):
            return self.getTypedRuleContext(TSqlParser.Modify_methodContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_set_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_special" ):
                listener.enterSet_special(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_special" ):
                listener.exitSet_special(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_special" ):
                return visitor.visitSet_special(self)
            else:
                return visitor.visitChildren(self)




    def set_special(self):

        localctx = TSqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_set_special)
        try:
            self.state = 2286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2237
                self.match(TSqlParser.SET)
                self.state = 2238
                self.identifier()
                self.state = 2242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2239
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 2240
                    self.constant_LOCAL_ID()
                    pass

                elif la_ == 3:
                    self.state = 2241
                    self.on_off()
                    pass


                self.state = 2245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
                if la_ == 1:
                    self.state = 2244
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2247
                self.match(TSqlParser.SET)
                self.state = 2248
                self.match(TSqlParser.TRANSACTION)
                self.state = 2249
                self.match(TSqlParser.ISOLATION)
                self.state = 2250
                self.match(TSqlParser.LEVEL)
                self.state = 2260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 2251
                    self.match(TSqlParser.READ)
                    self.state = 2252
                    self.match(TSqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 2253
                    self.match(TSqlParser.READ)
                    self.state = 2254
                    self.match(TSqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 2255
                    self.match(TSqlParser.REPEATABLE)
                    self.state = 2256
                    self.match(TSqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 2257
                    self.match(TSqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 2258
                    self.match(TSqlParser.SERIALIZABLE)
                    pass

                elif la_ == 6:
                    self.state = 2259
                    self.match(TSqlParser.DECIMAL)
                    pass


                self.state = 2263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 2262
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2265
                self.match(TSqlParser.SET)
                self.state = 2266
                self.match(TSqlParser.IDENTITY_INSERT)
                self.state = 2267
                self.table_name()
                self.state = 2268
                self.on_off()
                self.state = 2270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 2269
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2272
                self.match(TSqlParser.SET)
                self.state = 2273
                self.match(TSqlParser.ANSI_NULLS)
                self.state = 2274
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2275
                self.match(TSqlParser.SET)
                self.state = 2276
                self.match(TSqlParser.QUOTED_IDENTIFIER)
                self.state = 2277
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2278
                self.match(TSqlParser.SET)
                self.state = 2279
                self.match(TSqlParser.ANSI_PADDING)
                self.state = 2280
                self.on_off()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2281
                self.match(TSqlParser.SET)
                self.state = 2282
                self.match(TSqlParser.ANSI_WARNINGS)
                self.state = 2283
                self.on_off()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2284
                self.match(TSqlParser.SET)
                self.state = 2285
                self.modify_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_LOCAL_IDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_constant_LOCAL_ID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_LOCAL_ID" ):
                listener.enterConstant_LOCAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_LOCAL_ID" ):
                listener.exitConstant_LOCAL_ID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_LOCAL_ID" ):
                return visitor.visitConstant_LOCAL_ID(self)
            else:
                return visitor.visitChildren(self)




    def constant_LOCAL_ID(self):

        localctx = TSqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 2290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2288
                self.constant()
                pass
            elif token in [TSqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2289
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def primitive_expression(self):
            return self.getTypedRuleContext(TSqlParser.Primitive_expressionContext,0)


        def function_call(self):
            return self.getTypedRuleContext(TSqlParser.Function_callContext,0)


        def case_expression(self):
            return self.getTypedRuleContext(TSqlParser.Case_expressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def bracket_expression(self):
            return self.getTypedRuleContext(TSqlParser.Bracket_expressionContext,0)


        def unary_operator_expression(self):
            return self.getTypedRuleContext(TSqlParser.Unary_operator_expressionContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(TSqlParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(TSqlParser.MODULE, 0)

        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def BIT_AND(self):
            return self.getToken(TSqlParser.BIT_AND, 0)

        def BIT_XOR(self):
            return self.getToken(TSqlParser.BIT_XOR, 0)

        def BIT_OR(self):
            return self.getToken(TSqlParser.BIT_OR, 0)

        def DOUBLE_BAR(self):
            return self.getToken(TSqlParser.DOUBLE_BAR, 0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TSqlParser.Comparison_operatorContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TSqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 2293
                self.primitive_expression()
                pass

            elif la_ == 2:
                self.state = 2294
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 2295
                self.case_expression()
                pass

            elif la_ == 4:
                self.state = 2296
                self.full_column_name()
                pass

            elif la_ == 5:
                self.state = 2297
                self.bracket_expression()
                pass

            elif la_ == 6:
                self.state = 2298
                self.unary_operator_expression()
                pass

            elif la_ == 7:
                self.state = 2299
                self.over_clause()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2319
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
                    if la_ == 1:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2302
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2303
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 825)) & ~0x3f) == 0 and ((1 << (_la - 825)) & ((1 << (TSqlParser.STAR - 825)) | (1 << (TSqlParser.DIVIDE - 825)) | (1 << (TSqlParser.MODULE - 825)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2304
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2305
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2306
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 814)) & ~0x3f) == 0 and ((1 << (_la - 814)) & ((1 << (TSqlParser.DOUBLE_BAR - 814)) | (1 << (TSqlParser.PLUS - 814)) | (1 << (TSqlParser.MINUS - 814)) | (1 << (TSqlParser.BIT_OR - 814)) | (1 << (TSqlParser.BIT_AND - 814)) | (1 << (TSqlParser.BIT_XOR - 814)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2307
                        self.expression(5)
                        pass

                    elif la_ == 3:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2308
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2309
                        self.comparison_operator()
                        self.state = 2310
                        self.expression(4)
                        pass

                    elif la_ == 4:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2312
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2313
                        self.assignment_operator()
                        self.state = 2314
                        self.expression(3)
                        pass

                    elif la_ == 5:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2316
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 2317
                        self.match(TSqlParser.COLLATE)
                        self.state = 2318
                        self.identifier()
                        pass

             
                self.state = 2323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Primitive_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_primitive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitive_expression" ):
                return visitor.visitPrimitive_expression(self)
            else:
                return visitor.visitChildren(self)




    def primitive_expression(self):

        localctx = TSqlParser.Primitive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_primitive_expression)
        try:
            self.state = 2328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2324
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [TSqlParser.NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2325
                self.match(TSqlParser.NULL)
                pass
            elif token in [TSqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2326
                self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2327
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext

        def CASE(self):
            return self.getToken(TSqlParser.CASE, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Switch_sectionContext,i)


        def ELSE(self):
            return self.getToken(TSqlParser.ELSE, 0)

        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Switch_search_condition_sectionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_case_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expression" ):
                return visitor.visitCase_expression(self)
            else:
                return visitor.visitChildren(self)




    def case_expression(self):

        localctx = TSqlParser.Case_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_case_expression)
        self._la = 0 # Token type
        try:
            self.state = 2355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2330
                self.match(TSqlParser.CASE)
                self.state = 2331
                localctx.caseExpr = self.expression(0)
                self.state = 2333 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2332
                    self.switch_section()
                    self.state = 2335 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.WHEN):
                        break

                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ELSE:
                    self.state = 2337
                    self.match(TSqlParser.ELSE)
                    self.state = 2338
                    localctx.elseExpr = self.expression(0)


                self.state = 2341
                self.match(TSqlParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self.match(TSqlParser.CASE)
                self.state = 2345 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2344
                    self.switch_search_condition_section()
                    self.state = 2347 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.WHEN):
                        break

                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ELSE:
                    self.state = 2349
                    self.match(TSqlParser.ELSE)
                    self.state = 2350
                    localctx.elseExpr = self.expression(0)


                self.state = 2353
                self.match(TSqlParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operator_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def BIT_NOT(self):
            return self.getToken(TSqlParser.BIT_NOT, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_unary_operator_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression" ):
                listener.enterUnary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression" ):
                listener.exitUnary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression" ):
                return visitor.visitUnary_operator_expression(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator_expression(self):

        localctx = TSqlParser.Unary_operator_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_unary_operator_expression)
        self._la = 0 # Token type
        try:
            self.state = 2361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.BIT_NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2357
                self.match(TSqlParser.BIT_NOT)
                self.state = 2358
                self.expression(0)
                pass
            elif token in [TSqlParser.PLUS, TSqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2359
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TSqlParser.PLUS or _la==TSqlParser.MINUS):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2360
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_expression" ):
                return visitor.visitBracket_expression(self)
            else:
                return visitor.visitChildren(self)




    def bracket_expression(self):

        localctx = TSqlParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_bracket_expression)
        try:
            self.state = 2371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2363
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2364
                self.expression(0)
                self.state = 2365
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2367
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2368
                self.subquery()
                self.state = 2369
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(TSqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(TSqlParser.Constant_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)




    def constant_expression(self):

        localctx = TSqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_constant_expression)
        try:
            self.state = 2381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2373
                self.match(TSqlParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2374
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2375
                self.function_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2376
                self.match(TSqlParser.LOCAL_ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2377
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2378
                self.constant_expression()
                self.state = 2379
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = TSqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2383
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(TSqlParser.XMLNAMESPACES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def BLOCKING_HIERARCHY(self):
            return self.getToken(TSqlParser.BLOCKING_HIERARCHY, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def full_column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_name_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_expression" ):
                return visitor.visitWith_expression(self)
            else:
                return visitor.visitChildren(self)




    def with_expression(self):

        localctx = TSqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.state = 2411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2385
                self.match(TSqlParser.WITH)
                self.state = 2388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                if la_ == 1:
                    self.state = 2386
                    self.match(TSqlParser.XMLNAMESPACES)
                    self.state = 2387
                    self.match(TSqlParser.COMMA)


                self.state = 2390
                self.common_table_expression()
                self.state = 2395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 2391
                    self.match(TSqlParser.COMMA)
                    self.state = 2392
                    self.common_table_expression()
                    self.state = 2397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2398
                self.match(TSqlParser.WITH)
                self.state = 2399
                self.match(TSqlParser.BLOCKING_HIERARCHY)
                self.state = 2404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 2400
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2401
                    self.full_column_name_list()
                    self.state = 2402
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 2406
                self.match(TSqlParser.AS)
                self.state = 2407
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2408
                self.select_statement()
                self.state = 2409
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # IdentifierContext

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = TSqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413
            localctx.expression_name = self.identifier()
            self.state = 2418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LR_BRACKET:
                self.state = 2414
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2415
                self.column_name_list()
                self.state = 2416
                self.match(TSqlParser.RR_BRACKET)


            self.state = 2420
            self.match(TSqlParser.AS)
            self.state = 2421
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2422
            self.select_statement()
            self.state = 2423
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # IdentifierContext
            self.method_name = None # IdentifierContext

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_update_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem" ):
                listener.enterUpdate_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem" ):
                listener.exitUpdate_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_elem" ):
                return visitor.visitUpdate_elem(self)
            else:
                return visitor.visitChildren(self)




    def update_elem(self):

        localctx = TSqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_update_elem)
        try:
            self.state = 2441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 2425
                    self.full_column_name()
                    pass

                elif la_ == 2:
                    self.state = 2426
                    self.match(TSqlParser.LOCAL_ID)
                    pass


                self.state = 2431
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.EQUAL]:
                    self.state = 2429
                    self.match(TSqlParser.EQUAL)
                    pass
                elif token in [TSqlParser.PLUS_ASSIGN, TSqlParser.MINUS_ASSIGN, TSqlParser.MULT_ASSIGN, TSqlParser.DIV_ASSIGN, TSqlParser.MOD_ASSIGN, TSqlParser.AND_ASSIGN, TSqlParser.XOR_ASSIGN, TSqlParser.OR_ASSIGN]:
                    self.state = 2430
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2433
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2434
                localctx.udt_column_name = self.identifier()
                self.state = 2435
                self.match(TSqlParser.DOT)
                self.state = 2436
                localctx.method_name = self.identifier()
                self.state = 2437
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2438
                self.expression_list()
                self.state = 2439
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_condition_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_list" ):
                listener.enterSearch_condition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_list" ):
                listener.exitSearch_condition_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_list" ):
                return visitor.visitSearch_condition_list(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_list(self):

        localctx = TSqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2443
            self.search_condition()
            self.state = 2448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 2444
                self.match(TSqlParser.COMMA)
                self.state = 2445
                self.search_condition()
                self.state = 2450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_condition_andContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_condition_andContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OR)
            else:
                return self.getToken(TSqlParser.OR, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition" ):
                return visitor.visitSearch_condition(self)
            else:
                return visitor.visitChildren(self)




    def search_condition(self):

        localctx = TSqlParser.Search_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_search_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2451
            self.search_condition_and()
            self.state = 2456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.OR:
                self.state = 2452
                self.match(TSqlParser.OR)
                self.state = 2453
                self.search_condition_and()
                self.state = 2458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_condition_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition_not(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_condition_notContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_condition_notContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AND)
            else:
                return self.getToken(TSqlParser.AND, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_and" ):
                listener.enterSearch_condition_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_and" ):
                listener.exitSearch_condition_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_and" ):
                return visitor.visitSearch_condition_and(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_and(self):

        localctx = TSqlParser.Search_condition_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_search_condition_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.search_condition_not()
            self.state = 2464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.AND:
                self.state = 2460
                self.match(TSqlParser.AND)
                self.state = 2461
                self.search_condition_not()
                self.state = 2466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_condition_notContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(TSqlParser.PredicateContext,0)


        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_not" ):
                listener.enterSearch_condition_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_not" ):
                listener.exitSearch_condition_not(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_not" ):
                return visitor.visitSearch_condition_not(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_not(self):

        localctx = TSqlParser.Search_condition_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_search_condition_not)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.NOT:
                self.state = 2467
                self.match(TSqlParser.NOT)


            self.state = 2470
            self.predicate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def comparison_operator(self):
            return self.getTypedRuleContext(TSqlParser.Comparison_operatorContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def SOME(self):
            return self.getToken(TSqlParser.SOME, 0)

        def ANY(self):
            return self.getToken(TSqlParser.ANY, 0)

        def BETWEEN(self):
            return self.getToken(TSqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def LIKE(self):
            return self.getToken(TSqlParser.LIKE, 0)

        def ESCAPE(self):
            return self.getToken(TSqlParser.ESCAPE, 0)

        def IS(self):
            return self.getToken(TSqlParser.IS, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = TSqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2472
                self.match(TSqlParser.EXISTS)
                self.state = 2473
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2474
                self.subquery()
                self.state = 2475
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2477
                self.expression(0)
                self.state = 2478
                self.comparison_operator()
                self.state = 2479
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2481
                self.expression(0)
                self.state = 2482
                self.comparison_operator()
                self.state = 2483
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.ANY or _la==TSqlParser.SOME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2484
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2485
                self.subquery()
                self.state = 2486
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2488
                self.expression(0)
                self.state = 2490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 2489
                    self.match(TSqlParser.NOT)


                self.state = 2492
                self.match(TSqlParser.BETWEEN)
                self.state = 2493
                self.expression(0)
                self.state = 2494
                self.match(TSqlParser.AND)
                self.state = 2495
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2497
                self.expression(0)
                self.state = 2499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 2498
                    self.match(TSqlParser.NOT)


                self.state = 2501
                self.match(TSqlParser.IN)
                self.state = 2502
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2503
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 2504
                    self.expression_list()
                    pass


                self.state = 2507
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2509
                self.expression(0)
                self.state = 2511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 2510
                    self.match(TSqlParser.NOT)


                self.state = 2513
                self.match(TSqlParser.LIKE)
                self.state = 2514
                self.expression(0)
                self.state = 2517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ESCAPE:
                    self.state = 2515
                    self.match(TSqlParser.ESCAPE)
                    self.state = 2516
                    self.expression(0)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2519
                self.expression(0)
                self.state = 2520
                self.match(TSqlParser.IS)
                self.state = 2521
                self.null_notnull()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2523
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2524
                self.search_condition()
                self.state = 2525
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_specification(self):
            return self.getTypedRuleContext(TSqlParser.Query_specificationContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def query_expression(self):
            return self.getTypedRuleContext(TSqlParser.Query_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def sql_union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_unionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_unionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_expression" ):
                return visitor.visitQuery_expression(self)
            else:
                return visitor.visitChildren(self)




    def query_expression(self):

        localctx = TSqlParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.SELECT]:
                self.state = 2529
                self.query_specification()
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.state = 2530
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2531
                self.query_expression()
                self.state = 2532
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2539
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,379,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2536
                    self.sql_union() 
                self.state = 2541
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,379,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_unionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(TSqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(TSqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TSqlParser.INTERSECT, 0)

        def query_specification(self):
            return self.getTypedRuleContext(TSqlParser.Query_specificationContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def query_expression(self):
            return self.getTypedRuleContext(TSqlParser.Query_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_sql_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_union" ):
                listener.enterSql_union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_union" ):
                listener.exitSql_union(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_union" ):
                return visitor.visitSql_union(self)
            else:
                return visitor.visitChildren(self)




    def sql_union(self):

        localctx = TSqlParser.Sql_unionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_sql_union)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UNION]:
                self.state = 2542
                self.match(TSqlParser.UNION)
                self.state = 2544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ALL:
                    self.state = 2543
                    self.match(TSqlParser.ALL)


                pass
            elif token in [TSqlParser.EXCEPT]:
                self.state = 2546
                self.match(TSqlParser.EXCEPT)
                pass
            elif token in [TSqlParser.INTERSECT]:
                self.state = 2547
                self.match(TSqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.SELECT]:
                self.state = 2550
                self.query_specification()
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.state = 2551
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2552
                self.query_expression()
                self.state = 2553
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(TSqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(TSqlParser.Select_listContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(TSqlParser.Top_clauseContext,0)


        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Group_by_itemContext,i)


        def HAVING(self):
            return self.getToken(TSqlParser.HAVING, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification" ):
                return visitor.visitQuery_specification(self)
            else:
                return visitor.visitChildren(self)




    def query_specification(self):

        localctx = TSqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2557
            self.match(TSqlParser.SELECT)
            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ALL or _la==TSqlParser.DISTINCT:
                self.state = 2558
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.TOP:
                self.state = 2561
                self.top_clause()


            self.state = 2564
            self.select_list()
            self.state = 2567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 2565
                self.match(TSqlParser.INTO)
                self.state = 2566
                self.table_name()


            self.state = 2571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 2569
                self.match(TSqlParser.FROM)
                self.state = 2570
                self.table_sources()


            self.state = 2575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 2573
                self.match(TSqlParser.WHERE)
                self.state = 2574
                localctx.where = self.search_condition()


            self.state = 2590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
            if la_ == 1:
                self.state = 2577
                self.match(TSqlParser.GROUP)
                self.state = 2578
                self.match(TSqlParser.BY)
                self.state = 2580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ALL:
                    self.state = 2579
                    self.match(TSqlParser.ALL)


                self.state = 2582
                self.group_by_item()
                self.state = 2587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,389,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2583
                        self.match(TSqlParser.COMMA)
                        self.state = 2584
                        self.group_by_item() 
                    self.state = 2589
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,389,self._ctx)



            self.state = 2594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
            if la_ == 1:
                self.state = 2592
                self.match(TSqlParser.HAVING)
                self.state = 2593
                localctx.having = self.search_condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def top_percent(self):
            return self.getTypedRuleContext(TSqlParser.Top_percentContext,0)


        def top_count(self):
            return self.getTypedRuleContext(TSqlParser.Top_countContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(TSqlParser.TIES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_clause" ):
                return visitor.visitTop_clause(self)
            else:
                return visitor.visitChildren(self)




    def top_clause(self):

        localctx = TSqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self.match(TSqlParser.TOP)
            self.state = 2599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 2597
                self.top_percent()
                pass

            elif la_ == 2:
                self.state = 2598
                self.top_count()
                pass


            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 2601
                self.match(TSqlParser.WITH)
                self.state = 2602
                self.match(TSqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_percentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def REAL(self):
            return self.getToken(TSqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(TSqlParser.FLOAT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_top_percent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_percent" ):
                listener.enterTop_percent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_percent" ):
                listener.exitTop_percent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_percent" ):
                return visitor.visitTop_percent(self)
            else:
                return visitor.visitChildren(self)




    def top_percent(self):

        localctx = TSqlParser.Top_percentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_top_percent)
        self._la = 0 # Token type
        try:
            self.state = 2612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FLOAT, TSqlParser.REAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2605
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FLOAT or _la==TSqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2606
                self.match(TSqlParser.PERCENT)
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2607
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2608
                self.expression(0)
                self.state = 2609
                self.match(TSqlParser.RR_BRACKET)
                self.state = 2610
                self.match(TSqlParser.PERCENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_countContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_top_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_count" ):
                listener.enterTop_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_count" ):
                listener.exitTop_count(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_count" ):
                return visitor.visitTop_count(self)
            else:
                return visitor.visitChildren(self)




    def top_count(self):

        localctx = TSqlParser.Top_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_top_count)
        try:
            self.state = 2619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2614
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2615
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2616
                self.expression(0)
                self.state = 2617
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Order_by_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def OFFSET(self):
            return self.getToken(TSqlParser.OFFSET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ROW)
            else:
                return self.getToken(TSqlParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ROWS)
            else:
                return self.getToken(TSqlParser.ROWS, i)

        def FETCH(self):
            return self.getToken(TSqlParser.FETCH, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = TSqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2621
            self.match(TSqlParser.ORDER)
            self.state = 2622
            self.match(TSqlParser.BY)
            self.state = 2623
            self.order_by_expression()
            self.state = 2628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,396,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2624
                    self.match(TSqlParser.COMMA)
                    self.state = 2625
                    self.order_by_expression() 
                self.state = 2630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,396,self._ctx)

            self.state = 2642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.state = 2631
                self.match(TSqlParser.OFFSET)
                self.state = 2632
                self.expression(0)
                self.state = 2633
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ROW or _la==TSqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2640
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
                if la_ == 1:
                    self.state = 2634
                    self.match(TSqlParser.FETCH)
                    self.state = 2635
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.FIRST or _la==TSqlParser.NEXT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2636
                    self.expression(0)
                    self.state = 2637
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ROW or _la==TSqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2638
                    self.match(TSqlParser.ONLY)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(TSqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def RAW(self):
            return self.getToken(TSqlParser.RAW, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def xml_common_directives(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Xml_common_directivesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Xml_common_directivesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ELEMENTS(self):
            return self.getToken(TSqlParser.ELEMENTS, 0)

        def XSINIL(self):
            return self.getToken(TSqlParser.XSINIL, 0)

        def ABSENT(self):
            return self.getToken(TSqlParser.ABSENT, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def XMLDATA(self):
            return self.getToken(TSqlParser.XMLDATA, 0)

        def XMLSCHEMA(self):
            return self.getToken(TSqlParser.XMLSCHEMA, 0)

        def EXPLICIT(self):
            return self.getToken(TSqlParser.EXPLICIT, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def JSON(self):
            return self.getToken(TSqlParser.JSON, 0)

        def ROOT(self):
            return self.getToken(TSqlParser.ROOT, 0)

        def INCLUDE_NULL_VALUES(self):
            return self.getToken(TSqlParser.INCLUDE_NULL_VALUES, 0)

        def WITHOUT_ARRAY_WRAPPER(self):
            return self.getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_clause" ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_clause" ):
                listener.exitFor_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_clause" ):
                return visitor.visitFor_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_clause(self):

        localctx = TSqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_for_clause)
        self._la = 0 # Token type
        try:
            self.state = 2732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2644
                self.match(TSqlParser.FOR)
                self.state = 2645
                self.match(TSqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2646
                self.match(TSqlParser.FOR)
                self.state = 2647
                self.match(TSqlParser.XML)
                self.state = 2655
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.RAW]:
                    self.state = 2648
                    self.match(TSqlParser.RAW)
                    self.state = 2652
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                    if la_ == 1:
                        self.state = 2649
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 2650
                        self.match(TSqlParser.STRING)
                        self.state = 2651
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                elif token in [TSqlParser.AUTO]:
                    self.state = 2654
                    self.match(TSqlParser.AUTO)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2660
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,401,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2657
                        self.xml_common_directives() 
                    self.state = 2662
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,401,self._ctx)

                self.state = 2673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
                if la_ == 1:
                    self.state = 2663
                    self.match(TSqlParser.COMMA)
                    self.state = 2671
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.XMLDATA]:
                        self.state = 2664
                        self.match(TSqlParser.XMLDATA)
                        pass
                    elif token in [TSqlParser.XMLSCHEMA]:
                        self.state = 2665
                        self.match(TSqlParser.XMLSCHEMA)
                        self.state = 2669
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                        if la_ == 1:
                            self.state = 2666
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 2667
                            self.match(TSqlParser.STRING)
                            self.state = 2668
                            self.match(TSqlParser.RR_BRACKET)


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 2678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 2675
                    self.match(TSqlParser.COMMA)
                    self.state = 2676
                    self.match(TSqlParser.ELEMENTS)
                    self.state = 2677
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ABSENT or _la==TSqlParser.XSINIL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2680
                self.match(TSqlParser.FOR)
                self.state = 2681
                self.match(TSqlParser.XML)
                self.state = 2682
                self.match(TSqlParser.EXPLICIT)
                self.state = 2686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,406,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2683
                        self.xml_common_directives() 
                    self.state = 2688
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,406,self._ctx)

                self.state = 2691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 2689
                    self.match(TSqlParser.COMMA)
                    self.state = 2690
                    self.match(TSqlParser.XMLDATA)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2693
                self.match(TSqlParser.FOR)
                self.state = 2694
                self.match(TSqlParser.XML)
                self.state = 2695
                self.match(TSqlParser.PATH)
                self.state = 2699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
                if la_ == 1:
                    self.state = 2696
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2697
                    self.match(TSqlParser.STRING)
                    self.state = 2698
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 2704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2701
                        self.xml_common_directives() 
                    self.state = 2706
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

                self.state = 2710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                if la_ == 1:
                    self.state = 2707
                    self.match(TSqlParser.COMMA)
                    self.state = 2708
                    self.match(TSqlParser.ELEMENTS)
                    self.state = 2709
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ABSENT or _la==TSqlParser.XSINIL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2712
                self.match(TSqlParser.FOR)
                self.state = 2713
                self.match(TSqlParser.JSON)
                self.state = 2714
                _la = self._input.LA(1)
                if not(_la==TSqlParser.AUTO or _la==TSqlParser.PATH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
                if la_ == 1:
                    self.state = 2715
                    self.match(TSqlParser.COMMA)
                    self.state = 2716
                    self.match(TSqlParser.ROOT)
                    self.state = 2720
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
                    if la_ == 1:
                        self.state = 2717
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 2718
                        self.match(TSqlParser.STRING)
                        self.state = 2719
                        self.match(TSqlParser.RR_BRACKET)




                self.state = 2726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 2724
                    self.match(TSqlParser.COMMA)
                    self.state = 2725
                    self.match(TSqlParser.INCLUDE_NULL_VALUES)


                self.state = 2730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
                if la_ == 1:
                    self.state = 2728
                    self.match(TSqlParser.COMMA)
                    self.state = 2729
                    self.match(TSqlParser.WITHOUT_ARRAY_WRAPPER)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_common_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def BINARY_BASE64(self):
            return self.getToken(TSqlParser.BINARY_BASE64, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(TSqlParser.ROOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_common_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_common_directives" ):
                listener.enterXml_common_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_common_directives" ):
                listener.exitXml_common_directives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_common_directives" ):
                return visitor.visitXml_common_directives(self)
            else:
                return visitor.visitChildren(self)




    def xml_common_directives(self):

        localctx = TSqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_xml_common_directives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            self.match(TSqlParser.COMMA)
            self.state = 2735
            _la = self._input.LA(1)
            if not(_la==TSqlParser.BINARY_BASE64 or _la==TSqlParser.ROOT or _la==TSqlParser.TYPE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(TSqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(TSqlParser.DESC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_order_by_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expression" ):
                listener.enterOrder_by_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expression" ):
                listener.exitOrder_by_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_expression" ):
                return visitor.visitOrder_by_expression(self)
            else:
                return visitor.visitChildren(self)




    def order_by_expression(self):

        localctx = TSqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2737
            self.expression(0)
            self.state = 2739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ASC or _la==TSqlParser.DESC:
                self.state = 2738
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ASC or _la==TSqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_item" ):
                return visitor.visitGroup_by_item(self)
            else:
                return visitor.visitChildren(self)




    def group_by_item(self):

        localctx = TSqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2741
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(TSqlParser.OPTION, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.OptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_option_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_clause" ):
                listener.enterOption_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_clause" ):
                listener.exitOption_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_clause" ):
                return visitor.visitOption_clause(self)
            else:
                return visitor.visitChildren(self)




    def option_clause(self):

        localctx = TSqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2743
            self.match(TSqlParser.OPTION)
            self.state = 2744
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2745
            self.option()
            self.state = 2750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 2746
                self.match(TSqlParser.COMMA)
                self.state = 2747
                self.option()
                self.state = 2752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2753
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(TSqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(TSqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(TSqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(TSqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(TSqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(TSqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(TSqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(TSqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(TSqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(TSqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(TSqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Optimize_for_argContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(TSqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(TSqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(TSqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(TSqlParser.USE, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption" ):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)




    def option(self):

        localctx = TSqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 2800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2755
                self.match(TSqlParser.FAST)
                self.state = 2756
                localctx.number_rows = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2757
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ORDER or _la==TSqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2758
                self.match(TSqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2759
                _la = self._input.LA(1)
                if not(_la==TSqlParser.MERGE or _la==TSqlParser.CONCAT or _la==TSqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2760
                self.match(TSqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2761
                _la = self._input.LA(1)
                if not(_la==TSqlParser.MERGE or _la==TSqlParser.HASH or _la==TSqlParser.LOOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2762
                self.match(TSqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2763
                self.match(TSqlParser.EXPAND)
                self.state = 2764
                self.match(TSqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2765
                self.match(TSqlParser.FORCE)
                self.state = 2766
                self.match(TSqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2767
                self.match(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2768
                self.match(TSqlParser.KEEP)
                self.state = 2769
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2770
                self.match(TSqlParser.KEEPFIXED)
                self.state = 2771
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2772
                self.match(TSqlParser.MAXDOP)
                self.state = 2773
                localctx.number_of_processors = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2774
                self.match(TSqlParser.MAXRECURSION)
                self.state = 2775
                localctx.number_recursion = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2776
                self.match(TSqlParser.OPTIMIZE)
                self.state = 2777
                self.match(TSqlParser.FOR)
                self.state = 2778
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2779
                self.optimize_for_arg()
                self.state = 2784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 2780
                    self.match(TSqlParser.COMMA)
                    self.state = 2781
                    self.optimize_for_arg()
                    self.state = 2786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2787
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2789
                self.match(TSqlParser.OPTIMIZE)
                self.state = 2790
                self.match(TSqlParser.FOR)
                self.state = 2791
                self.match(TSqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2792
                self.match(TSqlParser.PARAMETERIZATION)
                self.state = 2793
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FORCED or _la==TSqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2794
                self.match(TSqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2795
                self.match(TSqlParser.ROBUST)
                self.state = 2796
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2797
                self.match(TSqlParser.USE)
                self.state = 2798
                self.match(TSqlParser.PLAN)
                self.state = 2799
                self.match(TSqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optimize_for_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_optimize_for_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_for_arg" ):
                listener.enterOptimize_for_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_for_arg" ):
                listener.exitOptimize_for_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimize_for_arg" ):
                return visitor.visitOptimize_for_arg(self)
            else:
                return visitor.visitChildren(self)




    def optimize_for_arg(self):

        localctx = TSqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2802
            self.match(TSqlParser.LOCAL_ID)
            self.state = 2809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UNKNOWN]:
                self.state = 2803
                self.match(TSqlParser.UNKNOWN)
                pass
            elif token in [TSqlParser.EQUAL]:
                self.state = 2804
                self.match(TSqlParser.EQUAL)
                self.state = 2807
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                    self.state = 2805
                    self.constant()
                    pass
                elif token in [TSqlParser.NULL]:
                    self.state = 2806
                    self.match(TSqlParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Select_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list" ):
                return visitor.visitSelect_list(self)
            else:
                return visitor.visitChildren(self)




    def select_list(self):

        localctx = TSqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2811
            self.select_list_elem()
            self.state = 2816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,422,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2812
                    self.match(TSqlParser.COMMA)
                    self.state = 2813
                    self.select_list_elem() 
                self.state = 2818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,422,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_method_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_var_stringContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_udt_method_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_method_arguments" ):
                listener.enterUdt_method_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_method_arguments" ):
                listener.exitUdt_method_arguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdt_method_arguments" ):
                return visitor.visitUdt_method_arguments(self)
            else:
                return visitor.visitChildren(self)




    def udt_method_arguments(self):

        localctx = TSqlParser.Udt_method_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_udt_method_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2819
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2820
            self.execute_var_string()
            self.state = 2825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 2821
                self.match(TSqlParser.COMMA)
                self.state = 2822
                self.execute_var_string()
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2828
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsteriskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def asterisk(self):
            return self.getTypedRuleContext(TSqlParser.AsteriskContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_asterisk

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsterisk" ):
                listener.enterAsterisk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsterisk" ):
                listener.exitAsterisk(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsterisk" ):
                return visitor.visitAsterisk(self)
            else:
                return visitor.visitChildren(self)




    def asterisk(self):

        localctx = TSqlParser.AsteriskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_asterisk)
        try:
            self.state = 2835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2830
                self.match(TSqlParser.STAR)
                pass
            elif token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2831
                self.table_name()
                self.state = 2832
                self.match(TSqlParser.DOT)
                self.state = 2833
                self.asterisk()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_name = None # IdentifierContext

        def DOLLAR(self):
            return self.getToken(TSqlParser.DOLLAR, 0)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(TSqlParser.ROWGUID, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_column_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_elem" ):
                listener.enterColumn_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_elem" ):
                listener.exitColumn_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_elem" ):
                return visitor.visitColumn_elem(self)
            else:
                return visitor.visitChildren(self)




    def column_elem(self):

        localctx = TSqlParser.Column_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_column_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.state = 2837
                self.table_name()
                self.state = 2838
                self.match(TSqlParser.DOT)


            self.state = 2847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.state = 2842
                localctx.column_name = self.identifier()
                pass

            elif la_ == 2:
                self.state = 2843
                self.match(TSqlParser.DOLLAR)
                self.state = 2844
                self.match(TSqlParser.IDENTITY)
                pass

            elif la_ == 3:
                self.state = 2845
                self.match(TSqlParser.DOLLAR)
                self.state = 2846
                self.match(TSqlParser.ROWGUID)
                pass


            self.state = 2850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 2849
                self.as_column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # IdentifierContext
            self.non_static_attr = None # IdentifierContext
            self.static_attr = None # IdentifierContext

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def udt_method_arguments(self):
            return self.getTypedRuleContext(TSqlParser.Udt_method_argumentsContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLON)
            else:
                return self.getToken(TSqlParser.COLON, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_udt_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_elem" ):
                listener.enterUdt_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_elem" ):
                listener.exitUdt_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdt_elem" ):
                return visitor.visitUdt_elem(self)
            else:
                return visitor.visitChildren(self)




    def udt_elem(self):

        localctx = TSqlParser.Udt_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_udt_elem)
        try:
            self.state = 2869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2852
                localctx.udt_column_name = self.identifier()
                self.state = 2853
                self.match(TSqlParser.DOT)
                self.state = 2854
                localctx.non_static_attr = self.identifier()
                self.state = 2855
                self.udt_method_arguments()
                self.state = 2857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
                if la_ == 1:
                    self.state = 2856
                    self.as_column_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2859
                localctx.udt_column_name = self.identifier()
                self.state = 2860
                self.match(TSqlParser.COLON)
                self.state = 2861
                self.match(TSqlParser.COLON)
                self.state = 2862
                localctx.static_attr = self.identifier()
                self.state = 2864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                if la_ == 1:
                    self.state = 2863
                    self.udt_method_arguments()


                self.state = 2867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
                if la_ == 1:
                    self.state = 2866
                    self.as_column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.eq = None # Token

        def column_alias(self):
            return self.getTypedRuleContext(TSqlParser.Column_aliasContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_expression_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_elem" ):
                listener.enterExpression_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_elem" ):
                listener.exitExpression_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_elem" ):
                return visitor.visitExpression_elem(self)
            else:
                return visitor.visitChildren(self)




    def expression_elem(self):

        localctx = TSqlParser.Expression_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_expression_elem)
        try:
            self.state = 2879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2871
                self.column_alias()
                self.state = 2872
                localctx.eq = self.match(TSqlParser.EQUAL)
                self.state = 2873
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2875
                self.expression(0)
                self.state = 2877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
                if la_ == 1:
                    self.state = 2876
                    self.as_column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asterisk(self):
            return self.getTypedRuleContext(TSqlParser.AsteriskContext,0)


        def column_elem(self):
            return self.getTypedRuleContext(TSqlParser.Column_elemContext,0)


        def udt_elem(self):
            return self.getTypedRuleContext(TSqlParser.Udt_elemContext,0)


        def expression_elem(self):
            return self.getTypedRuleContext(TSqlParser.Expression_elemContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list_elem" ):
                return visitor.visitSelect_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def select_list_elem(self):

        localctx = TSqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_select_list_elem)
        try:
            self.state = 2885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2881
                self.asterisk()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2882
                self.column_elem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2883
                self.udt_elem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2884
                self.expression_elem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_sourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_sources" ):
                return visitor.visitTable_sources(self)
            else:
                return visitor.visitChildren(self)




    def table_sources(self):

        localctx = TSqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2887
            self.table_source()
            self.state = 2892
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,435,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2888
                    self.match(TSqlParser.COMMA)
                    self.state = 2889
                    self.table_source() 
                self.state = 2894
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,435,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item_joined(self):
            return self.getTypedRuleContext(TSqlParser.Table_source_item_joinedContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source" ):
                listener.enterTable_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source" ):
                listener.exitTable_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source" ):
                return visitor.visitTable_source(self)
            else:
                return visitor.visitChildren(self)




    def table_source(self):

        localctx = TSqlParser.Table_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_table_source)
        try:
            self.state = 2900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2895
                self.table_source_item_joined()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2896
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2897
                self.table_source_item_joined()
                self.state = 2898
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_source_item_joinedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item(self):
            return self.getTypedRuleContext(TSqlParser.Table_source_itemContext,0)


        def join_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Join_partContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Join_partContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_source_item_joined

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_joined" ):
                listener.enterTable_source_item_joined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_joined" ):
                listener.exitTable_source_item_joined(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_joined" ):
                return visitor.visitTable_source_item_joined(self)
            else:
                return visitor.visitChildren(self)




    def table_source_item_joined(self):

        localctx = TSqlParser.Table_source_item_joinedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_table_source_item_joined)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2902
            self.table_source_item()
            self.state = 2906
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,437,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2903
                    self.join_part() 
                self.state = 2908
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,437,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_source_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name_with_hint(self):
            return self.getTypedRuleContext(TSqlParser.Table_name_with_hintContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def rowset_function(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_functionContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(TSqlParser.Derived_tableContext,0)


        def column_alias_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_alias_listContext,0)


        def change_table(self):
            return self.getTypedRuleContext(TSqlParser.Change_tableContext,0)


        def function_call(self):
            return self.getTypedRuleContext(TSqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def open_xml(self):
            return self.getTypedRuleContext(TSqlParser.Open_xmlContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLON)
            else:
                return self.getToken(TSqlParser.COLON, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_source_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item" ):
                listener.enterTable_source_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item" ):
                listener.exitTable_source_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item" ):
                return visitor.visitTable_source_item(self)
            else:
                return visitor.visitChildren(self)




    def table_source_item(self):

        localctx = TSqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_table_source_item)
        try:
            self.state = 2955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2909
                self.table_name_with_hint()
                self.state = 2911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 2910
                    self.as_table_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2913
                self.full_table_name()
                self.state = 2915
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
                if la_ == 1:
                    self.state = 2914
                    self.as_table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2917
                self.rowset_function()
                self.state = 2919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
                if la_ == 1:
                    self.state = 2918
                    self.as_table_alias()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2921
                self.derived_table()
                self.state = 2926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
                if la_ == 1:
                    self.state = 2922
                    self.as_table_alias()
                    self.state = 2924
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
                    if la_ == 1:
                        self.state = 2923
                        self.column_alias_list()




                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2928
                self.change_table()
                self.state = 2929
                self.as_table_alias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2931
                self.function_call()
                self.state = 2933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
                if la_ == 1:
                    self.state = 2932
                    self.as_table_alias()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2935
                self.match(TSqlParser.LOCAL_ID)
                self.state = 2937
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
                if la_ == 1:
                    self.state = 2936
                    self.as_table_alias()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2939
                self.match(TSqlParser.LOCAL_ID)
                self.state = 2940
                self.match(TSqlParser.DOT)
                self.state = 2941
                self.function_call()
                self.state = 2946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
                if la_ == 1:
                    self.state = 2942
                    self.as_table_alias()
                    self.state = 2944
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
                    if la_ == 1:
                        self.state = 2943
                        self.column_alias_list()




                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2948
                self.open_xml()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2949
                self.match(TSqlParser.COLON)
                self.state = 2950
                self.match(TSqlParser.COLON)
                self.state = 2951
                self.function_call()
                self.state = 2953
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
                if la_ == 1:
                    self.state = 2952
                    self.as_table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_xmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENXML(self):
            return self.getToken(TSqlParser.OPENXML, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def schema_declaration(self):
            return self.getTypedRuleContext(TSqlParser.Schema_declarationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_open_xml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_xml" ):
                listener.enterOpen_xml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_xml" ):
                listener.exitOpen_xml(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_xml" ):
                return visitor.visitOpen_xml(self)
            else:
                return visitor.visitChildren(self)




    def open_xml(self):

        localctx = TSqlParser.Open_xmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_open_xml)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2957
            self.match(TSqlParser.OPENXML)
            self.state = 2958
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2959
            self.expression(0)
            self.state = 2960
            self.match(TSqlParser.COMMA)
            self.state = 2961
            self.expression(0)
            self.state = 2964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 2962
                self.match(TSqlParser.COMMA)
                self.state = 2963
                self.expression(0)


            self.state = 2966
            self.match(TSqlParser.RR_BRACKET)
            self.state = 2972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.state = 2967
                self.match(TSqlParser.WITH)
                self.state = 2968
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2969
                self.schema_declaration()
                self.state = 2970
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_declarationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_schema_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_declaration" ):
                listener.enterSchema_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_declaration" ):
                listener.exitSchema_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_declaration" ):
                return visitor.visitSchema_declaration(self)
            else:
                return visitor.visitChildren(self)




    def schema_declaration(self):

        localctx = TSqlParser.Schema_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_schema_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2974
            self.column_declaration()
            self.state = 2979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 2975
                self.match(TSqlParser.COMMA)
                self.state = 2976
                self.column_declaration()
                self.state = 2981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_declaration" ):
                listener.enterColumn_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_declaration" ):
                listener.exitColumn_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_declaration" ):
                return visitor.visitColumn_declaration(self)
            else:
                return visitor.visitChildren(self)




    def column_declaration(self):

        localctx = TSqlParser.Column_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_column_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2982
            self.match(TSqlParser.IDENTIFIER)
            self.state = 2983
            self.data_type()
            self.state = 2985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.STRING:
                self.state = 2984
                self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(TSqlParser.CHANGETABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CHANGES(self):
            return self.getToken(TSqlParser.CHANGES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_change_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table" ):
                listener.enterChange_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table" ):
                listener.exitChange_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_table" ):
                return visitor.visitChange_table(self)
            else:
                return visitor.visitChildren(self)




    def change_table(self):

        localctx = TSqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2987
            self.match(TSqlParser.CHANGETABLE)
            self.state = 2988
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2989
            self.match(TSqlParser.CHANGES)
            self.state = 2990
            self.table_name()
            self.state = 2991
            self.match(TSqlParser.COMMA)
            self.state = 2992
            _la = self._input.LA(1)
            if not(_la==TSqlParser.NULL or _la==TSqlParser.LOCAL_ID or _la==TSqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2993
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_type = None # Token
            self.join_hint = None # Token

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def table_source(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourceContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def LEFT(self):
            return self.getToken(TSqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TSqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(TSqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(TSqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def CROSS(self):
            return self.getToken(TSqlParser.CROSS, 0)

        def APPLY(self):
            return self.getToken(TSqlParser.APPLY, 0)

        def PIVOT(self):
            return self.getToken(TSqlParser.PIVOT, 0)

        def pivot_clause(self):
            return self.getTypedRuleContext(TSqlParser.Pivot_clauseContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def UNPIVOT(self):
            return self.getToken(TSqlParser.UNPIVOT, 0)

        def unpivot_clause(self):
            return self.getTypedRuleContext(TSqlParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_join_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_part" ):
                listener.enterJoin_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_part" ):
                listener.exitJoin_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_part" ):
                return visitor.visitJoin_part(self)
            else:
                return visitor.visitChildren(self)




    def join_part(self):

        localctx = TSqlParser.Join_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_join_part)
        self._la = 0 # Token type
        try:
            self.state = 3029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3002
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.INNER, TSqlParser.JOIN, TSqlParser.MERGE, TSqlParser.HASH, TSqlParser.LOOP, TSqlParser.REMOTE]:
                    self.state = 2996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.INNER:
                        self.state = 2995
                        self.match(TSqlParser.INNER)


                    pass
                elif token in [TSqlParser.FULL, TSqlParser.LEFT, TSqlParser.RIGHT]:
                    self.state = 2998
                    localctx.join_type = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.FULL or _la==TSqlParser.LEFT or _la==TSqlParser.RIGHT):
                        localctx.join_type = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.OUTER:
                        self.state = 2999
                        self.match(TSqlParser.OUTER)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.MERGE or _la==TSqlParser.HASH or _la==TSqlParser.LOOP or _la==TSqlParser.REMOTE:
                    self.state = 3004
                    localctx.join_hint = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.MERGE or _la==TSqlParser.HASH or _la==TSqlParser.LOOP or _la==TSqlParser.REMOTE):
                        localctx.join_hint = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3007
                self.match(TSqlParser.JOIN)
                self.state = 3008
                self.table_source()
                self.state = 3009
                self.match(TSqlParser.ON)
                self.state = 3010
                self.search_condition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3012
                self.match(TSqlParser.CROSS)
                self.state = 3013
                self.match(TSqlParser.JOIN)
                self.state = 3014
                self.table_source()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3015
                self.match(TSqlParser.CROSS)
                self.state = 3016
                self.match(TSqlParser.APPLY)
                self.state = 3017
                self.table_source()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3018
                self.match(TSqlParser.OUTER)
                self.state = 3019
                self.match(TSqlParser.APPLY)
                self.state = 3020
                self.table_source()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3021
                self.match(TSqlParser.PIVOT)
                self.state = 3022
                self.pivot_clause()
                self.state = 3023
                self.as_table_alias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3025
                self.match(TSqlParser.UNPIVOT)
                self.state = 3026
                self.unpivot_clause()
                self.state = 3027
                self.as_table_alias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Aggregate_windowed_functionContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def column_alias_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_alias_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_clause" ):
                return visitor.visitPivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_clause(self):

        localctx = TSqlParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_pivot_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3031
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3032
            self.aggregate_windowed_function()
            self.state = 3033
            self.match(TSqlParser.FOR)
            self.state = 3034
            self.full_column_name()
            self.state = 3035
            self.match(TSqlParser.IN)
            self.state = 3036
            self.column_alias_list()
            self.state = 3037
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def full_column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_name_listContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_clause" ):
                return visitor.visitUnpivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_clause(self):

        localctx = TSqlParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_unpivot_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3039
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3040
            self.expression(0)
            self.state = 3041
            self.match(TSqlParser.FOR)
            self.state = 3042
            self.full_column_name()
            self.state = 3043
            self.match(TSqlParser.IN)
            self.state = 3044
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3045
            self.full_column_name_list()
            self.state = 3046
            self.match(TSqlParser.RR_BRACKET)
            self.state = 3047
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Full_column_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name_list" ):
                listener.enterFull_column_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name_list" ):
                listener.exitFull_column_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_column_name_list" ):
                return visitor.visitFull_column_name_list(self)
            else:
                return visitor.visitChildren(self)




    def full_column_name_list(self):

        localctx = TSqlParser.Full_column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_full_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3049
            self.full_column_name()
            self.state = 3054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 3050
                self.match(TSqlParser.COMMA)
                self.state = 3051
                self.full_column_name()
                self.state = 3056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_name_with_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_name_with_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name_with_hint" ):
                listener.enterTable_name_with_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name_with_hint" ):
                listener.exitTable_name_with_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name_with_hint" ):
                return visitor.visitTable_name_with_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_name_with_hint(self):

        localctx = TSqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3057
            self.table_name()
            self.state = 3059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3058
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(TSqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def BULK(self):
            return self.getToken(TSqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Bulk_optionContext,i)


        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_rowset_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function" ):
                listener.enterRowset_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function" ):
                listener.exitRowset_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function" ):
                return visitor.visitRowset_function(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function(self):

        localctx = TSqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 3087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3061
                self.match(TSqlParser.OPENROWSET)
                self.state = 3062
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3063
                localctx.provider_name = self.match(TSqlParser.STRING)
                self.state = 3064
                self.match(TSqlParser.COMMA)
                self.state = 3065
                localctx.connectionString = self.match(TSqlParser.STRING)
                self.state = 3066
                self.match(TSqlParser.COMMA)
                self.state = 3067
                localctx.sql = self.match(TSqlParser.STRING)
                self.state = 3068
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3069
                self.match(TSqlParser.OPENROWSET)
                self.state = 3070
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3071
                self.match(TSqlParser.BULK)
                self.state = 3072
                localctx.data_file = self.match(TSqlParser.STRING)
                self.state = 3073
                self.match(TSqlParser.COMMA)
                self.state = 3083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
                if la_ == 1:
                    self.state = 3074
                    self.bulk_option()
                    self.state = 3079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.COMMA:
                        self.state = 3075
                        self.match(TSqlParser.COMMA)
                        self.state = 3076
                        self.bulk_option()
                        self.state = 3081
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 3082
                    self.identifier()
                    pass


                self.state = 3085
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bulk_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_bulk_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_option" ):
                listener.enterBulk_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_option" ):
                listener.exitBulk_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBulk_option" ):
                return visitor.visitBulk_option(self)
            else:
                return visitor.visitChildren(self)




    def bulk_option(self):

        localctx = TSqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            self.identifier()
            self.state = 3090
            self.match(TSqlParser.EQUAL)
            self.state = 3091
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_table" ):
                return visitor.visitDerived_table(self)
            else:
                return visitor.visitChildren(self)




    def derived_table(self):

        localctx = TSqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_derived_table)
        try:
            self.state = 3103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3093
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3094
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3095
                self.subquery()
                self.state = 3096
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3098
                self.table_value_constructor()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3099
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3100
                self.table_value_constructor()
                self.state = 3101
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TSqlParser.RULE_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CURRENT_USERContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(TSqlParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_USER" ):
                listener.enterCURRENT_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_USER" ):
                listener.exitCURRENT_USER(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCURRENT_USER" ):
                return visitor.visitCURRENT_USER(self)
            else:
                return visitor.visitChildren(self)


    class DATEADDContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATEADD(self):
            return self.getToken(TSqlParser.DATEADD, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEADD" ):
                listener.enterDATEADD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEADD" ):
                listener.exitDATEADD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDATEADD" ):
                return visitor.visitDATEADD(self)
            else:
                return visitor.visitChildren(self)


    class CHECKSUMContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCHECKSUM" ):
                listener.enterCHECKSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCHECKSUM" ):
                listener.exitCHECKSUM(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCHECKSUM" ):
                return visitor.visitCHECKSUM(self)
            else:
                return visitor.visitChildren(self)


    class CURRENT_TIMESTAMPContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(TSqlParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_TIMESTAMP" ):
                listener.enterCURRENT_TIMESTAMP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_TIMESTAMP" ):
                listener.exitCURRENT_TIMESTAMP(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCURRENT_TIMESTAMP" ):
                return visitor.visitCURRENT_TIMESTAMP(self)
            else:
                return visitor.visitChildren(self)


    class BINARY_CHECKSUMContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBINARY_CHECKSUM" ):
                listener.enterBINARY_CHECKSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBINARY_CHECKSUM" ):
                listener.exitBINARY_CHECKSUM(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBINARY_CHECKSUM" ):
                return visitor.visitBINARY_CHECKSUM(self)
            else:
                return visitor.visitChildren(self)


    class IFFContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IIF(self):
            return self.getToken(TSqlParser.IIF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIFF" ):
                listener.enterIFF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIFF" ):
                listener.exitIFF(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIFF" ):
                return visitor.visitIFF(self)
            else:
                return visitor.visitChildren(self)


    class SYSTEM_USERContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYSTEM_USER(self):
            return self.getToken(TSqlParser.SYSTEM_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYSTEM_USER" ):
                listener.enterSYSTEM_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYSTEM_USER" ):
                listener.exitSYSTEM_USER(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSYSTEM_USER" ):
                return visitor.visitSYSTEM_USER(self)
            else:
                return visitor.visitChildren(self)


    class NULLIFContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULLIF(self):
            return self.getToken(TSqlParser.NULLIF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNULLIF" ):
                listener.enterNULLIF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNULLIF" ):
                listener.exitNULLIF(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNULLIF" ):
                return visitor.visitNULLIF(self)
            else:
                return visitor.visitChildren(self)


    class SESSION_USERContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SESSION_USER(self):
            return self.getToken(TSqlParser.SESSION_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSESSION_USER" ):
                listener.enterSESSION_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSESSION_USER" ):
                listener.exitSESSION_USER(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSESSION_USER" ):
                return visitor.visitSESSION_USER(self)
            else:
                return visitor.visitChildren(self)


    class CONVERTContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.convert_data_type = None # Data_typeContext
            self.convert_expression = None # ExpressionContext
            self.style = None # ExpressionContext
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(TSqlParser.CONVERT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCONVERT" ):
                listener.enterCONVERT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCONVERT" ):
                listener.exitCONVERT(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCONVERT" ):
                return visitor.visitCONVERT(self)
            else:
                return visitor.visitChildren(self)


    class XML_DATA_TYPE_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def xml_data_type_methods(self):
            return self.getTypedRuleContext(TSqlParser.Xml_data_type_methodsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXML_DATA_TYPE_FUNC" ):
                listener.enterXML_DATA_TYPE_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXML_DATA_TYPE_FUNC" ):
                listener.exitXML_DATA_TYPE_FUNC(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXML_DATA_TYPE_FUNC" ):
                return visitor.visitXML_DATA_TYPE_FUNC(self)
            else:
                return visitor.visitChildren(self)


    class COALESCEContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(TSqlParser.COALESCE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOALESCE" ):
                listener.enterCOALESCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOALESCE" ):
                listener.exitCOALESCE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCOALESCE" ):
                return visitor.visitCOALESCE(self)
            else:
                return visitor.visitChildren(self)


    class CASTContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(TSqlParser.CAST, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCAST" ):
                listener.enterCAST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCAST" ):
                listener.exitCAST(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCAST" ):
                return visitor.visitCAST(self)
            else:
                return visitor.visitChildren(self)


    class MIN_ACTIVE_ROWVERSIONContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMIN_ACTIVE_ROWVERSION" ):
                listener.enterMIN_ACTIVE_ROWVERSION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMIN_ACTIVE_ROWVERSION" ):
                listener.exitMIN_ACTIVE_ROWVERSION(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMIN_ACTIVE_ROWVERSION" ):
                return visitor.visitMIN_ACTIVE_ROWVERSION(self)
            else:
                return visitor.visitChildren(self)


    class SCALAR_FUNCTIONContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_function_name(self):
            return self.getTypedRuleContext(TSqlParser.Scalar_function_nameContext,0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSCALAR_FUNCTION" ):
                listener.enterSCALAR_FUNCTION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSCALAR_FUNCTION" ):
                listener.exitSCALAR_FUNCTION(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSCALAR_FUNCTION" ):
                return visitor.visitSCALAR_FUNCTION(self)
            else:
                return visitor.visitChildren(self)


    class DATEPARTContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATEPART(self):
            return self.getToken(TSqlParser.DATEPART, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEPART" ):
                listener.enterDATEPART(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEPART" ):
                listener.exitDATEPART(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDATEPART" ):
                return visitor.visitDATEPART(self)
            else:
                return visitor.visitChildren(self)


    class STUFFContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STUFF(self):
            return self.getToken(TSqlParser.STUFF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSTUFF" ):
                listener.enterSTUFF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSTUFF" ):
                listener.exitSTUFF(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSTUFF" ):
                return visitor.visitSTUFF(self)
            else:
                return visitor.visitChildren(self)


    class AGGREGATE_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAGGREGATE_WINDOWED_FUNC" ):
                listener.enterAGGREGATE_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAGGREGATE_WINDOWED_FUNC" ):
                listener.exitAGGREGATE_WINDOWED_FUNC(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAGGREGATE_WINDOWED_FUNC" ):
                return visitor.visitAGGREGATE_WINDOWED_FUNC(self)
            else:
                return visitor.visitChildren(self)


    class IDENTITYContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.seed = None # Token
            self.increment = None # Token
            self.copyFrom(ctx)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIDENTITY" ):
                listener.enterIDENTITY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIDENTITY" ):
                listener.exitIDENTITY(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIDENTITY" ):
                return visitor.visitIDENTITY(self)
            else:
                return visitor.visitChildren(self)


    class RANKING_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Ranking_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRANKING_WINDOWED_FUNC" ):
                listener.enterRANKING_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRANKING_WINDOWED_FUNC" ):
                listener.exitRANKING_WINDOWED_FUNC(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRANKING_WINDOWED_FUNC" ):
                return visitor.visitRANKING_WINDOWED_FUNC(self)
            else:
                return visitor.visitChildren(self)


    class DATENAMEContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATENAME(self):
            return self.getToken(TSqlParser.DATENAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATENAME" ):
                listener.enterDATENAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATENAME" ):
                listener.exitDATENAME(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDATENAME" ):
                return visitor.visitDATENAME(self)
            else:
                return visitor.visitChildren(self)


    class GETUTCDATEContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GETUTCDATE(self):
            return self.getToken(TSqlParser.GETUTCDATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGETUTCDATE" ):
                listener.enterGETUTCDATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGETUTCDATE" ):
                listener.exitGETUTCDATE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGETUTCDATE" ):
                return visitor.visitGETUTCDATE(self)
            else:
                return visitor.visitChildren(self)


    class ANALYTIC_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def analytic_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Analytic_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterANALYTIC_WINDOWED_FUNC" ):
                listener.enterANALYTIC_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitANALYTIC_WINDOWED_FUNC" ):
                listener.exitANALYTIC_WINDOWED_FUNC(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitANALYTIC_WINDOWED_FUNC" ):
                return visitor.visitANALYTIC_WINDOWED_FUNC(self)
            else:
                return visitor.visitChildren(self)


    class ISNULLContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISNULL(self):
            return self.getToken(TSqlParser.ISNULL, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISNULL" ):
                listener.enterISNULL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISNULL" ):
                listener.exitISNULL(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitISNULL" ):
                return visitor.visitISNULL(self)
            else:
                return visitor.visitChildren(self)


    class DATEDIFFContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATEDIFF(self):
            return self.getToken(TSqlParser.DATEDIFF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEDIFF" ):
                listener.enterDATEDIFF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEDIFF" ):
                listener.exitDATEDIFF(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDATEDIFF" ):
                return visitor.visitDATEDIFF(self)
            else:
                return visitor.visitChildren(self)


    class GETDATEContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GETDATE(self):
            return self.getToken(TSqlParser.GETDATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGETDATE" ):
                listener.enterGETDATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGETDATE" ):
                listener.exitGETDATE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGETDATE" ):
                return visitor.visitGETDATE(self)
            else:
                return visitor.visitChildren(self)



    def function_call(self):

        localctx = TSqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 3237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                localctx = TSqlParser.RANKING_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3105
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                localctx = TSqlParser.AGGREGATE_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3106
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                localctx = TSqlParser.ANALYTIC_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3107
                self.analytic_windowed_function()
                pass

            elif la_ == 4:
                localctx = TSqlParser.SCALAR_FUNCTIONContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3108
                self.scalar_function_name()
                self.state = 3109
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TSqlParser.BLOCKING_HIERARCHY) | (1 << TSqlParser.CALLED) | (1 << TSqlParser.CASE) | (1 << TSqlParser.COALESCE))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (TSqlParser.CONVERT - 69)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 69)) | (1 << (TSqlParser.CURRENT_USER - 69)) | (1 << (TSqlParser.DATA_COMPRESSION - 69)) | (1 << (TSqlParser.DEFAULT - 69)) | (1 << (TSqlParser.EVENTDATA - 69)) | (1 << (TSqlParser.FILENAME - 69)) | (1 << (TSqlParser.FILLFACTOR - 69)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (TSqlParser.FORCESEEK - 133)) | (1 << (TSqlParser.IDENTITY - 133)) | (1 << (TSqlParser.IIF - 133)) | (1 << (TSqlParser.INIT - 133)) | (1 << (TSqlParser.ISNULL - 133)) | (1 << (TSqlParser.KEY - 133)) | (1 << (TSqlParser.LEFT - 133)) | (1 << (TSqlParser.MASTER - 133)) | (1 << (TSqlParser.MAX_MEMORY - 133)))) != 0) or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & ((1 << (TSqlParser.NULL - 222)) | (1 << (TSqlParser.NULLIF - 222)) | (1 << (TSqlParser.OFFSETS - 222)) | (1 << (TSqlParser.OVER - 222)) | (1 << (TSqlParser.PAGE - 222)) | (1 << (TSqlParser.PUBLIC - 222)) | (1 << (TSqlParser.K_R - 222)) | (1 << (TSqlParser.RAW - 222)) | (1 << (TSqlParser.RETURN - 222)) | (1 << (TSqlParser.RETURNS - 222)))) != 0) or ((((_la - 286)) & ~0x3f) == 0 and ((1 << (_la - 286)) & ((1 << (TSqlParser.RIGHT - 286)) | (1 << (TSqlParser.ROWCOUNT - 286)) | (1 << (TSqlParser.SAFETY - 286)) | (1 << (TSqlParser.SERVER - 286)) | (1 << (TSqlParser.SESSION_USER - 286)) | (1 << (TSqlParser.SID - 286)) | (1 << (TSqlParser.SOURCE - 286)) | (1 << (TSqlParser.STATE - 286)) | (1 << (TSqlParser.START - 286)) | (1 << (TSqlParser.SYSTEM_USER - 286)) | (1 << (TSqlParser.TARGET - 286)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.DECIMAL - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)) | (1 << (TSqlParser.STRING - 768)) | (1 << (TSqlParser.BINARY - 768)) | (1 << (TSqlParser.FLOAT - 768)) | (1 << (TSqlParser.REAL - 768)) | (1 << (TSqlParser.DOLLAR - 768)) | (1 << (TSqlParser.LR_BRACKET - 768)) | (1 << (TSqlParser.PLUS - 768)) | (1 << (TSqlParser.MINUS - 768)) | (1 << (TSqlParser.BIT_NOT - 768)))) != 0):
                    self.state = 3110
                    self.expression_list()


                self.state = 3113
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = TSqlParser.BINARY_CHECKSUMContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3115
                self.match(TSqlParser.BINARY_CHECKSUM)
                self.state = 3116
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3117
                self.match(TSqlParser.STAR)
                self.state = 3118
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = TSqlParser.CASTContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3119
                self.match(TSqlParser.CAST)
                self.state = 3120
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3121
                self.expression(0)
                self.state = 3122
                self.match(TSqlParser.AS)
                self.state = 3123
                self.data_type()
                self.state = 3124
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = TSqlParser.CONVERTContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3126
                self.match(TSqlParser.CONVERT)
                self.state = 3127
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3128
                localctx.convert_data_type = self.data_type()
                self.state = 3129
                self.match(TSqlParser.COMMA)
                self.state = 3130
                localctx.convert_expression = self.expression(0)
                self.state = 3133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3131
                    self.match(TSqlParser.COMMA)
                    self.state = 3132
                    localctx.style = self.expression(0)


                self.state = 3135
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = TSqlParser.CHECKSUMContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3137
                self.match(TSqlParser.CHECKSUM)
                self.state = 3138
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3139
                self.match(TSqlParser.STAR)
                self.state = 3140
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = TSqlParser.COALESCEContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3141
                self.match(TSqlParser.COALESCE)
                self.state = 3142
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3143
                self.expression_list()
                self.state = 3144
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = TSqlParser.CURRENT_TIMESTAMPContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 3146
                self.match(TSqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 11:
                localctx = TSqlParser.CURRENT_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 3147
                self.match(TSqlParser.CURRENT_USER)
                pass

            elif la_ == 12:
                localctx = TSqlParser.DATEADDContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 3148
                self.match(TSqlParser.DATEADD)
                self.state = 3149
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3150
                self.match(TSqlParser.IDENTIFIER)
                self.state = 3151
                self.match(TSqlParser.COMMA)
                self.state = 3152
                self.expression(0)
                self.state = 3153
                self.match(TSqlParser.COMMA)
                self.state = 3154
                self.expression(0)
                self.state = 3155
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = TSqlParser.DATEDIFFContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 3157
                self.match(TSqlParser.DATEDIFF)
                self.state = 3158
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3159
                self.match(TSqlParser.IDENTIFIER)
                self.state = 3160
                self.match(TSqlParser.COMMA)
                self.state = 3161
                self.expression(0)
                self.state = 3162
                self.match(TSqlParser.COMMA)
                self.state = 3163
                self.expression(0)
                self.state = 3164
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = TSqlParser.DATENAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 3166
                self.match(TSqlParser.DATENAME)
                self.state = 3167
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3168
                self.match(TSqlParser.IDENTIFIER)
                self.state = 3169
                self.match(TSqlParser.COMMA)
                self.state = 3170
                self.expression(0)
                self.state = 3171
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = TSqlParser.DATEPARTContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 3173
                self.match(TSqlParser.DATEPART)
                self.state = 3174
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3175
                self.match(TSqlParser.IDENTIFIER)
                self.state = 3176
                self.match(TSqlParser.COMMA)
                self.state = 3177
                self.expression(0)
                self.state = 3178
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = TSqlParser.GETDATEContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 3180
                self.match(TSqlParser.GETDATE)
                self.state = 3181
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3182
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                localctx = TSqlParser.GETUTCDATEContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 3183
                self.match(TSqlParser.GETUTCDATE)
                self.state = 3184
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3185
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                localctx = TSqlParser.IDENTITYContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 3186
                self.match(TSqlParser.IDENTITY)
                self.state = 3187
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3188
                self.data_type()
                self.state = 3191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
                if la_ == 1:
                    self.state = 3189
                    self.match(TSqlParser.COMMA)
                    self.state = 3190
                    localctx.seed = self.match(TSqlParser.DECIMAL)


                self.state = 3195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3193
                    self.match(TSqlParser.COMMA)
                    self.state = 3194
                    localctx.increment = self.match(TSqlParser.DECIMAL)


                self.state = 3197
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 19:
                localctx = TSqlParser.MIN_ACTIVE_ROWVERSIONContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 3199
                self.match(TSqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 20:
                localctx = TSqlParser.NULLIFContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 3200
                self.match(TSqlParser.NULLIF)
                self.state = 3201
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3202
                self.expression(0)
                self.state = 3203
                self.match(TSqlParser.COMMA)
                self.state = 3204
                self.expression(0)
                self.state = 3205
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 21:
                localctx = TSqlParser.STUFFContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 3207
                self.match(TSqlParser.STUFF)
                self.state = 3208
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3209
                self.expression(0)
                self.state = 3210
                self.match(TSqlParser.COMMA)
                self.state = 3211
                self.match(TSqlParser.DECIMAL)
                self.state = 3212
                self.match(TSqlParser.COMMA)
                self.state = 3213
                self.match(TSqlParser.DECIMAL)
                self.state = 3214
                self.match(TSqlParser.COMMA)
                self.state = 3215
                self.expression(0)
                self.state = 3216
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 22:
                localctx = TSqlParser.SESSION_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 3218
                self.match(TSqlParser.SESSION_USER)
                pass

            elif la_ == 23:
                localctx = TSqlParser.SYSTEM_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 3219
                self.match(TSqlParser.SYSTEM_USER)
                pass

            elif la_ == 24:
                localctx = TSqlParser.ISNULLContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 3220
                self.match(TSqlParser.ISNULL)
                self.state = 3221
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3222
                self.expression(0)
                self.state = 3223
                self.match(TSqlParser.COMMA)
                self.state = 3224
                self.expression(0)
                self.state = 3225
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 25:
                localctx = TSqlParser.XML_DATA_TYPE_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 3227
                self.xml_data_type_methods()
                pass

            elif la_ == 26:
                localctx = TSqlParser.IFFContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 3228
                self.match(TSqlParser.IIF)
                self.state = 3229
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3230
                self.search_condition()
                self.state = 3231
                self.match(TSqlParser.COMMA)
                self.state = 3232
                self.expression(0)
                self.state = 3233
                self.match(TSqlParser.COMMA)
                self.state = 3234
                self.expression(0)
                self.state = 3235
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_data_type_methodsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_method(self):
            return self.getTypedRuleContext(TSqlParser.Value_methodContext,0)


        def query_method(self):
            return self.getTypedRuleContext(TSqlParser.Query_methodContext,0)


        def exist_method(self):
            return self.getTypedRuleContext(TSqlParser.Exist_methodContext,0)


        def modify_method(self):
            return self.getTypedRuleContext(TSqlParser.Modify_methodContext,0)


        def nodes_method(self):
            return self.getTypedRuleContext(TSqlParser.Nodes_methodContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_xml_data_type_methods

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_data_type_methods" ):
                listener.enterXml_data_type_methods(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_data_type_methods" ):
                listener.exitXml_data_type_methods(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_data_type_methods" ):
                return visitor.visitXml_data_type_methods(self)
            else:
                return visitor.visitChildren(self)




    def xml_data_type_methods(self):

        localctx = TSqlParser.Xml_data_type_methodsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_xml_data_type_methods)
        try:
            self.state = 3244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3239
                self.value_method()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3240
                self.query_method()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3241
                self.exist_method()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3242
                self.modify_method()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3243
                self.nodes_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token
            self.sqltype = None # Token

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)

        def EVENTDATA(self):
            return self.getToken(TSqlParser.EVENTDATA, 0)

        def query_method(self):
            return self.getTypedRuleContext(TSqlParser.Query_methodContext,0)


        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def PARAM_NODE(self):
            return self.getToken(TSqlParser.PARAM_NODE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_value_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_method" ):
                listener.enterValue_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_method" ):
                listener.exitValue_method(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_method" ):
                return visitor.visitValue_method(self)
            else:
                return visitor.visitChildren(self)




    def value_method(self):

        localctx = TSqlParser.Value_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_value_method)
        try:
            self.state = 3289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                if la_ == 1:
                    self.state = 3246
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 3247
                    self.match(TSqlParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 3248
                    self.match(TSqlParser.EVENTDATA)
                    pass

                elif la_ == 4:
                    self.state = 3249
                    self.query_method()
                    pass


                self.state = 3252
                self.match(TSqlParser.DOT)
                self.state = 3253
                self.match(TSqlParser.VALUE)
                self.state = 3254
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3255
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 3256
                self.match(TSqlParser.COMMA)
                self.state = 3257
                localctx.sqltype = self.match(TSqlParser.STRING)
                self.state = 3258
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
                if la_ == 1:
                    self.state = 3259
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 3260
                    self.match(TSqlParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 3261
                    self.match(TSqlParser.EVENTDATA)
                    pass

                elif la_ == 4:
                    self.state = 3262
                    self.query_method()
                    pass


                self.state = 3265
                self.match(TSqlParser.DOT)
                self.state = 3266
                self.match(TSqlParser.ROW)
                self.state = 3267
                self.match(TSqlParser.DOT)
                self.state = 3268
                self.match(TSqlParser.VALUE)
                self.state = 3269
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3270
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 3271
                self.match(TSqlParser.COMMA)
                self.state = 3272
                localctx.sqltype = self.match(TSqlParser.STRING)
                self.state = 3273
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                if la_ == 1:
                    self.state = 3274
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 3275
                    self.match(TSqlParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 3276
                    self.match(TSqlParser.EVENTDATA)
                    pass

                elif la_ == 4:
                    self.state = 3277
                    self.query_method()
                    pass


                self.state = 3280
                self.match(TSqlParser.DOT)
                self.state = 3281
                self.match(TSqlParser.PARAM_NODE)
                self.state = 3282
                self.match(TSqlParser.DOT)
                self.state = 3283
                self.match(TSqlParser.VALUE)
                self.state = 3284
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3285
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 3286
                self.match(TSqlParser.COMMA)
                self.state = 3287
                localctx.sqltype = self.match(TSqlParser.STRING)
                self.state = 3288
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def QUERY(self):
            return self.getToken(TSqlParser.QUERY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_query_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_method" ):
                listener.enterQuery_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_method" ):
                listener.exitQuery_method(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_method" ):
                return visitor.visitQuery_method(self)
            else:
                return visitor.visitChildren(self)




    def query_method(self):

        localctx = TSqlParser.Query_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_query_method)
        try:
            self.state = 3313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                if la_ == 1:
                    self.state = 3291
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 3292
                    self.match(TSqlParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 3293
                    self.full_table_name()
                    pass


                self.state = 3296
                self.match(TSqlParser.DOT)
                self.state = 3297
                self.match(TSqlParser.QUERY)
                self.state = 3298
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3299
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 3300
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
                if la_ == 1:
                    self.state = 3301
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 3302
                    self.match(TSqlParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 3303
                    self.full_table_name()
                    pass


                self.state = 3306
                self.match(TSqlParser.DOT)
                self.state = 3307
                self.match(TSqlParser.ROW)
                self.state = 3308
                self.match(TSqlParser.DOT)
                self.state = 3309
                self.match(TSqlParser.QUERY)
                self.state = 3310
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3311
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 3312
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exist_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def EXIST(self):
            return self.getToken(TSqlParser.EXIST, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_exist_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist_method" ):
                listener.enterExist_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist_method" ):
                listener.exitExist_method(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExist_method" ):
                return visitor.visitExist_method(self)
            else:
                return visitor.visitChildren(self)




    def exist_method(self):

        localctx = TSqlParser.Exist_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_exist_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3315
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3316
            self.match(TSqlParser.DOT)
            self.state = 3317
            self.match(TSqlParser.EXIST)
            self.state = 3318
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3319
            localctx.xquery = self.match(TSqlParser.STRING)
            self.state = 3320
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_dml = None # Token

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_modify_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_method" ):
                listener.enterModify_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_method" ):
                listener.exitModify_method(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModify_method" ):
                return visitor.visitModify_method(self)
            else:
                return visitor.visitChildren(self)




    def modify_method(self):

        localctx = TSqlParser.Modify_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_modify_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3322
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3323
            self.match(TSqlParser.DOT)
            self.state = 3324
            self.match(TSqlParser.MODIFY)
            self.state = 3325
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3326
            localctx.xml_dml = self.match(TSqlParser.STRING)
            self.state = 3327
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nodes_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def NODES(self):
            return self.getToken(TSqlParser.NODES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_nodes_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodes_method" ):
                listener.enterNodes_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodes_method" ):
                listener.exitNodes_method(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNodes_method" ):
                return visitor.visitNodes_method(self)
            else:
                return visitor.visitChildren(self)




    def nodes_method(self):

        localctx = TSqlParser.Nodes_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_nodes_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3329
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3330
            self.match(TSqlParser.DOT)
            self.state = 3331
            self.match(TSqlParser.NODES)
            self.state = 3332
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3333
            localctx.xquery = self.match(TSqlParser.STRING)
            self.state = 3334
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TSqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(TSqlParser.THEN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_section" ):
                return visitor.visitSwitch_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_section(self):

        localctx = TSqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            self.match(TSqlParser.WHEN)
            self.state = 3337
            self.expression(0)
            self.state = 3338
            self.match(TSqlParser.THEN)
            self.state = 3339
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_search_condition_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TSqlParser.WHEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def THEN(self):
            return self.getToken(TSqlParser.THEN, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_search_condition_section" ):
                return visitor.visitSwitch_search_condition_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_search_condition_section(self):

        localctx = TSqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3341
            self.match(TSqlParser.WHEN)
            self.state = 3342
            self.search_condition()
            self.state = 3343
            self.match(TSqlParser.THEN)
            self.state = 3344
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(TSqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_as_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_column_alias" ):
                listener.enterAs_column_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_column_alias" ):
                listener.exitAs_column_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_column_alias" ):
                return visitor.visitAs_column_alias(self)
            else:
                return visitor.visitChildren(self)




    def as_column_alias(self):

        localctx = TSqlParser.As_column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_as_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 3346
                self.match(TSqlParser.AS)


            self.state = 3349
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_alias(self):
            return self.getTypedRuleContext(TSqlParser.Table_aliasContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_as_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_table_alias" ):
                listener.enterAs_table_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_table_alias" ):
                listener.exitAs_table_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_table_alias" ):
                return visitor.visitAs_table_alias(self)
            else:
                return visitor.visitChildren(self)




    def as_table_alias(self):

        localctx = TSqlParser.As_table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_as_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 3351
                self.match(TSqlParser.AS)


            self.state = 3354
            self.table_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = TSqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3356
            self.identifier()
            self.state = 3358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.state = 3357
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_hintContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_hints" ):
                listener.enterWith_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_hints" ):
                listener.exitWith_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_table_hints" ):
                return visitor.visitWith_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def with_table_hints(self):

        localctx = TSqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 3360
                self.match(TSqlParser.WITH)


            self.state = 3363
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3364
            self.table_hint()
            self.state = 3371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.FORCESEEK or _la==TSqlParser.INDEX or _la==TSqlParser.NOEXPAND or ((((_la - 717)) & ~0x3f) == 0 and ((1 << (_la - 717)) & ((1 << (TSqlParser.SERIALIZABLE - 717)) | (1 << (TSqlParser.SNAPSHOT - 717)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 717)))) != 0) or _la==TSqlParser.IDENTIFIER or _la==TSqlParser.COMMA:
                self.state = 3366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3365
                    self.match(TSqlParser.COMMA)


                self.state = 3368
                self.table_hint()
                self.state = 3373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3374
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_with_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_hintContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_with_table_hints" ):
                listener.enterInsert_with_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_with_table_hints" ):
                listener.exitInsert_with_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_with_table_hints" ):
                return visitor.visitInsert_with_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def insert_with_table_hints(self):

        localctx = TSqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3376
            self.match(TSqlParser.WITH)
            self.state = 3377
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3378
            self.table_hint()
            self.state = 3385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.FORCESEEK or _la==TSqlParser.INDEX or _la==TSqlParser.NOEXPAND or ((((_la - 717)) & ~0x3f) == 0 and ((1 << (_la - 717)) & ((1 << (TSqlParser.SERIALIZABLE - 717)) | (1 << (TSqlParser.SNAPSHOT - 717)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 717)))) != 0) or _la==TSqlParser.IDENTIFIER or _la==TSqlParser.COMMA:
                self.state = 3380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3379
                    self.match(TSqlParser.COMMA)


                self.state = 3382
                self.table_hint()
                self.state = 3387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3388
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Index_valueContext,i)


        def FORCESEEK(self):
            return self.getToken(TSqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.IDENTIFIER)
            else:
                return self.getToken(TSqlParser.IDENTIFIER, i)

        def NOEXPAND(self):
            return self.getToken(TSqlParser.NOEXPAND, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_hint" ):
                return visitor.visitTable_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_hint(self):

        localctx = TSqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.NOEXPAND:
                self.state = 3390
                self.match(TSqlParser.NOEXPAND)


            self.state = 3441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                self.state = 3393
                self.match(TSqlParser.INDEX)
                self.state = 3413
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.LR_BRACKET]:
                    self.state = 3394
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 3395
                    self.index_value()
                    self.state = 3400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.COMMA:
                        self.state = 3396
                        self.match(TSqlParser.COMMA)
                        self.state = 3397
                        self.index_value()
                        self.state = 3402
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3403
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.IDENTIFIER]:
                    self.state = 3405
                    self.index_value()
                    self.state = 3410
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,487,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3406
                            self.match(TSqlParser.COMMA)
                            self.state = 3407
                            self.index_value() 
                        self.state = 3412
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,487,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 3415
                self.match(TSqlParser.INDEX)
                self.state = 3416
                self.match(TSqlParser.EQUAL)
                self.state = 3417
                self.index_value()
                pass

            elif la_ == 3:
                self.state = 3418
                self.match(TSqlParser.FORCESEEK)
                self.state = 3433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 3419
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 3420
                    self.index_value()
                    self.state = 3421
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 3422
                    self.match(TSqlParser.IDENTIFIER)
                    self.state = 3427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.COMMA:
                        self.state = 3423
                        self.match(TSqlParser.COMMA)
                        self.state = 3424
                        self.match(TSqlParser.IDENTIFIER)
                        self.state = 3429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3430
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 3431
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 4:
                self.state = 3435
                self.match(TSqlParser.SERIALIZABLE)
                pass

            elif la_ == 5:
                self.state = 3436
                self.match(TSqlParser.SNAPSHOT)
                pass

            elif la_ == 6:
                self.state = 3437
                self.match(TSqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 3438
                self.match(TSqlParser.EQUAL)
                self.state = 3439
                self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 7:
                self.state = 3440
                self.match(TSqlParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_index_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_value" ):
                listener.enterIndex_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_value" ):
                listener.exitIndex_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_value" ):
                return visitor.visitIndex_value(self)
            else:
                return visitor.visitChildren(self)




    def index_value(self):

        localctx = TSqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_index_value)
        try:
            self.state = 3445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3443
                self.identifier()
                pass
            elif token in [TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3444
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_alias_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_aliasContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list" ):
                listener.enterColumn_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list" ):
                listener.exitColumn_alias_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias_list" ):
                return visitor.visitColumn_alias_list(self)
            else:
                return visitor.visitChildren(self)




    def column_alias_list(self):

        localctx = TSqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3447
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3448
            self.column_alias()
            self.state = 3453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 3449
                self.match(TSqlParser.COMMA)
                self.state = 3450
                self.column_alias()
                self.state = 3455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3456
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = TSqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_column_alias)
        try:
            self.state = 3460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3458
                self.identifier()
                pass
            elif token in [TSqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3459
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_value_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Expression_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_value_constructor" ):
                listener.enterTable_value_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_value_constructor" ):
                listener.exitTable_value_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_value_constructor" ):
                return visitor.visitTable_value_constructor(self)
            else:
                return visitor.visitChildren(self)




    def table_value_constructor(self):

        localctx = TSqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_table_value_constructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3462
            self.match(TSqlParser.VALUES)
            self.state = 3463
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3464
            self.expression_list()
            self.state = 3465
            self.match(TSqlParser.RR_BRACKET)
            self.state = 3473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,495,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3466
                    self.match(TSqlParser.COMMA)
                    self.state = 3467
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 3468
                    self.expression_list()
                    self.state = 3469
                    self.match(TSqlParser.RR_BRACKET) 
                self.state = 3475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,495,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = TSqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3476
            self.expression(0)
            self.state = 3481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 3477
                self.match(TSqlParser.COMMA)
                self.state = 3478
                self.expression(0)
                self.state = 3483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ranking_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(TSqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(TSqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(TSqlParser.ROW_NUMBER, 0)

        def NTILE(self):
            return self.getToken(TSqlParser.NTILE, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRanking_windowed_function" ):
                return visitor.visitRanking_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def ranking_windowed_function(self):

        localctx = TSqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DENSE_RANK, TSqlParser.RANK, TSqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3484
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DENSE_RANK or _la==TSqlParser.RANK or _la==TSqlParser.ROW_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3485
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3486
                self.match(TSqlParser.RR_BRACKET)
                self.state = 3487
                self.over_clause()
                pass
            elif token in [TSqlParser.NTILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3488
                self.match(TSqlParser.NTILE)
                self.state = 3489
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3490
                self.expression(0)
                self.state = 3491
                self.match(TSqlParser.RR_BRACKET)
                self.state = 3492
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def all_distinct_expression(self):
            return self.getTypedRuleContext(TSqlParser.All_distinct_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(TSqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(TSqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(TSqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(TSqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(TSqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(TSqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(TSqlParser.VARP, 0)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(TSqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(TSqlParser.COUNT_BIG, 0)

        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(TSqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(TSqlParser.GROUPING, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def GROUPING_ID(self):
            return self.getToken(TSqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = TSqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.AVG, TSqlParser.MAX, TSqlParser.MIN, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.SUM, TSqlParser.VAR, TSqlParser.VARP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3496
                _la = self._input.LA(1)
                if not(_la==TSqlParser.AVG or _la==TSqlParser.MAX or _la==TSqlParser.MIN or ((((_la - 734)) & ~0x3f) == 0 and ((1 << (_la - 734)) & ((1 << (TSqlParser.STDEV - 734)) | (1 << (TSqlParser.STDEVP - 734)) | (1 << (TSqlParser.SUM - 734)) | (1 << (TSqlParser.VAR - 734)) | (1 << (TSqlParser.VARP - 734)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3497
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3498
                self.all_distinct_expression()
                self.state = 3499
                self.match(TSqlParser.RR_BRACKET)
                self.state = 3501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
                if la_ == 1:
                    self.state = 3500
                    self.over_clause()


                pass
            elif token in [TSqlParser.COUNT, TSqlParser.COUNT_BIG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3503
                _la = self._input.LA(1)
                if not(_la==TSqlParser.COUNT or _la==TSqlParser.COUNT_BIG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3504
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3507
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.STAR]:
                    self.state = 3505
                    self.match(TSqlParser.STAR)
                    pass
                elif token in [TSqlParser.ALL, TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.CASE, TSqlParser.COALESCE, TSqlParser.CONVERT, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.DEFAULT, TSqlParser.DISTINCT, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.IDENTITY, TSqlParser.IIF, TSqlParser.INIT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.NULL, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.OVER, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.RIGHT, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.IDENTIFIER, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.LR_BRACKET, TSqlParser.PLUS, TSqlParser.MINUS, TSqlParser.BIT_NOT]:
                    self.state = 3506
                    self.all_distinct_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3509
                self.match(TSqlParser.RR_BRACKET)
                self.state = 3511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
                if la_ == 1:
                    self.state = 3510
                    self.over_clause()


                pass
            elif token in [TSqlParser.CHECKSUM_AGG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3513
                self.match(TSqlParser.CHECKSUM_AGG)
                self.state = 3514
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3515
                self.all_distinct_expression()
                self.state = 3516
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.GROUPING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3518
                self.match(TSqlParser.GROUPING)
                self.state = 3519
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3520
                self.expression(0)
                self.state = 3521
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.GROUPING_ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3523
                self.match(TSqlParser.GROUPING_ID)
                self.state = 3524
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3525
                self.expression_list()
                self.state = 3526
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def FIRST_VALUE(self):
            return self.getToken(TSqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TSqlParser.LAST_VALUE, 0)

        def LAG(self):
            return self.getToken(TSqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TSqlParser.LEAD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_analytic_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_windowed_function" ):
                listener.enterAnalytic_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_windowed_function" ):
                listener.exitAnalytic_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalytic_windowed_function" ):
                return visitor.visitAnalytic_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def analytic_windowed_function(self):

        localctx = TSqlParser.Analytic_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_analytic_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FIRST_VALUE, TSqlParser.LAST_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3530
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FIRST_VALUE or _la==TSqlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3531
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3532
                self.expression(0)
                self.state = 3533
                self.match(TSqlParser.RR_BRACKET)
                self.state = 3534
                self.over_clause()
                pass
            elif token in [TSqlParser.LAG, TSqlParser.LEAD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3536
                _la = self._input.LA(1)
                if not(_la==TSqlParser.LAG or _la==TSqlParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3537
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3538
                self.expression(0)
                self.state = 3545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3539
                    self.match(TSqlParser.COMMA)
                    self.state = 3540
                    self.expression(0)
                    self.state = 3543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3541
                        self.match(TSqlParser.COMMA)
                        self.state = 3542
                        self.expression(0)




                self.state = 3547
                self.match(TSqlParser.RR_BRACKET)
                self.state = 3548
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_distinct_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_all_distinct_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct_expression" ):
                listener.enterAll_distinct_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct_expression" ):
                listener.exitAll_distinct_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAll_distinct_expression" ):
                return visitor.visitAll_distinct_expression(self)
            else:
                return visitor.visitChildren(self)




    def all_distinct_expression(self):

        localctx = TSqlParser.All_distinct_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_all_distinct_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ALL or _la==TSqlParser.DISTINCT:
                self.state = 3552
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3555
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TSqlParser.OVER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(TSqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = TSqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self.match(TSqlParser.OVER)
            self.state = 3558
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.PARTITION:
                self.state = 3559
                self.match(TSqlParser.PARTITION)
                self.state = 3560
                self.match(TSqlParser.BY)
                self.state = 3561
                self.expression_list()


            self.state = 3565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ORDER:
                self.state = 3564
                self.order_by_clause()


            self.state = 3568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.RANGE or _la==TSqlParser.ROWS:
                self.state = 3567
                self.row_or_range_clause()


            self.state = 3570
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_or_range_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_row_or_range_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_range_clause" ):
                listener.enterRow_or_range_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_range_clause" ):
                listener.exitRow_or_range_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_or_range_clause" ):
                return visitor.visitRow_or_range_clause(self)
            else:
                return visitor.visitChildren(self)




    def row_or_range_clause(self):

        localctx = TSqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3572
            _la = self._input.LA(1)
            if not(_la==TSqlParser.RANGE or _la==TSqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3573
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(TSqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_extent" ):
                return visitor.visitWindow_frame_extent(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_extent(self):

        localctx = TSqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_window_frame_extent)
        try:
            self.state = 3581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CURRENT, TSqlParser.UNBOUNDED, TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3575
                self.window_frame_preceding()
                pass
            elif token in [TSqlParser.BETWEEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3576
                self.match(TSqlParser.BETWEEN)
                self.state = 3577
                self.window_frame_bound()
                self.state = 3578
                self.match(TSqlParser.AND)
                self.state = 3579
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_bound" ):
                return visitor.visitWindow_frame_bound(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_bound(self):

        localctx = TSqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_window_frame_bound)
        try:
            self.state = 3585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3583
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3584
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_precedingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(TSqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_preceding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_preceding" ):
                listener.enterWindow_frame_preceding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_preceding" ):
                listener.exitWindow_frame_preceding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_preceding" ):
                return visitor.visitWindow_frame_preceding(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_preceding(self):

        localctx = TSqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_window_frame_preceding)
        try:
            self.state = 3593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3587
                self.match(TSqlParser.UNBOUNDED)
                self.state = 3588
                self.match(TSqlParser.PRECEDING)
                pass
            elif token in [TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3589
                self.match(TSqlParser.DECIMAL)
                self.state = 3590
                self.match(TSqlParser.PRECEDING)
                pass
            elif token in [TSqlParser.CURRENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3591
                self.match(TSqlParser.CURRENT)
                self.state = 3592
                self.match(TSqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_followingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(TSqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_following

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_following" ):
                listener.enterWindow_frame_following(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_following" ):
                listener.exitWindow_frame_following(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_following" ):
                return visitor.visitWindow_frame_following(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_following(self):

        localctx = TSqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_window_frame_following)
        try:
            self.state = 3599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3595
                self.match(TSqlParser.UNBOUNDED)
                self.state = 3596
                self.match(TSqlParser.FOLLOWING)
                pass
            elif token in [TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3597
                self.match(TSqlParser.DECIMAL)
                self.state = 3598
                self.match(TSqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # IdentifierContext
            self.database = None # IdentifierContext
            self.schema = None # IdentifierContext
            self.table = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_table_name" ):
                listener.enterFull_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_table_name" ):
                listener.exitFull_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_table_name" ):
                return visitor.visitFull_table_name(self)
            else:
                return visitor.visitChildren(self)




    def full_table_name(self):

        localctx = TSqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,514,self._ctx)
            if la_ == 1:
                self.state = 3601
                localctx.server = self.identifier()
                self.state = 3602
                self.match(TSqlParser.DOT)
                self.state = 3603
                localctx.database = self.identifier()
                self.state = 3604
                self.match(TSqlParser.DOT)
                self.state = 3605
                localctx.schema = self.identifier()
                self.state = 3606
                self.match(TSqlParser.DOT)

            elif la_ == 2:
                self.state = 3608
                localctx.database = self.identifier()
                self.state = 3609
                self.match(TSqlParser.DOT)
                self.state = 3611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                    self.state = 3610
                    localctx.schema = self.identifier()


                self.state = 3613
                self.match(TSqlParser.DOT)

            elif la_ == 3:
                self.state = 3615
                localctx.schema = self.identifier()
                self.state = 3616
                self.match(TSqlParser.DOT)


            self.state = 3620
            localctx.table = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # IdentifierContext
            self.schema = None # IdentifierContext
            self.table = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def BLOCKING_HIERARCHY(self):
            return self.getToken(TSqlParser.BLOCKING_HIERARCHY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = TSqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.state = 3648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
                if la_ == 1:
                    self.state = 3622
                    localctx.database = self.identifier()
                    self.state = 3623
                    self.match(TSqlParser.DOT)
                    self.state = 3625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                        self.state = 3624
                        localctx.schema = self.identifier()


                    self.state = 3627
                    self.match(TSqlParser.DOT)

                elif la_ == 2:
                    self.state = 3629
                    localctx.schema = self.identifier()
                    self.state = 3630
                    self.match(TSqlParser.DOT)


                self.state = 3634
                localctx.table = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                if la_ == 1:
                    self.state = 3635
                    localctx.database = self.identifier()
                    self.state = 3636
                    self.match(TSqlParser.DOT)
                    self.state = 3638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                        self.state = 3637
                        localctx.schema = self.identifier()


                    self.state = 3640
                    self.match(TSqlParser.DOT)

                elif la_ == 2:
                    self.state = 3642
                    localctx.schema = self.identifier()
                    self.state = 3643
                    self.match(TSqlParser.DOT)


                self.state = 3647
                self.match(TSqlParser.BLOCKING_HIERARCHY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_name_schemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # IdentifierContext
            self.procedure = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_proc_name_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name_schema" ):
                listener.enterFunc_proc_name_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name_schema" ):
                listener.exitFunc_proc_name_schema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_proc_name_schema" ):
                return visitor.visitFunc_proc_name_schema(self)
            else:
                return visitor.visitChildren(self)




    def func_proc_name_schema(self):

        localctx = TSqlParser.Func_proc_name_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_func_proc_name_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
            if la_ == 1:
                self.state = 3650
                localctx.schema = self.identifier()
                self.state = 3651
                self.match(TSqlParser.DOT)


            self.state = 3655
            localctx.procedure = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_name_database_schemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # IdentifierContext
            self.schema = None # IdentifierContext
            self.procedure = None # IdentifierContext

        def func_proc_name_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_schemaContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_proc_name_database_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name_database_schema" ):
                listener.enterFunc_proc_name_database_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name_database_schema" ):
                listener.exitFunc_proc_name_database_schema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_proc_name_database_schema" ):
                return visitor.visitFunc_proc_name_database_schema(self)
            else:
                return visitor.visitChildren(self)




    def func_proc_name_database_schema(self):

        localctx = TSqlParser.Func_proc_name_database_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_func_proc_name_database_schema)
        self._la = 0 # Token type
        try:
            self.state = 3668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3657
                self.func_proc_name_schema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                if la_ == 1:
                    self.state = 3658
                    localctx.database = self.identifier()
                    self.state = 3659
                    self.match(TSqlParser.DOT)
                    self.state = 3661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                        self.state = 3660
                        localctx.schema = self.identifier()


                    self.state = 3663
                    self.match(TSqlParser.DOT)


                self.state = 3667
                localctx.procedure = self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_name_server_database_schemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # IdentifierContext
            self.database = None # IdentifierContext
            self.schema = None # IdentifierContext
            self.procedure = None # IdentifierContext

        def func_proc_name_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_database_schemaContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_proc_name_server_database_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name_server_database_schema" ):
                listener.enterFunc_proc_name_server_database_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name_server_database_schema" ):
                listener.exitFunc_proc_name_server_database_schema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_proc_name_server_database_schema" ):
                return visitor.visitFunc_proc_name_server_database_schema(self)
            else:
                return visitor.visitChildren(self)




    def func_proc_name_server_database_schema(self):

        localctx = TSqlParser.Func_proc_name_server_database_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_func_proc_name_server_database_schema)
        self._la = 0 # Token type
        try:
            self.state = 3683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3670
                self.func_proc_name_database_schema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,525,self._ctx)
                if la_ == 1:
                    self.state = 3671
                    localctx.server = self.identifier()
                    self.state = 3672
                    self.match(TSqlParser.DOT)
                    self.state = 3673
                    localctx.database = self.identifier()
                    self.state = 3674
                    self.match(TSqlParser.DOT)
                    self.state = 3676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0):
                        self.state = 3675
                        localctx.schema = self.identifier()


                    self.state = 3678
                    self.match(TSqlParser.DOT)


                self.state = 3682
                localctx.procedure = self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_ddl_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_object" ):
                listener.enterDdl_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_object" ):
                listener.exitDdl_object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_object" ):
                return visitor.visitDdl_object(self)
            else:
                return visitor.visitChildren(self)




    def ddl_object(self):

        localctx = TSqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_ddl_object)
        try:
            self.state = 3687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3685
                self.full_table_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3686
                self.match(TSqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_name = None # IdentifierContext

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0)

        def STATUS(self):
            return self.getToken(TSqlParser.STATUS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def ARITHABORT(self):
            return self.getToken(TSqlParser.ARITHABORT, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_column_name" ):
                return visitor.visitFull_column_name(self)
            else:
                return visitor.visitChildren(self)




    def full_column_name(self):

        localctx = TSqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_full_column_name)
        try:
            self.state = 3737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
                if la_ == 1:
                    self.state = 3689
                    self.table_name()
                    self.state = 3690
                    self.match(TSqlParser.DOT)


                self.state = 3694
                localctx.column_name = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
                if la_ == 1:
                    self.state = 3695
                    self.table_name()
                    self.state = 3696
                    self.match(TSqlParser.DOT)


                self.state = 3700
                self.match(TSqlParser.COMPATIBILITY_LEVEL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,530,self._ctx)
                if la_ == 1:
                    self.state = 3701
                    self.table_name()
                    self.state = 3702
                    self.match(TSqlParser.DOT)


                self.state = 3706
                self.match(TSqlParser.STATUS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                if la_ == 1:
                    self.state = 3707
                    self.table_name()
                    self.state = 3708
                    self.match(TSqlParser.DOT)


                self.state = 3712
                self.match(TSqlParser.QUOTED_IDENTIFIER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
                if la_ == 1:
                    self.state = 3713
                    self.table_name()
                    self.state = 3714
                    self.match(TSqlParser.DOT)


                self.state = 3718
                self.match(TSqlParser.ARITHABORT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
                if la_ == 1:
                    self.state = 3719
                    self.table_name()
                    self.state = 3720
                    self.match(TSqlParser.DOT)


                self.state = 3724
                self.match(TSqlParser.ANSI_WARNINGS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
                if la_ == 1:
                    self.state = 3725
                    self.table_name()
                    self.state = 3726
                    self.match(TSqlParser.DOT)


                self.state = 3730
                self.match(TSqlParser.ANSI_PADDING)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3734
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                if la_ == 1:
                    self.state = 3731
                    self.table_name()
                    self.state = 3732
                    self.match(TSqlParser.DOT)


                self.state = 3736
                self.match(TSqlParser.ANSI_NULLS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_list_with_orderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASC)
            else:
                return self.getToken(TSqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESC)
            else:
                return self.getToken(TSqlParser.DESC, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_name_list_with_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list_with_order" ):
                listener.enterColumn_name_list_with_order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list_with_order" ):
                listener.exitColumn_name_list_with_order(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list_with_order" ):
                return visitor.visitColumn_name_list_with_order(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list_with_order(self):

        localctx = TSqlParser.Column_name_list_with_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_column_name_list_with_order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3739
            self.identifier()
            self.state = 3741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ASC or _la==TSqlParser.DESC:
                self.state = 3740
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ASC or _la==TSqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 3743
                self.match(TSqlParser.COMMA)
                self.state = 3744
                self.identifier()
                self.state = 3746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ASC or _la==TSqlParser.DESC:
                    self.state = 3745
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ASC or _la==TSqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = TSqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3753
            self.identifier()
            self.state = 3758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 3754
                self.match(TSqlParser.COMMA)
                self.state = 3755
                self.identifier()
                self.state = 3760
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = TSqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_cursor_name)
        try:
            self.state = 3763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3761
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3762
                self.match(TSqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_offContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_off

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_off" ):
                listener.enterOn_off(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_off" ):
                listener.exitOn_off(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_off" ):
                return visitor.visitOn_off(self)
            else:
                return visitor.visitChildren(self)




    def on_off(self):

        localctx = TSqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            _la = self._input.LA(1)
            if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusteredContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(TSqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(TSqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_clustered

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustered" ):
                listener.enterClustered(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustered" ):
                listener.exitClustered(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClustered" ):
                return visitor.visitClustered(self)
            else:
                return visitor.visitChildren(self)




    def clustered(self):

        localctx = TSqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3767
            _la = self._input.LA(1)
            if not(_la==TSqlParser.CLUSTERED or _la==TSqlParser.NONCLUSTERED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_notnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_null_notnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_notnull" ):
                listener.enterNull_notnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_notnull" ):
                listener.exitNull_notnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_notnull" ):
                return visitor.visitNull_notnull(self)
            else:
                return visitor.visitChildren(self)




    def null_notnull(self):

        localctx = TSqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.NOT:
                self.state = 3769
                self.match(TSqlParser.NOT)


            self.state = 3772
            self.match(TSqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_or_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(TSqlParser.Constant_expressionContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_null_or_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_or_default" ):
                listener.enterNull_or_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_or_default" ):
                listener.exitNull_or_default(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_or_default" ):
                return visitor.visitNull_or_default(self)
            else:
                return visitor.visitChildren(self)




    def null_or_default(self):

        localctx = TSqlParser.Null_or_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_null_or_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.NOT, TSqlParser.NULL]:
                self.state = 3774
                self.null_notnull()
                pass
            elif token in [TSqlParser.DEFAULT]:
                self.state = 3775
                self.match(TSqlParser.DEFAULT)
                self.state = 3776
                self.constant_expression()
                self.state = 3779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.WITH:
                    self.state = 3777
                    self.match(TSqlParser.WITH)
                    self.state = 3778
                    self.match(TSqlParser.VALUES)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name_server_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_server_database_schemaContext,0)


        def RIGHT(self):
            return self.getToken(TSqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(TSqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_scalar_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_function_name" ):
                listener.enterScalar_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_function_name" ):
                listener.exitScalar_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalar_function_name" ):
                return visitor.visitScalar_function_name(self)
            else:
                return visitor.visitChildren(self)




    def scalar_function_name(self):

        localctx = TSqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_scalar_function_name)
        try:
            self.state = 3788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3783
                self.func_proc_name_server_database_schema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3784
                self.match(TSqlParser.RIGHT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3785
                self.match(TSqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3786
                self.match(TSqlParser.BINARY_CHECKSUM)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3787
                self.match(TSqlParser.CHECKSUM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_conversation_timerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def TIMER(self):
            return self.getToken(TSqlParser.TIMER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_begin_conversation_timer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_conversation_timer" ):
                listener.enterBegin_conversation_timer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_conversation_timer" ):
                listener.exitBegin_conversation_timer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_conversation_timer" ):
                return visitor.visitBegin_conversation_timer(self)
            else:
                return visitor.visitChildren(self)




    def begin_conversation_timer(self):

        localctx = TSqlParser.Begin_conversation_timerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_begin_conversation_timer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3790
            self.match(TSqlParser.BEGIN)
            self.state = 3791
            self.match(TSqlParser.CONVERSATION)
            self.state = 3792
            self.match(TSqlParser.TIMER)
            self.state = 3793
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3794
            self.match(TSqlParser.LOCAL_ID)
            self.state = 3795
            self.match(TSqlParser.RR_BRACKET)
            self.state = 3796
            self.match(TSqlParser.TIMEOUT)
            self.state = 3797
            self.match(TSqlParser.EQUAL)
            self.state = 3798
            self.time()
            self.state = 3800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
            if la_ == 1:
                self.state = 3799
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_conversation_dialogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dialog_handle = None # Token
            self.initiator_service_name = None # Service_nameContext
            self.target_service_name = None # Service_nameContext
            self.service_broker_guid = None # Token

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def SERVICE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVICE)
            else:
                return self.getToken(TSqlParser.SERVICE, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def contract_name(self):
            return self.getTypedRuleContext(TSqlParser.Contract_nameContext,0)


        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def service_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Service_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Service_nameContext,i)


        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def LIFETIME(self):
            return self.getToken(TSqlParser.LIFETIME, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def RELATED_CONVERSATION(self):
            return self.getToken(TSqlParser.RELATED_CONVERSATION, 0)

        def RELATED_CONVERSATION_GROUP(self):
            return self.getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_begin_conversation_dialog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_conversation_dialog" ):
                listener.enterBegin_conversation_dialog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_conversation_dialog" ):
                listener.exitBegin_conversation_dialog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_conversation_dialog" ):
                return visitor.visitBegin_conversation_dialog(self)
            else:
                return visitor.visitChildren(self)




    def begin_conversation_dialog(self):

        localctx = TSqlParser.Begin_conversation_dialogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_begin_conversation_dialog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3802
            self.match(TSqlParser.BEGIN)
            self.state = 3803
            self.match(TSqlParser.DIALOG)
            self.state = 3805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONVERSATION:
                self.state = 3804
                self.match(TSqlParser.CONVERSATION)


            self.state = 3807
            localctx.dialog_handle = self.match(TSqlParser.LOCAL_ID)
            self.state = 3808
            self.match(TSqlParser.FROM)
            self.state = 3809
            self.match(TSqlParser.SERVICE)
            self.state = 3810
            localctx.initiator_service_name = self.service_name()
            self.state = 3811
            self.match(TSqlParser.TO)
            self.state = 3812
            self.match(TSqlParser.SERVICE)
            self.state = 3813
            localctx.target_service_name = self.service_name()
            self.state = 3816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 3814
                self.match(TSqlParser.COMMA)
                self.state = 3815
                localctx.service_broker_guid = self.match(TSqlParser.STRING)


            self.state = 3818
            self.match(TSqlParser.ON)
            self.state = 3819
            self.match(TSqlParser.CONTRACT)
            self.state = 3820
            self.contract_name()
            self.state = 3843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
            if la_ == 1:
                self.state = 3821
                self.match(TSqlParser.WITH)
                self.state = 3828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.RELATED_CONVERSATION or _la==TSqlParser.RELATED_CONVERSATION_GROUP:
                    self.state = 3822
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.RELATED_CONVERSATION or _la==TSqlParser.RELATED_CONVERSATION_GROUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3823
                    self.match(TSqlParser.EQUAL)
                    self.state = 3824
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 3826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3825
                        self.match(TSqlParser.COMMA)




                self.state = 3836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LIFETIME:
                    self.state = 3830
                    self.match(TSqlParser.LIFETIME)
                    self.state = 3831
                    self.match(TSqlParser.EQUAL)
                    self.state = 3832
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.DECIMAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3833
                        self.match(TSqlParser.COMMA)




                self.state = 3841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
                if la_ == 1:
                    self.state = 3838
                    self.match(TSqlParser.ENCRYPTION)
                    self.state = 3839
                    self.match(TSqlParser.EQUAL)
                    self.state = 3840
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 3846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,555,self._ctx)
            if la_ == 1:
                self.state = 3845
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Contract_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_contract_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContract_name" ):
                listener.enterContract_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContract_name" ):
                listener.exitContract_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContract_name" ):
                return visitor.visitContract_name(self)
            else:
                return visitor.visitChildren(self)




    def contract_name(self):

        localctx = TSqlParser.Contract_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_contract_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
            if la_ == 1:
                self.state = 3848
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3849
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Service_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_service_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_name" ):
                listener.enterService_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_name" ):
                listener.exitService_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitService_name" ):
                return visitor.visitService_name(self)
            else:
                return visitor.visitChildren(self)




    def service_name(self):

        localctx = TSqlParser.Service_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_service_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
            if la_ == 1:
                self.state = 3852
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3853
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_conversationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_handle = None # Token
            self.faliure_code = None # Token
            self.failure_text = None # Token

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TSqlParser.ERROR, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DESCRIPTION(self):
            return self.getToken(TSqlParser.DESCRIPTION, 0)

        def CLEANUP(self):
            return self.getToken(TSqlParser.CLEANUP, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_end_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_conversation" ):
                listener.enterEnd_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_conversation" ):
                listener.exitEnd_conversation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnd_conversation" ):
                return visitor.visitEnd_conversation(self)
            else:
                return visitor.visitChildren(self)




    def end_conversation(self):

        localctx = TSqlParser.End_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_end_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3856
            self.match(TSqlParser.END)
            self.state = 3857
            self.match(TSqlParser.CONVERSATION)
            self.state = 3858
            localctx.conversation_handle = self.match(TSqlParser.LOCAL_ID)
            self.state = 3860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
            if la_ == 1:
                self.state = 3859
                self.match(TSqlParser.SEMI)


            self.state = 3874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.state = 3862
                self.match(TSqlParser.WITH)
                self.state = 3869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ERROR:
                    self.state = 3863
                    self.match(TSqlParser.ERROR)
                    self.state = 3864
                    self.match(TSqlParser.EQUAL)
                    self.state = 3865
                    localctx.faliure_code = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                        localctx.faliure_code = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3866
                    self.match(TSqlParser.DESCRIPTION)
                    self.state = 3867
                    self.match(TSqlParser.EQUAL)
                    self.state = 3868
                    localctx.failure_text = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                        localctx.failure_text = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
                if la_ == 1:
                    self.state = 3871
                    self.match(TSqlParser.CLEANUP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waitfor_conversationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timeout = None # TimeContext

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def get_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Get_conversationContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WAITFOR(self):
            return self.getToken(TSqlParser.WAITFOR, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_waitfor_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_conversation" ):
                listener.enterWaitfor_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_conversation" ):
                listener.exitWaitfor_conversation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitfor_conversation" ):
                return visitor.visitWaitfor_conversation(self)
            else:
                return visitor.visitChildren(self)




    def waitfor_conversation(self):

        localctx = TSqlParser.Waitfor_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_waitfor_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WAITFOR:
                self.state = 3876
                self.match(TSqlParser.WAITFOR)


            self.state = 3879
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3880
            self.get_conversation()
            self.state = 3881
            self.match(TSqlParser.RR_BRACKET)
            self.state = 3887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.state = 3883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3882
                    self.match(TSqlParser.COMMA)


                self.state = 3885
                self.match(TSqlParser.TIMEOUT)
                self.state = 3886
                localctx.timeout = self.time()


            self.state = 3890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
            if la_ == 1:
                self.state = 3889
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_conversationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_group_id = None # Token
            self.queue = None # Queue_idContext

        def GET(self):
            return self.getToken(TSqlParser.GET, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def queue_id(self):
            return self.getTypedRuleContext(TSqlParser.Queue_idContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_get_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_conversation" ):
                listener.enterGet_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_conversation" ):
                listener.exitGet_conversation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet_conversation" ):
                return visitor.visitGet_conversation(self)
            else:
                return visitor.visitChildren(self)




    def get_conversation(self):

        localctx = TSqlParser.Get_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_get_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3892
            self.match(TSqlParser.GET)
            self.state = 3893
            self.match(TSqlParser.CONVERSATION)
            self.state = 3894
            self.match(TSqlParser.GROUP)
            self.state = 3895
            localctx.conversation_group_id = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                localctx.conversation_group_id = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3896
            self.match(TSqlParser.FROM)
            self.state = 3897
            localctx.queue = self.queue_id()
            self.state = 3899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,566,self._ctx)
            if la_ == 1:
                self.state = 3898
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # IdentifierContext
            self.schema_name = None # IdentifierContext
            self.name = None # IdentifierContext

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_queue_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_id" ):
                listener.enterQueue_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_id" ):
                listener.exitQueue_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueue_id" ):
                return visitor.visitQueue_id(self)
            else:
                return visitor.visitChildren(self)




    def queue_id(self):

        localctx = TSqlParser.Queue_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_queue_id)
        try:
            self.state = 3908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,567,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3901
                localctx.database_name = self.identifier()
                self.state = 3902
                self.match(TSqlParser.DOT)
                self.state = 3903
                localctx.schema_name = self.identifier()
                self.state = 3904
                self.match(TSqlParser.DOT)
                self.state = 3905
                localctx.name = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3907
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Send_conversationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_handle = None # Token
            self.message_type_name = None # ExpressionContext
            self.message_body_expression = None # Token

        def SEND(self):
            return self.getToken(TSqlParser.SEND, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_send_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSend_conversation" ):
                listener.enterSend_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSend_conversation" ):
                listener.exitSend_conversation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSend_conversation" ):
                return visitor.visitSend_conversation(self)
            else:
                return visitor.visitChildren(self)




    def send_conversation(self):

        localctx = TSqlParser.Send_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_send_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3910
            self.match(TSqlParser.SEND)
            self.state = 3911
            self.match(TSqlParser.ON)
            self.state = 3912
            self.match(TSqlParser.CONVERSATION)
            self.state = 3913
            localctx.conversation_handle = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                localctx.conversation_handle = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3914
            self.match(TSqlParser.MESSAGE)
            self.state = 3915
            self.match(TSqlParser.TYPE)
            self.state = 3916
            localctx.message_type_name = self.expression(0)
            self.state = 3920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
            if la_ == 1:
                self.state = 3917
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3918
                localctx.message_body_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                    localctx.message_body_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3919
                self.match(TSqlParser.RR_BRACKET)


            self.state = 3923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,569,self._ctx)
            if la_ == 1:
                self.state = 3922
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(TSqlParser.IdentifierContext,0)


        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def DOUBLE(self):
            return self.getToken(TSqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TSqlParser.PRECISION, 0)

        def INT(self):
            return self.getToken(TSqlParser.INT, 0)

        def TINYINT(self):
            return self.getToken(TSqlParser.TINYINT, 0)

        def SMALLINT(self):
            return self.getToken(TSqlParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(TSqlParser.BIGINT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = TSqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 3946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3925
                self.identifier()
                self.state = 3927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
                if la_ == 1:
                    self.state = 3926
                    self.match(TSqlParser.IDENTITY)


                self.state = 3936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
                if la_ == 1:
                    self.state = 3929
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 3930
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.MAX or _la==TSqlParser.DECIMAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3931
                        self.match(TSqlParser.COMMA)
                        self.state = 3932
                        self.match(TSqlParser.DECIMAL)


                    self.state = 3935
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3938
                self.match(TSqlParser.DOUBLE)
                self.state = 3940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PRECISION:
                    self.state = 3939
                    self.match(TSqlParser.PRECISION)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3942
                self.match(TSqlParser.INT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3943
                self.match(TSqlParser.TINYINT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3944
                self.match(TSqlParser.SMALLINT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3945
                self.match(TSqlParser.BIGINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(TSqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(TSqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(TSqlParser.FLOAT, 0)

        def DOLLAR(self):
            return self.getToken(TSqlParser.DOLLAR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = TSqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 3963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3948
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3949
                self.match(TSqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PLUS or _la==TSqlParser.MINUS:
                    self.state = 3950
                    self.sign()


                self.state = 3953
                self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PLUS or _la==TSqlParser.MINUS:
                    self.state = 3954
                    self.sign()


                self.state = 3957
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FLOAT or _la==TSqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PLUS or _la==TSqlParser.MINUS:
                    self.state = 3958
                    self.sign()


                self.state = 3961
                localctx.dollar = self.match(TSqlParser.DOLLAR)
                self.state = 3962
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.FLOAT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSign" ):
                return visitor.visitSign(self)
            else:
                return visitor.visitChildren(self)




    def sign(self):

        localctx = TSqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3965
            _la = self._input.LA(1)
            if not(_la==TSqlParser.PLUS or _la==TSqlParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(TSqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(TSqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = TSqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_identifier)
        try:
            self.state = 3970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.K_R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.LOCAL_ID, TSqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3967
                self.simple_id()
                pass
            elif token in [TSqlParser.DOUBLE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3968
                self.match(TSqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [TSqlParser.SQUARE_BRACKET_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3969
                self.match(TSqlParser.SQUARE_BRACKET_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(TSqlParser.IDENTIFIER, 0)

        def ABSOLUTE(self):
            return self.getToken(TSqlParser.ABSOLUTE, 0)

        def ACCENT_SENSITIVITY(self):
            return self.getToken(TSqlParser.ACCENT_SENSITIVITY, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def ACTIVATION(self):
            return self.getToken(TSqlParser.ACTIVATION, 0)

        def ACTIVE(self):
            return self.getToken(TSqlParser.ACTIVE, 0)

        def ADDRESS(self):
            return self.getToken(TSqlParser.ADDRESS, 0)

        def AES_128(self):
            return self.getToken(TSqlParser.AES_128, 0)

        def AES_192(self):
            return self.getToken(TSqlParser.AES_192, 0)

        def AES_256(self):
            return self.getToken(TSqlParser.AES_256, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(TSqlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self):
            return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0)

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def ALLOWED(self):
            return self.getToken(TSqlParser.ALLOWED, 0)

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(TSqlParser.ANSI_NULL_DEFAULT, 0)

        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def APPLICATION_LOG(self):
            return self.getToken(TSqlParser.APPLICATION_LOG, 0)

        def APPLY(self):
            return self.getToken(TSqlParser.APPLY, 0)

        def ARITHABORT(self):
            return self.getToken(TSqlParser.ARITHABORT, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def AUDIT_GUID(self):
            return self.getToken(TSqlParser.AUDIT_GUID, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def AUTO_CLEANUP(self):
            return self.getToken(TSqlParser.AUTO_CLEANUP, 0)

        def AUTO_CLOSE(self):
            return self.getToken(TSqlParser.AUTO_CLOSE, 0)

        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0)

        def AUTO_SHRINK(self):
            return self.getToken(TSqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def AVG(self):
            return self.getToken(TSqlParser.AVG, 0)

        def BACKUP_PRIORITY(self):
            return self.getToken(TSqlParser.BACKUP_PRIORITY, 0)

        def BEGIN_DIALOG(self):
            return self.getToken(TSqlParser.BEGIN_DIALOG, 0)

        def BIGINT(self):
            return self.getToken(TSqlParser.BIGINT, 0)

        def BINARY_BASE64(self):
            return self.getToken(TSqlParser.BINARY_BASE64, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def BLOB_STORAGE(self):
            return self.getToken(TSqlParser.BLOB_STORAGE, 0)

        def BROKER(self):
            return self.getToken(TSqlParser.BROKER, 0)

        def BROKER_INSTANCE(self):
            return self.getToken(TSqlParser.BROKER_INSTANCE, 0)

        def BULK_LOGGED(self):
            return self.getToken(TSqlParser.BULK_LOGGED, 0)

        def CALLED(self):
            return self.getToken(TSqlParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(TSqlParser.CALLER, 0)

        def CAP_CPU_PERCENT(self):
            return self.getToken(TSqlParser.CAP_CPU_PERCENT, 0)

        def CAST(self):
            return self.getToken(TSqlParser.CAST, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def CATCH(self):
            return self.getToken(TSqlParser.CATCH, 0)

        def CHANGE_RETENTION(self):
            return self.getToken(TSqlParser.CHANGE_RETENTION, 0)

        def CHANGE_TRACKING(self):
            return self.getToken(TSqlParser.CHANGE_TRACKING, 0)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(TSqlParser.CHECKSUM_AGG, 0)

        def CLEANUP(self):
            return self.getToken(TSqlParser.CLEANUP, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def COLUMN_MASTER_KEY(self):
            return self.getToken(TSqlParser.COLUMN_MASTER_KEY, 0)

        def COMMITTED(self):
            return self.getToken(TSqlParser.COMMITTED, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0)

        def CONCAT(self):
            return self.getToken(TSqlParser.CONCAT, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def CONTROL(self):
            return self.getToken(TSqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(TSqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(TSqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(TSqlParser.COUNT_BIG, 0)

        def COUNTER(self):
            return self.getToken(TSqlParser.COUNTER, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def CURSOR_DEFAULT(self):
            return self.getToken(TSqlParser.CURSOR_DEFAULT, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def DATEADD(self):
            return self.getToken(TSqlParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(TSqlParser.DATEDIFF, 0)

        def DATENAME(self):
            return self.getToken(TSqlParser.DATENAME, 0)

        def DATEPART(self):
            return self.getToken(TSqlParser.DATEPART, 0)

        def DAYS(self):
            return self.getToken(TSqlParser.DAYS, 0)

        def DB_CHAINING(self):
            return self.getToken(TSqlParser.DB_CHAINING, 0)

        def DB_FAILOVER(self):
            return self.getToken(TSqlParser.DB_FAILOVER, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def DEFAULT_DOUBLE_QUOTE(self):
            return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def DELAY(self):
            return self.getToken(TSqlParser.DELAY, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(TSqlParser.DELAYED_DURABILITY, 0)

        def DELETED(self):
            return self.getToken(TSqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(TSqlParser.DENSE_RANK, 0)

        def DEPENDENTS(self):
            return self.getToken(TSqlParser.DEPENDENTS, 0)

        def DES(self):
            return self.getToken(TSqlParser.DES, 0)

        def DESCRIPTION(self):
            return self.getToken(TSqlParser.DESCRIPTION, 0)

        def DESX(self):
            return self.getToken(TSqlParser.DESX, 0)

        def DHCP(self):
            return self.getToken(TSqlParser.DHCP, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(TSqlParser.DIRECTORY_NAME, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def DISABLE_BROKER(self):
            return self.getToken(TSqlParser.DISABLE_BROKER, 0)

        def DISABLED(self):
            return self.getToken(TSqlParser.DISABLED, 0)

        def DISK_DRIVE(self):
            return self.getToken(TSqlParser.DISK_DRIVE, 0)

        def DOCUMENT(self):
            return self.getToken(TSqlParser.DOCUMENT, 0)

        def DYNAMIC(self):
            return self.getToken(TSqlParser.DYNAMIC, 0)

        def EMERGENCY(self):
            return self.getToken(TSqlParser.EMERGENCY, 0)

        def EMPTY(self):
            return self.getToken(TSqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def ENABLE_BROKER(self):
            return self.getToken(TSqlParser.ENABLE_BROKER, 0)

        def ENCRYPTED_VALUE(self):
            return self.getToken(TSqlParser.ENCRYPTED_VALUE, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def ENDPOINT_URL(self):
            return self.getToken(TSqlParser.ENDPOINT_URL, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def EVENTDATA(self):
            return self.getToken(TSqlParser.EVENTDATA, 0)

        def EXCLUSIVE(self):
            return self.getToken(TSqlParser.EXCLUSIVE, 0)

        def EXECUTABLE(self):
            return self.getToken(TSqlParser.EXECUTABLE, 0)

        def EXIST(self):
            return self.getToken(TSqlParser.EXIST, 0)

        def EXPAND(self):
            return self.getToken(TSqlParser.EXPAND, 0)

        def EXPIRY_DATE(self):
            return self.getToken(TSqlParser.EXPIRY_DATE, 0)

        def EXPLICIT(self):
            return self.getToken(TSqlParser.EXPLICIT, 0)

        def FAIL_OPERATION(self):
            return self.getToken(TSqlParser.FAIL_OPERATION, 0)

        def FAILOVER_MODE(self):
            return self.getToken(TSqlParser.FAILOVER_MODE, 0)

        def FAILURE(self):
            return self.getToken(TSqlParser.FAILURE, 0)

        def FAILURE_CONDITION_LEVEL(self):
            return self.getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0)

        def FAST(self):
            return self.getToken(TSqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(TSqlParser.FAST_FORWARD, 0)

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def FILEGROWTH(self):
            return self.getToken(TSqlParser.FILEGROWTH, 0)

        def FILENAME(self):
            return self.getToken(TSqlParser.FILENAME, 0)

        def FILEPATH(self):
            return self.getToken(TSqlParser.FILEPATH, 0)

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def FILLFACTOR(self):
            return self.getToken(TSqlParser.FILLFACTOR, 0)

        def FILTER(self):
            return self.getToken(TSqlParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(TSqlParser.FIRST_VALUE, 0)

        def FOLLOWING(self):
            return self.getToken(TSqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def FORCE_FAILOVER_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def FORCESEEK(self):
            return self.getToken(TSqlParser.FORCESEEK, 0)

        def FORMAT(self):
            return self.getToken(TSqlParser.FORMAT, 0)

        def FORWARD_ONLY(self):
            return self.getToken(TSqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(TSqlParser.FULLSCAN, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def GB(self):
            return self.getToken(TSqlParser.GB, 0)

        def GETDATE(self):
            return self.getToken(TSqlParser.GETDATE, 0)

        def GETUTCDATE(self):
            return self.getToken(TSqlParser.GETUTCDATE, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def GO(self):
            return self.getToken(TSqlParser.GO, 0)

        def GROUP_MAX_REQUESTS(self):
            return self.getToken(TSqlParser.GROUP_MAX_REQUESTS, 0)

        def GROUPING(self):
            return self.getToken(TSqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(TSqlParser.GROUPING_ID, 0)

        def HADR(self):
            return self.getToken(TSqlParser.HADR, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def HEALTH_CHECK_TIMEOUT(self):
            return self.getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0)

        def HIGH(self):
            return self.getToken(TSqlParser.HIGH, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0)

        def HOURS(self):
            return self.getToken(TSqlParser.HOURS, 0)

        def IDENTITY_VALUE(self):
            return self.getToken(TSqlParser.IDENTITY_VALUE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def IMMEDIATE(self):
            return self.getToken(TSqlParser.IMMEDIATE, 0)

        def IMPERSONATE(self):
            return self.getToken(TSqlParser.IMPERSONATE, 0)

        def IMPORTANCE(self):
            return self.getToken(TSqlParser.IMPORTANCE, 0)

        def INCREMENTAL(self):
            return self.getToken(TSqlParser.INCREMENTAL, 0)

        def INIT(self):
            return self.getToken(TSqlParser.INIT, 0)

        def INITIATOR(self):
            return self.getToken(TSqlParser.INITIATOR, 0)

        def INPUT(self):
            return self.getToken(TSqlParser.INPUT, 0)

        def INSENSITIVE(self):
            return self.getToken(TSqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(TSqlParser.INSERTED, 0)

        def INT(self):
            return self.getToken(TSqlParser.INT, 0)

        def IP(self):
            return self.getToken(TSqlParser.IP, 0)

        def ISOLATION(self):
            return self.getToken(TSqlParser.ISOLATION, 0)

        def KB(self):
            return self.getToken(TSqlParser.KB, 0)

        def KEEP(self):
            return self.getToken(TSqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(TSqlParser.KEEPFIXED, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def KEY_SOURCE(self):
            return self.getToken(TSqlParser.KEY_SOURCE, 0)

        def KEYS(self):
            return self.getToken(TSqlParser.KEYS, 0)

        def KEYSET(self):
            return self.getToken(TSqlParser.KEYSET, 0)

        def LAG(self):
            return self.getToken(TSqlParser.LAG, 0)

        def LAST(self):
            return self.getToken(TSqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(TSqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(TSqlParser.LEAD, 0)

        def LEVEL(self):
            return self.getToken(TSqlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def LISTENER(self):
            return self.getToken(TSqlParser.LISTENER, 0)

        def LISTENER_URL(self):
            return self.getToken(TSqlParser.LISTENER_URL, 0)

        def LOB_COMPACTION(self):
            return self.getToken(TSqlParser.LOB_COMPACTION, 0)

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def LOCATION(self):
            return self.getToken(TSqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(TSqlParser.LOCK, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(TSqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def LOW(self):
            return self.getToken(TSqlParser.LOW, 0)

        def MANUAL(self):
            return self.getToken(TSqlParser.MANUAL, 0)

        def MARK(self):
            return self.getToken(TSqlParser.MARK, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def MATERIALIZED(self):
            return self.getToken(TSqlParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def MAX_DOP(self):
            return self.getToken(TSqlParser.MAX_DOP, 0)

        def MAX_FILES(self):
            return self.getToken(TSqlParser.MAX_FILES, 0)

        def MAX_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0)

        def MAX_MEMORY(self):
            return self.getToken(TSqlParser.MAX_MEMORY, 0)

        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MAX_PROCESSES(self):
            return self.getToken(TSqlParser.MAX_PROCESSES, 0)

        def MAX_QUEUE_READERS(self):
            return self.getToken(TSqlParser.MAX_QUEUE_READERS, 0)

        def MAX_ROLLOVER_FILES(self):
            return self.getToken(TSqlParser.MAX_ROLLOVER_FILES, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(TSqlParser.MAXRECURSION, 0)

        def MAXSIZE(self):
            return self.getToken(TSqlParser.MAXSIZE, 0)

        def MB(self):
            return self.getToken(TSqlParser.MB, 0)

        def MEDIUM(self):
            return self.getToken(TSqlParser.MEDIUM, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def MIN(self):
            return self.getToken(TSqlParser.MIN, 0)

        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0)

        def MIN_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MIN_CPU_PERCENT, 0)

        def MIN_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0)

        def MIN_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MIN_MEMORY_PERCENT, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def MIRROR_ADDRESS(self):
            return self.getToken(TSqlParser.MIRROR_ADDRESS, 0)

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0)

        def MODE(self):
            return self.getToken(TSqlParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(TSqlParser.MOVE, 0)

        def MULTI_USER(self):
            return self.getToken(TSqlParser.MULTI_USER, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(TSqlParser.NESTED_TRIGGERS, 0)

        def NEW_ACCOUNT(self):
            return self.getToken(TSqlParser.NEW_ACCOUNT, 0)

        def NEW_BROKER(self):
            return self.getToken(TSqlParser.NEW_BROKER, 0)

        def NEW_PASSWORD(self):
            return self.getToken(TSqlParser.NEW_PASSWORD, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def NO_TRUNCATE(self):
            return self.getToken(TSqlParser.NO_TRUNCATE, 0)

        def NO_WAIT(self):
            return self.getToken(TSqlParser.NO_WAIT, 0)

        def NOCOUNT(self):
            return self.getToken(TSqlParser.NOCOUNT, 0)

        def NODES(self):
            return self.getToken(TSqlParser.NODES, 0)

        def NOEXPAND(self):
            return self.getToken(TSqlParser.NOEXPAND, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0)

        def NORECOMPUTE(self):
            return self.getToken(TSqlParser.NORECOMPUTE, 0)

        def NORECOVERY(self):
            return self.getToken(TSqlParser.NORECOVERY, 0)

        def NOWAIT(self):
            return self.getToken(TSqlParser.NOWAIT, 0)

        def NTILE(self):
            return self.getToken(TSqlParser.NTILE, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def NUMBER(self):
            return self.getToken(TSqlParser.NUMBER, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(TSqlParser.NUMERIC_ROUNDABORT, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def OFFLINE(self):
            return self.getToken(TSqlParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(TSqlParser.OFFSET, 0)

        def OFFSETS(self):
            return self.getToken(TSqlParser.OFFSETS, 0)

        def OLD_ACCOUNT(self):
            return self.getToken(TSqlParser.OLD_ACCOUNT, 0)

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def OPTIMISTIC(self):
            return self.getToken(TSqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(TSqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def PAGE(self):
            return self.getToken(TSqlParser.PAGE, 0)

        def PAGE_VERIFY(self):
            return self.getToken(TSqlParser.PAGE_VERIFY, 0)

        def PARAMETERIZATION(self):
            return self.getToken(TSqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(TSqlParser.PARTITIONS, 0)

        def PARTNER(self):
            return self.getToken(TSqlParser.PARTNER, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def POISON_MESSAGE_HANDLING(self):
            return self.getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def PORT(self):
            return self.getToken(TSqlParser.PORT, 0)

        def PRECEDING(self):
            return self.getToken(TSqlParser.PRECEDING, 0)

        def PRIMARY_ROLE(self):
            return self.getToken(TSqlParser.PRIMARY_ROLE, 0)

        def PRIOR(self):
            return self.getToken(TSqlParser.PRIOR, 0)

        def PRIORITY(self):
            return self.getToken(TSqlParser.PRIORITY, 0)

        def PRIORITY_LEVEL(self):
            return self.getToken(TSqlParser.PRIORITY_LEVEL, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def PRIVATE_KEY(self):
            return self.getToken(TSqlParser.PRIVATE_KEY, 0)

        def PRIVILEGES(self):
            return self.getToken(TSqlParser.PRIVILEGES, 0)

        def PROCEDURE_NAME(self):
            return self.getToken(TSqlParser.PROCEDURE_NAME, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def PUBLIC(self):
            return self.getToken(TSqlParser.PUBLIC, 0)

        def QUERY(self):
            return self.getToken(TSqlParser.QUERY, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def QUEUE_DELAY(self):
            return self.getToken(TSqlParser.QUEUE_DELAY, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def K_R(self):
            return self.getToken(TSqlParser.K_R, 0)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(TSqlParser.RANK, 0)

        def RAW(self):
            return self.getToken(TSqlParser.RAW, 0)

        def RC2(self):
            return self.getToken(TSqlParser.RC2, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def RC4_128(self):
            return self.getToken(TSqlParser.RC4_128, 0)

        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def READ_ONLY_ROUTING_LIST(self):
            return self.getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0)

        def READ_WRITE(self):
            return self.getToken(TSqlParser.READ_WRITE, 0)

        def READONLY(self):
            return self.getToken(TSqlParser.READONLY, 0)

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def RECEIVE(self):
            return self.getToken(TSqlParser.RECEIVE, 0)

        def RECOMPILE(self):
            return self.getToken(TSqlParser.RECOMPILE, 0)

        def RECOVERY(self):
            return self.getToken(TSqlParser.RECOVERY, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(TSqlParser.RECURSIVE_TRIGGERS, 0)

        def RELATIVE(self):
            return self.getToken(TSqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def REMOTE_SERVICE_NAME(self):
            return self.getToken(TSqlParser.REMOTE_SERVICE_NAME, 0)

        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def REPEATABLE(self):
            return self.getToken(TSqlParser.REPEATABLE, 0)

        def REPLICA(self):
            return self.getToken(TSqlParser.REPLICA, 0)

        def REQUEST_MAX_CPU_TIME_SEC(self):
            return self.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0)

        def REQUEST_MAX_MEMORY_GRANT_PERCENT(self):
            return self.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0)

        def REQUEST_MEMORY_GRANT_TIMEOUT_SEC(self):
            return self.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0)

        def REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(self):
            return self.getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0)

        def RESERVE_DISK_SPACE(self):
            return self.getToken(TSqlParser.RESERVE_DISK_SPACE, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def RESOURCE_MANAGER_LOCATION(self):
            return self.getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0)

        def RESTRICTED_USER(self):
            return self.getToken(TSqlParser.RESTRICTED_USER, 0)

        def RETENTION(self):
            return self.getToken(TSqlParser.RETENTION, 0)

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def ROBUST(self):
            return self.getToken(TSqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(TSqlParser.ROOT, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def ROW_NUMBER(self):
            return self.getToken(TSqlParser.ROW_NUMBER, 0)

        def ROWCOUNT(self):
            return self.getToken(TSqlParser.ROWCOUNT, 0)

        def ROWGUID(self):
            return self.getToken(TSqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def SAFETY(self):
            return self.getToken(TSqlParser.SAFETY, 0)

        def SAMPLE(self):
            return self.getToken(TSqlParser.SAMPLE, 0)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def SCOPED(self):
            return self.getToken(TSqlParser.SCOPED, 0)

        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(TSqlParser.SCROLL_LOCKS, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def SECONDARY(self):
            return self.getToken(TSqlParser.SECONDARY, 0)

        def SECONDARY_ONLY(self):
            return self.getToken(TSqlParser.SECONDARY_ONLY, 0)

        def SECONDARY_ROLE(self):
            return self.getToken(TSqlParser.SECONDARY_ROLE, 0)

        def SECONDS(self):
            return self.getToken(TSqlParser.SECONDS, 0)

        def SECRET(self):
            return self.getToken(TSqlParser.SECRET, 0)

        def SECURITY_LOG(self):
            return self.getToken(TSqlParser.SECURITY_LOG, 0)

        def SEEDING_MODE(self):
            return self.getToken(TSqlParser.SEEDING_MODE, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def SEMI_SENSITIVE(self):
            return self.getToken(TSqlParser.SEMI_SENSITIVE, 0)

        def SEND(self):
            return self.getToken(TSqlParser.SEND, 0)

        def SENT(self):
            return self.getToken(TSqlParser.SENT, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def SESSION_TIMEOUT(self):
            return self.getToken(TSqlParser.SESSION_TIMEOUT, 0)

        def SETERROR(self):
            return self.getToken(TSqlParser.SETERROR, 0)

        def SHARE(self):
            return self.getToken(TSqlParser.SHARE, 0)

        def SHOWPLAN(self):
            return self.getToken(TSqlParser.SHOWPLAN, 0)

        def SID(self):
            return self.getToken(TSqlParser.SID, 0)

        def SIGNATURE(self):
            return self.getToken(TSqlParser.SIGNATURE, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def SINGLE_USER(self):
            return self.getToken(TSqlParser.SINGLE_USER, 0)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def SMALLINT(self):
            return self.getToken(TSqlParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STANDBY(self):
            return self.getToken(TSqlParser.STANDBY, 0)

        def START(self):
            return self.getToken(TSqlParser.START, 0)

        def START_DATE(self):
            return self.getToken(TSqlParser.START_DATE, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def STATIC(self):
            return self.getToken(TSqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(TSqlParser.STATS_STREAM, 0)

        def STATUS(self):
            return self.getToken(TSqlParser.STATUS, 0)

        def STDEV(self):
            return self.getToken(TSqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(TSqlParser.STDEVP, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def STUFF(self):
            return self.getToken(TSqlParser.STUFF, 0)

        def SUBJECT(self):
            return self.getToken(TSqlParser.SUBJECT, 0)

        def SUM(self):
            return self.getToken(TSqlParser.SUM, 0)

        def SUSPEND(self):
            return self.getToken(TSqlParser.SUSPEND, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def SYNCHRONOUS_COMMIT(self):
            return self.getToken(TSqlParser.SYNCHRONOUS_COMMIT, 0)

        def SYNONYM(self):
            return self.getToken(TSqlParser.SYNONYM, 0)

        def TAKE(self):
            return self.getToken(TSqlParser.TAKE, 0)

        def TARGET(self):
            return self.getToken(TSqlParser.TARGET, 0)

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(TSqlParser.TARGET_RECOVERY_TIME, 0)

        def TB(self):
            return self.getToken(TSqlParser.TB, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(TSqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(TSqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(TSqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(TSqlParser.TIME, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def TIMER(self):
            return self.getToken(TSqlParser.TIMER, 0)

        def TINYINT(self):
            return self.getToken(TSqlParser.TINYINT, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(TSqlParser.TORN_PAGE_DETECTION, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TRIPLE_DES(self):
            return self.getToken(TSqlParser.TRIPLE_DES, 0)

        def TRIPLE_DES_3KEY(self):
            return self.getToken(TSqlParser.TRIPLE_DES_3KEY, 0)

        def TRUSTWORTHY(self):
            return self.getToken(TSqlParser.TRUSTWORTHY, 0)

        def TRY(self):
            return self.getToken(TSqlParser.TRY, 0)

        def TSQL(self):
            return self.getToken(TSqlParser.TSQL, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(TSqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TSqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def UNLIMITED(self):
            return self.getToken(TSqlParser.UNLIMITED, 0)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def VALID_XML(self):
            return self.getToken(TSqlParser.VALID_XML, 0)

        def VALIDATION(self):
            return self.getToken(TSqlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def VAR(self):
            return self.getToken(TSqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(TSqlParser.VARP, 0)

        def VIEW_METADATA(self):
            return self.getToken(TSqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(TSqlParser.VIEWS, 0)

        def WAIT(self):
            return self.getToken(TSqlParser.WAIT, 0)

        def WELL_FORMED_XML(self):
            return self.getToken(TSqlParser.WELL_FORMED_XML, 0)

        def WORK(self):
            return self.getToken(TSqlParser.WORK, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TSqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_simple_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_id" ):
                listener.enterSimple_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_id" ):
                listener.exitSimple_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_id" ):
                return visitor.visitSimple_id(self)
            else:
                return visitor.visitChildren(self)




    def simple_id(self):

        localctx = TSqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3972
            _la = self._input.LA(1)
            if not(_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (TSqlParser.INIT - 159)) | (1 << (TSqlParser.KEY - 159)) | (1 << (TSqlParser.MASTER - 159)) | (1 << (TSqlParser.MAX_MEMORY - 159)))) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (TSqlParser.OFFSETS - 226)) | (1 << (TSqlParser.PAGE - 226)) | (1 << (TSqlParser.PUBLIC - 226)) | (1 << (TSqlParser.K_R - 226)) | (1 << (TSqlParser.RAW - 226)) | (1 << (TSqlParser.RETURN - 226)) | (1 << (TSqlParser.RETURNS - 226)) | (1 << (TSqlParser.ROWCOUNT - 226)))) != 0) or ((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & ((1 << (TSqlParser.SAFETY - 296)) | (1 << (TSqlParser.SERVER - 296)) | (1 << (TSqlParser.SID - 296)) | (1 << (TSqlParser.SOURCE - 296)) | (1 << (TSqlParser.STATE - 296)) | (1 << (TSqlParser.START - 296)) | (1 << (TSqlParser.TARGET - 296)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (TSqlParser.ABSOLUTE - 384)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 384)) | (1 << (TSqlParser.ACTION - 384)) | (1 << (TSqlParser.ACTIVATION - 384)) | (1 << (TSqlParser.ACTIVE - 384)) | (1 << (TSqlParser.ADDRESS - 384)) | (1 << (TSqlParser.AES_128 - 384)) | (1 << (TSqlParser.AES_192 - 384)) | (1 << (TSqlParser.AES_256 - 384)) | (1 << (TSqlParser.AFFINITY - 384)) | (1 << (TSqlParser.AFTER - 384)) | (1 << (TSqlParser.AGGREGATE - 384)) | (1 << (TSqlParser.ALGORITHM - 384)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 384)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 384)) | (1 << (TSqlParser.ALLOWED - 384)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 384)) | (1 << (TSqlParser.ANSI_NULLS - 384)) | (1 << (TSqlParser.ANSI_PADDING - 384)) | (1 << (TSqlParser.ANSI_WARNINGS - 384)) | (1 << (TSqlParser.APPLICATION_LOG - 384)) | (1 << (TSqlParser.APPLY - 384)) | (1 << (TSqlParser.ARITHABORT - 384)) | (1 << (TSqlParser.ASSEMBLY - 384)) | (1 << (TSqlParser.AUDIT - 384)) | (1 << (TSqlParser.AUDIT_GUID - 384)) | (1 << (TSqlParser.AUTO - 384)) | (1 << (TSqlParser.AUTO_CLEANUP - 384)) | (1 << (TSqlParser.AUTO_CLOSE - 384)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_SHRINK - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 384)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 384)) | (1 << (TSqlParser.AVAILABILITY - 384)) | (1 << (TSqlParser.AVG - 384)) | (1 << (TSqlParser.BACKUP_PRIORITY - 384)) | (1 << (TSqlParser.BEGIN_DIALOG - 384)) | (1 << (TSqlParser.BIGINT - 384)) | (1 << (TSqlParser.BINARY_BASE64 - 384)) | (1 << (TSqlParser.BINARY_CHECKSUM - 384)) | (1 << (TSqlParser.BINDING - 384)) | (1 << (TSqlParser.BLOB_STORAGE - 384)) | (1 << (TSqlParser.BROKER - 384)) | (1 << (TSqlParser.BROKER_INSTANCE - 384)) | (1 << (TSqlParser.BULK_LOGGED - 384)) | (1 << (TSqlParser.CALLER - 384)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 384)) | (1 << (TSqlParser.CAST - 384)) | (1 << (TSqlParser.CATALOG - 384)) | (1 << (TSqlParser.CATCH - 384)) | (1 << (TSqlParser.CHANGE_RETENTION - 384)) | (1 << (TSqlParser.CHANGE_TRACKING - 384)) | (1 << (TSqlParser.CHECKSUM - 384)) | (1 << (TSqlParser.CHECKSUM_AGG - 384)) | (1 << (TSqlParser.CLEANUP - 384)) | (1 << (TSqlParser.COLLECTION - 384)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 384)) | (1 << (TSqlParser.COMMITTED - 384)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 384)) | (1 << (TSqlParser.CONCAT - 384)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 384)) | (1 << (TSqlParser.CONTENT - 384)) | (1 << (TSqlParser.CONTROL - 384)) | (1 << (TSqlParser.COOKIE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (TSqlParser.COUNT - 448)) | (1 << (TSqlParser.COUNT_BIG - 448)) | (1 << (TSqlParser.COUNTER - 448)) | (1 << (TSqlParser.CPU - 448)) | (1 << (TSqlParser.CREATE_NEW - 448)) | (1 << (TSqlParser.CREATION_DISPOSITION - 448)) | (1 << (TSqlParser.CREDENTIAL - 448)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 448)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 448)) | (1 << (TSqlParser.CURSOR_DEFAULT - 448)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 448)) | (1 << (TSqlParser.DATEADD - 448)) | (1 << (TSqlParser.DATEDIFF - 448)) | (1 << (TSqlParser.DATENAME - 448)) | (1 << (TSqlParser.DATEPART - 448)) | (1 << (TSqlParser.DAYS - 448)) | (1 << (TSqlParser.DB_CHAINING - 448)) | (1 << (TSqlParser.DB_FAILOVER - 448)) | (1 << (TSqlParser.DECRYPTION - 448)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 448)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 448)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 448)) | (1 << (TSqlParser.DELAY - 448)) | (1 << (TSqlParser.DELAYED_DURABILITY - 448)) | (1 << (TSqlParser.DELETED - 448)) | (1 << (TSqlParser.DENSE_RANK - 448)) | (1 << (TSqlParser.DEPENDENTS - 448)) | (1 << (TSqlParser.DES - 448)) | (1 << (TSqlParser.DESCRIPTION - 448)) | (1 << (TSqlParser.DESX - 448)) | (1 << (TSqlParser.DHCP - 448)) | (1 << (TSqlParser.DIALOG - 448)) | (1 << (TSqlParser.DIRECTORY_NAME - 448)) | (1 << (TSqlParser.DISABLE - 448)) | (1 << (TSqlParser.DISABLE_BROKER - 448)) | (1 << (TSqlParser.DISABLED - 448)) | (1 << (TSqlParser.DISK_DRIVE - 448)) | (1 << (TSqlParser.DOCUMENT - 448)) | (1 << (TSqlParser.DYNAMIC - 448)) | (1 << (TSqlParser.EMERGENCY - 448)) | (1 << (TSqlParser.EMPTY - 448)) | (1 << (TSqlParser.ENABLE - 448)) | (1 << (TSqlParser.ENABLE_BROKER - 448)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 448)) | (1 << (TSqlParser.ENCRYPTION - 448)) | (1 << (TSqlParser.ENDPOINT_URL - 448)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 448)) | (1 << (TSqlParser.EXCLUSIVE - 448)) | (1 << (TSqlParser.EXECUTABLE - 448)) | (1 << (TSqlParser.EXIST - 448)) | (1 << (TSqlParser.EXPAND - 448)) | (1 << (TSqlParser.EXPIRY_DATE - 448)) | (1 << (TSqlParser.EXPLICIT - 448)) | (1 << (TSqlParser.FAIL_OPERATION - 448)) | (1 << (TSqlParser.FAILOVER_MODE - 448)) | (1 << (TSqlParser.FAILURE - 448)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 448)) | (1 << (TSqlParser.FAST - 448)) | (1 << (TSqlParser.FAST_FORWARD - 448)) | (1 << (TSqlParser.FILEGROUP - 448)) | (1 << (TSqlParser.FILEGROWTH - 448)) | (1 << (TSqlParser.FILEPATH - 448)) | (1 << (TSqlParser.FILESTREAM - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (TSqlParser.FILTER - 512)) | (1 << (TSqlParser.FIRST - 512)) | (1 << (TSqlParser.FIRST_VALUE - 512)) | (1 << (TSqlParser.FOLLOWING - 512)) | (1 << (TSqlParser.FORCE - 512)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 512)) | (1 << (TSqlParser.FORCED - 512)) | (1 << (TSqlParser.FORMAT - 512)) | (1 << (TSqlParser.FORWARD_ONLY - 512)) | (1 << (TSqlParser.FULLSCAN - 512)) | (1 << (TSqlParser.FULLTEXT - 512)) | (1 << (TSqlParser.GB - 512)) | (1 << (TSqlParser.GETDATE - 512)) | (1 << (TSqlParser.GETUTCDATE - 512)) | (1 << (TSqlParser.GLOBAL - 512)) | (1 << (TSqlParser.GO - 512)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 512)) | (1 << (TSqlParser.GROUPING - 512)) | (1 << (TSqlParser.GROUPING_ID - 512)) | (1 << (TSqlParser.HADR - 512)) | (1 << (TSqlParser.HASH - 512)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 512)) | (1 << (TSqlParser.HIGH - 512)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 512)) | (1 << (TSqlParser.HOURS - 512)) | (1 << (TSqlParser.IDENTITY_VALUE - 512)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 512)) | (1 << (TSqlParser.IMMEDIATE - 512)) | (1 << (TSqlParser.IMPERSONATE - 512)) | (1 << (TSqlParser.IMPORTANCE - 512)) | (1 << (TSqlParser.INCREMENTAL - 512)) | (1 << (TSqlParser.INITIATOR - 512)) | (1 << (TSqlParser.INPUT - 512)) | (1 << (TSqlParser.INSENSITIVE - 512)) | (1 << (TSqlParser.INSERTED - 512)) | (1 << (TSqlParser.INT - 512)) | (1 << (TSqlParser.IP - 512)) | (1 << (TSqlParser.ISOLATION - 512)) | (1 << (TSqlParser.KB - 512)) | (1 << (TSqlParser.KEEP - 512)) | (1 << (TSqlParser.KEEPFIXED - 512)) | (1 << (TSqlParser.KEY_SOURCE - 512)) | (1 << (TSqlParser.KEYS - 512)) | (1 << (TSqlParser.KEYSET - 512)) | (1 << (TSqlParser.LAG - 512)) | (1 << (TSqlParser.LAST - 512)) | (1 << (TSqlParser.LAST_VALUE - 512)) | (1 << (TSqlParser.LEAD - 512)) | (1 << (TSqlParser.LEVEL - 512)) | (1 << (TSqlParser.LIST - 512)) | (1 << (TSqlParser.LISTENER - 512)) | (1 << (TSqlParser.LISTENER_URL - 512)) | (1 << (TSqlParser.LOB_COMPACTION - 512)) | (1 << (TSqlParser.LOCAL - 512)) | (1 << (TSqlParser.LOCATION - 512)) | (1 << (TSqlParser.LOCK - 512)) | (1 << (TSqlParser.LOCK_ESCALATION - 512)) | (1 << (TSqlParser.LOGIN - 512)) | (1 << (TSqlParser.LOOP - 512)) | (1 << (TSqlParser.LOW - 512)) | (1 << (TSqlParser.MANUAL - 512)) | (1 << (TSqlParser.MARK - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (TSqlParser.MATERIALIZED - 576)) | (1 << (TSqlParser.MAX - 576)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 576)) | (1 << (TSqlParser.MAX_DOP - 576)) | (1 << (TSqlParser.MAX_FILES - 576)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MAX_PROCESSES - 576)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 576)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 576)) | (1 << (TSqlParser.MAXDOP - 576)) | (1 << (TSqlParser.MAXRECURSION - 576)) | (1 << (TSqlParser.MAXSIZE - 576)) | (1 << (TSqlParser.MB - 576)) | (1 << (TSqlParser.MEDIUM - 576)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 576)) | (1 << (TSqlParser.MESSAGE - 576)) | (1 << (TSqlParser.MIN - 576)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 576)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 576)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 576)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 576)) | (1 << (TSqlParser.MINUTES - 576)) | (1 << (TSqlParser.MIRROR_ADDRESS - 576)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 576)) | (1 << (TSqlParser.MODE - 576)) | (1 << (TSqlParser.MODIFY - 576)) | (1 << (TSqlParser.MOVE - 576)) | (1 << (TSqlParser.MULTI_USER - 576)) | (1 << (TSqlParser.NAME - 576)) | (1 << (TSqlParser.NESTED_TRIGGERS - 576)) | (1 << (TSqlParser.NEW_ACCOUNT - 576)) | (1 << (TSqlParser.NEW_BROKER - 576)) | (1 << (TSqlParser.NEW_PASSWORD - 576)) | (1 << (TSqlParser.NEXT - 576)) | (1 << (TSqlParser.NO - 576)) | (1 << (TSqlParser.NO_TRUNCATE - 576)) | (1 << (TSqlParser.NO_WAIT - 576)) | (1 << (TSqlParser.NOCOUNT - 576)) | (1 << (TSqlParser.NODES - 576)) | (1 << (TSqlParser.NOEXPAND - 576)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 576)) | (1 << (TSqlParser.NORECOMPUTE - 576)) | (1 << (TSqlParser.NORECOVERY - 576)) | (1 << (TSqlParser.NOWAIT - 576)) | (1 << (TSqlParser.NTILE - 576)) | (1 << (TSqlParser.NUMANODE - 576)) | (1 << (TSqlParser.NUMBER - 576)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 576)) | (1 << (TSqlParser.OBJECT - 576)) | (1 << (TSqlParser.OFFLINE - 576)) | (1 << (TSqlParser.OFFSET - 576)) | (1 << (TSqlParser.OLD_ACCOUNT - 576)) | (1 << (TSqlParser.ONLINE - 576)) | (1 << (TSqlParser.ONLY - 576)) | (1 << (TSqlParser.OPEN_EXISTING - 576)) | (1 << (TSqlParser.OPTIMISTIC - 576)) | (1 << (TSqlParser.OPTIMIZE - 576)) | (1 << (TSqlParser.OUT - 576)) | (1 << (TSqlParser.OUTPUT - 576)) | (1 << (TSqlParser.OWNER - 576)) | (1 << (TSqlParser.PAGE_VERIFY - 576)) | (1 << (TSqlParser.PARAMETERIZATION - 576)) | (1 << (TSqlParser.PARTITION - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (TSqlParser.PARTITIONS - 640)) | (1 << (TSqlParser.PARTNER - 640)) | (1 << (TSqlParser.PATH - 640)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 640)) | (1 << (TSqlParser.POOL - 640)) | (1 << (TSqlParser.PORT - 640)) | (1 << (TSqlParser.PRECEDING - 640)) | (1 << (TSqlParser.PRIMARY_ROLE - 640)) | (1 << (TSqlParser.PRIOR - 640)) | (1 << (TSqlParser.PRIORITY - 640)) | (1 << (TSqlParser.PRIORITY_LEVEL - 640)) | (1 << (TSqlParser.PRIVATE - 640)) | (1 << (TSqlParser.PRIVATE_KEY - 640)) | (1 << (TSqlParser.PRIVILEGES - 640)) | (1 << (TSqlParser.PROCEDURE_NAME - 640)) | (1 << (TSqlParser.PROPERTY - 640)) | (1 << (TSqlParser.PROVIDER - 640)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 640)) | (1 << (TSqlParser.QUERY - 640)) | (1 << (TSqlParser.QUEUE - 640)) | (1 << (TSqlParser.QUEUE_DELAY - 640)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 640)) | (1 << (TSqlParser.RANGE - 640)) | (1 << (TSqlParser.RANK - 640)) | (1 << (TSqlParser.RC2 - 640)) | (1 << (TSqlParser.RC4 - 640)) | (1 << (TSqlParser.RC4_128 - 640)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 640)) | (1 << (TSqlParser.READ_ONLY - 640)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 640)) | (1 << (TSqlParser.READ_WRITE - 640)) | (1 << (TSqlParser.READONLY - 640)) | (1 << (TSqlParser.REBUILD - 640)) | (1 << (TSqlParser.RECEIVE - 640)) | (1 << (TSqlParser.RECOMPILE - 640)) | (1 << (TSqlParser.RECOVERY - 640)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 640)) | (1 << (TSqlParser.RELATIVE - 640)) | (1 << (TSqlParser.REMOTE - 640)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 640)) | (1 << (TSqlParser.REMOVE - 640)) | (1 << (TSqlParser.REORGANIZE - 640)) | (1 << (TSqlParser.REPEATABLE - 640)) | (1 << (TSqlParser.REPLICA - 640)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 640)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 640)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 640)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 640)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 640)) | (1 << (TSqlParser.RESOURCE - 640)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 640)) | (1 << (TSqlParser.RESTRICTED_USER - 640)) | (1 << (TSqlParser.RETENTION - 640)) | (1 << (TSqlParser.ROBUST - 640)) | (1 << (TSqlParser.ROOT - 640)) | (1 << (TSqlParser.ROUTE - 640)) | (1 << (TSqlParser.ROW - 640)) | (1 << (TSqlParser.ROW_NUMBER - 640)) | (1 << (TSqlParser.ROWGUID - 640)) | (1 << (TSqlParser.ROWS - 640)) | (1 << (TSqlParser.SAMPLE - 640)) | (1 << (TSqlParser.SCHEMABINDING - 640)) | (1 << (TSqlParser.SCOPED - 640)) | (1 << (TSqlParser.SCROLL - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (TSqlParser.SCROLL_LOCKS - 704)) | (1 << (TSqlParser.SEARCH - 704)) | (1 << (TSqlParser.SECONDARY - 704)) | (1 << (TSqlParser.SECONDARY_ONLY - 704)) | (1 << (TSqlParser.SECONDARY_ROLE - 704)) | (1 << (TSqlParser.SECONDS - 704)) | (1 << (TSqlParser.SECRET - 704)) | (1 << (TSqlParser.SECURITY_LOG - 704)) | (1 << (TSqlParser.SEEDING_MODE - 704)) | (1 << (TSqlParser.SELF - 704)) | (1 << (TSqlParser.SEMI_SENSITIVE - 704)) | (1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SENT - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SESSION_TIMEOUT - 704)) | (1 << (TSqlParser.SETERROR - 704)) | (1 << (TSqlParser.SHARE - 704)) | (1 << (TSqlParser.SHOWPLAN - 704)) | (1 << (TSqlParser.SIGNATURE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SINGLE_USER - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SMALLINT - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STANDBY - 704)) | (1 << (TSqlParser.START_DATE - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STATUS - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.STOPLIST - 704)) | (1 << (TSqlParser.STUFF - 704)) | (1 << (TSqlParser.SUBJECT - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.SUSPEND - 704)) | (1 << (TSqlParser.SYMMETRIC - 704)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 704)) | (1 << (TSqlParser.SYNONYM - 704)) | (1 << (TSqlParser.TAKE - 704)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 704)) | (1 << (TSqlParser.TB - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)) | (1 << (TSqlParser.THROW - 704)) | (1 << (TSqlParser.TIES - 704)) | (1 << (TSqlParser.TIME - 704)) | (1 << (TSqlParser.TIMEOUT - 704)) | (1 << (TSqlParser.TIMER - 704)) | (1 << (TSqlParser.TINYINT - 704)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 704)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 704)) | (1 << (TSqlParser.TRIPLE_DES - 704)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 704)) | (1 << (TSqlParser.TRUSTWORTHY - 704)) | (1 << (TSqlParser.TRY - 704)) | (1 << (TSqlParser.TSQL - 704)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 704)) | (1 << (TSqlParser.TYPE - 704)) | (1 << (TSqlParser.TYPE_WARNING - 704)) | (1 << (TSqlParser.UNBOUNDED - 704)) | (1 << (TSqlParser.UNCOMMITTED - 704)) | (1 << (TSqlParser.UNKNOWN - 704)) | (1 << (TSqlParser.UNLIMITED - 704)))) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (TSqlParser.USING - 768)) | (1 << (TSqlParser.VALID_XML - 768)) | (1 << (TSqlParser.VALIDATION - 768)) | (1 << (TSqlParser.VALUE - 768)) | (1 << (TSqlParser.VAR - 768)) | (1 << (TSqlParser.VARP - 768)) | (1 << (TSqlParser.VIEW_METADATA - 768)) | (1 << (TSqlParser.VIEWS - 768)) | (1 << (TSqlParser.WAIT - 768)) | (1 << (TSqlParser.WELL_FORMED_XML - 768)) | (1 << (TSqlParser.WORK - 768)) | (1 << (TSqlParser.WORKLOAD - 768)) | (1 << (TSqlParser.XML - 768)) | (1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.LOCAL_ID - 768)) | (1 << (TSqlParser.IDENTIFIER - 768)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison_operator" ):
                return visitor.visitComparison_operator(self)
            else:
                return visitor.visitChildren(self)




    def comparison_operator(self):

        localctx = TSqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_comparison_operator)
        try:
            self.state = 3989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3974
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3975
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3976
                self.match(TSqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3977
                self.match(TSqlParser.LESS)
                self.state = 3978
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3979
                self.match(TSqlParser.GREATER)
                self.state = 3980
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3981
                self.match(TSqlParser.LESS)
                self.state = 3982
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3983
                self.match(TSqlParser.EXCLAMATION)
                self.state = 3984
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3985
                self.match(TSqlParser.EXCLAMATION)
                self.state = 3986
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3987
                self.match(TSqlParser.EXCLAMATION)
                self.state = 3988
                self.match(TSqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_ASSIGN(self):
            return self.getToken(TSqlParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(TSqlParser.MINUS_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(TSqlParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(TSqlParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(TSqlParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(TSqlParser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(TSqlParser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(TSqlParser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = TSqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3991
            _la = self._input.LA(1)
            if not(((((_la - 806)) & ~0x3f) == 0 and ((1 << (_la - 806)) & ((1 << (TSqlParser.PLUS_ASSIGN - 806)) | (1 << (TSqlParser.MINUS_ASSIGN - 806)) | (1 << (TSqlParser.MULT_ASSIGN - 806)) | (1 << (TSqlParser.DIV_ASSIGN - 806)) | (1 << (TSqlParser.MOD_ASSIGN - 806)) | (1 << (TSqlParser.AND_ASSIGN - 806)) | (1 << (TSqlParser.XOR_ASSIGN - 806)) | (1 << (TSqlParser.OR_ASSIGN - 806)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[99] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 10)
         




