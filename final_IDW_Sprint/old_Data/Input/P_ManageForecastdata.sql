USE [AMSData]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[P_ManageForecastdata](

@imode int =2
)
as 
begin
SET NOCOUNT ON;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

  
  BEGIN TRY

DECLARE 

@STSTARTDATE DATE,
@STENDDATE   DATE,
@LTSTARTDATE DATE,
@LTUSNSTARTDATE DATE,
@LTENDDATE   DATE,
@LOAD_PROFILE_CD NVARCHAR(50) = '-1',
@dtnow datetime= getdate()


SELECT  @STSTARTDATE= DATEADD(m, DATEDIFF(m, 0, @dtnow), 0) 

SELECT  @STENDDATE= CAST(DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@dtnow+1)+2,0)) AS DATE)

SET @LTSTARTDATE=DATEADD(m, DATEDIFF(m, 0, @dtnow)+2, 0) 
SET @LTUSNSTARTDATE=DATEADD(WK, 2, @dtnow) 
SET @LTENDDATE=(SELECT CAST(MAX(FLOW_STOP_DT) AS DATE) FROM SalesInputFile)




IF (@imode=1) --LT_CALCULATION
BEGIN
	
	TRUNCATE TABLE AMS.IW_Growth_LT_12X12
	CREATE TABLE  #LT_CALCULATION_TEMP(
		LT_CALCULATIONID INT IDENTITY(1,1) PRIMARY KEY ,
		SALEINPUTID int,
		MARKET_CD			   varchar(10) NULL,
		TOU_SCHEDULE_TYPE_CD   varchar(10) NULL,
		UFE_ZONE_CD			   varchar(10) NULL,
		WEATHER_SENSITIVITY_CD varchar(10) NULL,
		LOAD_PROFILE_CD		   varchar(100) NULL,
		FORECAST_PROFILE_CD	   varchar(100) NULL,
		WEATHER_ZONE_CD		   varchar(20) NULL,
		METER_TYPE_CD		   varchar(4) NULL,
		BOOK_CD				   varchar(10) NULL,
		LSE_CD				   varchar(50) NULL,
		LOSS_CD				   varchar(50) NULL,
		UTILITY_CD			   varchar(50) NULL,
		CONGESTION_ZONE_CD	   varchar(50) NULL, -- MEANS ZONE  Cluster_ST_20161014
		PROV_STATE_CD		   varchar(2) NULL,
		PRODUCT_TYPE_CD		   varchar(50) NULL,
		Component_Type_Cd	   varchar(25) NULL,
		TEMP_BAND_CD		   varchar(25) NULL,
		SOURCE_CD			   varchar(50) NULL,
		FORECAST_DT			   date NULL,
		HOUR_NUM			   int NULL,
		USAGE_FACTOR		   float NULL,
		ESIID_CNT			   int NULL,
		UNADJ_LOAD			   numeric(18, 6) NULL,
		DISTRIB_LOSS_LOAD	   numeric(18, 6) NULL,
		TRANSMISSION_LOSS_LOAD numeric(18, 6) NULL,
		UFE_LOSS_LOAD		   numeric(18, 6) NULL,
		ANCILLARY_LOSS_LOAD	   numeric(18, 6) NULL,
		DERATION_LOSS_LOAD	   numeric(18, 6) NULL,
		CAP_OB				   float NULL,
		TRAN_OB				   float NULL,
		CRDT				   datetime2(3) NULL,
		BATCH_DT			   date NULL,
		BATCH_HR			   int NULL,
		BLOCK_12X12_DESC       varchar(6) null,
		WEATHER_STATION		   varchar(10) NULL,
		CLUSTER_CD			   varchar(50) NULL,
		[DATE]				   date,
		[DAY]				int,	
		ESIID_CNT_cal	NUMERIC(18,6) ,
		FLOW_START_DT DATE ,
		FLOW_STOP_DT DATE,
		MONDAY INT ,
		BLOCK INT 
	) 
	
	CREATE INDEX LT_INDEX ON #LT_CALCULATION_TEMP (LT_CALCULATIONID)
	CREATE  NONCLUSTERED INDEX IDX_FORECAST_DT ON #LT_CALCULATION_TEMP (FORECAST_DT,HOUR_NUM)
	
	DECLARE @LiLOAD_PROFILE_CD varchar(50),
			@LiFLOW_START_DT datetime,
			@LiFLOW_STOP_DT datetime,
				@LID INT 


	DECLARE  ST_LOOP CURSOR
	FOR  SELECT SALESINPUTFILEID,LOAD_PROFILE_CD,FLOW_START_DT,FLOW_STOP_DT FROM DBO.SalesInputFile
	

	OPEN ST_LOOP   
	FETCH NEXT FROM ST_LOOP INTO @LID,@LiLOAD_PROFILE_CD ,@LiFLOW_START_DT,@LiFLOW_STOP_DT

	WHILE @@FETCH_STATUS = 0   
	BEGIN   

		;WITH ST_CALCULATION AS (
					
						SELECT  SALESINPUTFILEID,
						case SUBSTRING(PRODUCT_CD, 1, 3) when 'DER' then 'ERCOT'
						when 'PJM' then 'PJM' when 'NEP' then 'NEPOOL' when 'MIS' then 'MISO'else 'NYISO' end AS MARKET_CD,
						'NOTOU' AS TOU_SCHEDULE_TYPE_CD,'U1' AS UFE_ZONE_CD,'NWS' AS WEATHER_SENSITIVITY_CD,
						S.LOAD_PROFILE_CD,S.LOAD_PROFILE_CD AS FORECAST_PROFILE_CD,S.WEATHER_ZONE_CD,S.METER_TYPE_CD,S.BOOK_CD,
						S.LSE_CD,S.LOSS_CD,S.UTILITY_CD,S.CONGESTION_ZONE_CD,S.PROV_STATE_CD,S.PRODUCT_TYPE_CD,S.COMPONENT_TYPE_CD,
						'A' AS TEMP_BAND_CD,'N' AS SOURCE_CD,null AS FORECAST_DATE,null HOURNUM,AVG_UF AS USAGE_FACTOR,S.COUNT ESIID_CNT,
						00.0 AS UNADJ_LOAD, 000  AS DISTRIB_LOSS_LOAD,00   AS TRANSMISSION_LOSS_LOAD,0    AS UFE_LOSS_LOAD,0    AS ANCILLARY_LOSS_LOAD,
						0    AS DERATION_LOSS_LOAD,0 AS CAP_OB, 0 AS TRAN_OB,@dtnow AS	CRDT,@dtnow AS	BATCH_DT,0 AS	BATCH_HR
						,WEATHER_STATION,CLUSTER_CD,FLOW_START_DT ,FLOW_STOP_DT 
						FROM DBO.SalesInputFile S 
						WHERE SALESINPUTFILEID=@LID and ( (SUBSTRING(PRODUCT_CD, 1, 3) = 'DER' and FLOW_START_DT > @dtnow)
						 or (SUBSTRING(PRODUCT_CD, 1, 3) <> 'DER' and FLOW_START_DT > @LTUSNSTARTDATE))
															 
							)
			INSERT INTO #LT_CALCULATION_TEMP (SALEINPUTID,MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,FORECAST_PROFILE_CD,
			WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,LSE_CD,LOSS_CD,UTILITY_CD,CONGESTION_ZONE_CD,PROV_STATE_CD,
			PRODUCT_TYPE_CD,Component_Type_Cd,TEMP_BAND_CD,SOURCE_CD,FORECAST_DT,HOUR_NUM,USAGE_FACTOR,ESIID_CNT,
			UNADJ_LOAD,DISTRIB_LOSS_LOAD,TRANSMISSION_LOSS_LOAD,UFE_LOSS_LOAD,ANCILLARY_LOSS_LOAD,DERATION_LOSS_LOAD,
			CAP_OB,TRAN_OB,CRDT,BATCH_DT,BATCH_HR,BLOCK_12X12_DESC,WEATHER_STATION,CLUSTER_CD,[DATE],[DAY],ESIID_CNT_cal,FLOW_START_DT ,FLOW_STOP_DT ,MONDAY,BLOCK  )
			SELECT	@LID,S.MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,
					concat([Load_profile_cd],'_',[weather_zone_cd])  AS FORECAST_PROFILE_CD,WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,LSE_CD,LOSS_CD,
					UTILITY_CD,CONGESTION_ZONE_CD,PROV_STATE_CD,PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,TEMP_BAND_CD,
					SOURCE_CD,D.HB_DATE FORECAST_DATE,D.HOUR_ENDING HOURNUM,USAGE_FACTOR,
			
			CASE  WHEN D.HB_DATE >=@LTSTARTDATE  AND D.HB_DATE <= @LTENDDATE THEN S.ESIID_CNT*USAGE_FACTOR
									  ELSE 0	
								 END ESIID_CNT,
			
			 UNADJ_LOAD,DISTRIB_LOSS_LOAD,
			 TRANSMISSION_LOSS_LOAD,UFE_LOSS_LOAD,ANCILLARY_LOSS_LOAD,DERATION_LOSS_LOAD,CAP_OB,TRAN_OB,CRDT,BATCH_DT,BATCH_HR,
			D.BLOCK_12X12_DESC,WEATHER_STATION,CLUSTER_CD,
			
			CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE) [DATE],
				
			 CASE 
					WHEN year(HB_DATE)=year(@LiFLOW_START_DT)and month(HB_DATE)=MONTH(@LiFLOW_START_DT) 
					AND  HB_DATE>=@LTSTARTDATE AND HB_DATE<=@LTENDDATE 
					 THEN CAST(DATEDIFF(DD,@LiFLOW_START_DT,DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@LiFLOW_START_DT)+1,0))) AS INT )+1
					WHEN year(HB_DATE)=year(@LiFLOW_STOP_DT)and month(HB_DATE)=MONTH(@LiFLOW_STOP_DT)
					 AND  HB_DATE>=@LTSTARTDATE AND HB_DATE<=@LTENDDATE 
					 THEN CAST(DATEDIFF(DD,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE),@LiFLOW_STOP_DT) AS INT )+1 
					 
			 ELSE 
	 				CASE WHEN HB_DATE>=@LTSTARTDATE AND HB_DATE<=@LTENDDATE
					 THEN DATEDIFF(DD,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE),DATEADD(s,1,DATEADD(mm, DATEDIFF(m,0,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE))+1,0)))
					
					ELSE 0 
					END
	 		  END   [DAY], 
			   ROUND(	cast(CAST(CAST (CASE 
							--WHEN year(HB_DATE)=year(@LiFLOW_START_DT)and month(HB_DATE)=MONTH(@LiFLOW_START_DT) AND HB_DATE>=@LTSTARTDATE AND HB_DATE<=@LTENDDATE THEN CAST(DATEDIFF(DD,@LiFLOW_START_DT,DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@LiFLOW_START_DT)+1,0))) AS INT )+1
							WHEN year(HB_DATE)=year(@LiFLOW_START_DT)and month(HB_DATE)=MONTH(@LiFLOW_START_DT) 
							AND HB_DATE>=@LTSTARTDATE AND HB_DATE<=@LTENDDATE
							THEN CAST(DATEDIFF(DD,@LiFLOW_START_DT,DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@LiFLOW_START_DT)+1,0))) AS INT )+1
							WHEN year(HB_DATE)=year(@LiFLOW_STOP_DT)and month(HB_DATE)=MONTH(@LiFLOW_STOP_DT)
							 AND HB_DATE>=@LTSTARTDATE AND HB_DATE<=@LTENDDATE
							 THEN CAST(DATEDIFF(DD,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE),@LiFLOW_STOP_DT) AS INT )+1 
							
							 
						    ELSE 
	 						CASE WHEN HB_DATE>=@LTSTARTDATE AND HB_DATE<=@LTENDDATE
							  THEN DATEDIFF(DD,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE),DATEADD(s,1,DATEADD(mm, DATEDIFF(m,0,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE))+1,0)))
							   
	 						ELSE 0
							END
							END 
					as numeric(10,8)
				   )/
			 CAST(DATEDIFF(DD,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE),DATEADD(s,1,DATEADD(mm, DATEDIFF(m,0,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE))+1,0))) as numeric(10,8)) as numeric(10,8)
			 )*s.ESIID_CNT  as numeric(18,6)),0) ESIID_CNT_cal,
			 FLOW_START_DT ,FLOW_STOP_DT 
			 ,CAST(DATEDIFF(DD,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE),DATEADD(s,1,DATEADD(mm, DATEDIFF(m,0,CAST(CAST(month(HB_DATE) AS VARCHAR)+'/01/'+CAST(year(HB_DATE) AS VARCHAR)AS DATE))+1,0))) as numeric(10,8))
			 ,D.BLOCK
			FROM ST_CALCULATION S 
			OUTER APPLY (
						SELECT HB_DATE,h.HOUR_ENDING,substring(h.BLOCK_12X12_DESC,1,2)+'HE'+
							case when len(h.hour_ending) = 1 then '0' + cast(h.hour_ending as varchar)
							else cast(h.hour_ending as varchar) end as BLOCK_12X12_DESC,H.BLOCK
						FROM AMS.IW_HOURLY_BREAKOUT H 
						WHERE  
						CAST(H.HB_DATE AS DATE)>= CAST(@LiFLOW_START_DT AS DATE)
						AND CAST(H.HB_DATE AS DATE)<=CAST(@LiFLOW_STOP_DT AS DATE)
						AND H.HOUR_ENDING IS NOT NULL
						) D
		
			
		
			FETCH NEXT FROM ST_LOOP INTO @LID,@LiLOAD_PROFILE_CD ,@LiFLOW_START_DT,@LiFLOW_STOP_DT 
	END   

	CLOSE ST_LOOP   
	DEALLOCATE ST_LOOP

	 
	UPDATE  c
			SET UNADJ_LOAD=isnull((c.ESIID_CNT*isnull(cst.LOAD,cn.load)/1000),0) 
			from #LT_CALCULATION_TEMP c 
			left join [AMS].[IW_CLUSTER_ST] cst on   (c.CONGESTION_ZONE_CD=cst.ZONE AND c.WEATHER_STATION=cst.WEATHER_STATION AND c.CLUSTER_CD=cst.CLUSTER_CD AND c.FORECAST_DT=cst.FORECAST_DT and c.HOUR_NUM=cst.HOUR_NUM)
			left join [AMS].[IW_CLUSTER_NORMAL] cn on (c.CONGESTION_ZONE_CD=cn.ZONE AND c.WEATHER_STATION=cn.WEATHER_STATION AND c.CLUSTER_CD=cn.CLUSTER_CD   AND c.FORECAST_DT=cn.FORECAST_DT and c.HOUR_NUM=cn.HOUR_NUM)
			
	
			UPDATE  c
			SET 
			DISTRIB_LOSS_LOAD=isnull(UNADJ_LOAD*dhl.DISTRIB_LOSS_PCT,0)
			from #LT_CALCULATION_TEMP c 
			left join [AMS].[IW_DISTR_HOURLY_LOSS] dhl on (c.MARKET_CD=dhl.MARKET_CD AND c.UTILITY_CD=dhl.UTILITY_CD AND C.LOSS_CD=DHL.LOSS_CD AND c.FORECAST_DT=dhl.FORECAST_DT and c.HOUR_NUM=dhl.HOUR_NUM )
			
			UPDATE  c
			SET TRANSMISSION_LOSS_LOAD =isnull((UNADJ_LOAD*thl.TRANSMISSION_LOSS_PCT)/100,0)
			from #LT_CALCULATION_TEMP c 
			left join [AMS].[IW_TRANS_HOURLY_LOSS]thl on (c.MARKET_CD=thl.MARKET_CD AND c.FORECAST_DT=thl.FORECAST_DT and c.HOUR_NUM=thl.HOUR_NUM) 

			UPDATE  c
			SET DERATION_LOSS_LOAD =isnull((UNADJ_LOAD*thl.DERATION_LOSS_PCT*-1)/100,0)
			from #LT_CALCULATION_TEMP c 
			left join [AMS].[IW_DERATION_HOURLY_LOSS]thl on (c.MARKET_CD=thl.MARKET_CD AND c.FORECAST_DT=thl.FORECAST_DT and c.HOUR_NUM=thl.HOUR_NUM) 
			
			select market_cd, utility_cd, congestion_zone_cd, load_profile_cd, avg(cast(capacity_plc_tag as float)/1000) as capacity_tag_avg, 
			isnull( avg(cast(transmis_plc_tag as float)/1000) , avg(cast(capacity_plc_tag as float)/1000)) as tranmission_tag_avg
				into #Defaulttags
			from derlff.USNorth_Release.ActiveList
			where book_cd = 'org_ne' 
			
			group by market_cd, utility_cd, congestion_zone_cd, load_profile_cd
			order by market_cd, utility_cd, congestion_zone_cd, load_profile_cd
			
			UPDATE c
			SET CAP_OB = (isnull(capacity_tag_avg ,0) ) , 
			TRAN_OB = (isnull(tranmission_tag_avg ,0) )
			from #LT_CALCULATION_TEMP c 
			inner join #Defaulttags  a on 
			a.utility_cd=c.utility_cd and a.load_profile_cd=c.load_profile_cd
			 and a.congestion_zone_cd=c.congestion_zone_cd and a.MARKET_CD = c.MARKET_CD
			
CREATE TABLE #TEMPESSIID (
		ID INT IDENTITY(1,1) PRIMARY KEY,
		LOAD_PROFILE_CD varchar(50) ,	
		CLUSTER_CD varchar(50)  NULL,
		LOSS_CD    varchar(50) NULL,
		UTILITY_CD varchar(50) NULL,
		WEATHER_ZONE_CD varchar(20) NULL,
		Weather_Station varchar(10) NULL,
		CONGESTION_ZONE_CD varCHAR(50) NULL,
		PRODUCT_TYPE_CD varchar(50) NULL,
		COMPONENT_TYPE_CD varCHAR(25) NULL,
		BOOK_CD varchar(50) NULL,
		LSE_CD  varchar(50) NULL,
		METER_TYPE_CD varchar(10)NULL,
		PROV_STATE_CD varchar(5) NULL,
		EDATE DATE null ,
		EMONTH INT NULL,
		EYEAR INT NULL ,
		ESIIDCNT INT NULL
		)

		
	CREATE INDEX ESIID_INDEX ON #TEMPESSIID (ID)
	CREATE  NONCLUSTERED INDEX IDX_ESSID_DT ON #TEMPESSIID (LOAD_PROFILE_CD ,CLUSTER_CD,LOSS_CD,UTILITY_CD,WEATHER_ZONE_CD ,Weather_Station,CONGESTION_ZONE_CD,PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,
								BOOK_CD,LSE_CD,METER_TYPE_CD,PROV_STATE_CD,EDATE,EMONTH,EYEAR)


		
		;WITH CTE AS (
		SELECT LOAD_PROFILE_CD,T.CLUSTER_CD,T.LOSS_CD,T.UTILITY_CD,
			   T.WEATHER_ZONE_CD,T.Weather_Station,T.CONGESTION_ZONE_CD,T.PRODUCT_TYPE_CD,T.COMPONENT_TYPE_CD,
				T.BOOK_CD,T.LSE_CD,T.METER_TYPE_CD,T.PROV_STATE_CD ,YEAR(t.DATE) Y ,MONTH(t.DATE) M  ,SUM(DISTINCT ESIID_CNT_cal)CNT ,T.FLOW_START_DT,T.FLOW_STOP_DT,DATE
		FROM  #LT_CALCULATION_TEMP  T 
		GROUP BY 
		LOAD_PROFILE_CD,T.CLUSTER_CD,T.LOSS_CD,T.UTILITY_CD,T.WEATHER_ZONE_CD,
		T.Weather_Station,T.CONGESTION_ZONE_CD,T.PRODUCT_TYPE_CD,T.COMPONENT_TYPE_CD,
		T.BOOK_CD,T.LSE_CD,T.METER_TYPE_CD,T.PROV_STATE_CD ,yEAR(DATE),MONTH(DATE) ,T.FLOW_START_DT,T.FLOW_STOP_DT,DATE
		)
		insert into #TEMPESSIID (LOAD_PROFILE_CD ,CLUSTER_CD,LOSS_CD,UTILITY_CD,WEATHER_ZONE_CD ,Weather_Station,CONGESTION_ZONE_CD,PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,
								BOOK_CD,LSE_CD,METER_TYPE_CD,PROV_STATE_CD,EDATE,EMONTH,EYEAR,ESIIDCNT)
		SELECT  LOAD_PROFILE_CD,CLUSTER_CD,LOSS_CD,UTILITY_CD, WEATHER_ZONE_CD,Weather_Station,CONGESTION_ZONE_CD,
		PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,BOOK_CD,LSE_CD,METER_TYPE_CD,PROV_STATE_CD,DATE,C.M,C.Y
		,SUM(CNT)
		 FROM  CTE  C
		 GROUP BY LOAD_PROFILE_CD,CLUSTER_CD,LOSS_CD,UTILITY_CD,
			   WEATHER_ZONE_CD,Weather_Station,CONGESTION_ZONE_CD,PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,
				BOOK_CD,LSE_CD,METER_TYPE_CD,PROV_STATE_CD ,DATE, C.Y,C.M
		 ORDER BY  DATE, C.Y,C.M

			
		;with LT_CAL as(
					SELECT  MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,
							WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD ,FORECAST_PROFILE_CD,WEATHER_ZONE_CD,
							METER_TYPE_CD,BOOK_CD,LSE_CD,LOSS_CD,UTILITY_CD,CONGESTION_ZONE_CD,
							PROV_STATE_CD,PRODUCT_TYPE_CD, COMPONENT_TYPE_CD,TEMP_BAND_CD,SOURCE_CD,FORECAST_DT,
							HOUR_NUM,USAGE_FACTOR,
							(ESIID_CNT)as ESIID_CNT,
							sum(UNADJ_LOAD)as UNADJ_LOAD,
							sum(DISTRIB_LOSS_LOAD) as DISTRIB_LOSS_LOAD,
							sum(TRANSMISSION_LOSS_LOAD)as TRANSMISSION_LOSS_LOAD,
							sum(UFE_LOSS_LOAD) as UFE_LOSS_LOAD,
							sum(ANCILLARY_LOSS_LOAD) as ANCILLARY_LOSS_LOAD,
							sum(DERATION_LOSS_LOAD) as DERATION_LOSS_LOAD,
							max(cast(CAP_OB as numeric(10,6))) as CAP_OB,
							max(cast(TRAN_OB as numeric(10,6))) as TRAN_OB,
							CRDT,
							BATCH_DT,
							BATCH_HR,BLOCK_12X12_DESC,
							WEATHER_STATION,CLUSTER_CD
					FROM #LT_CALCULATION_TEMP c where ESIID_CNT > 0
					GROUP BY 
						MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,
						WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,FORECAST_PROFILE_CD,
						WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,
						LSE_CD,LOSS_CD,UTILITY_CD,CONGESTION_ZONE_CD,
						PROV_STATE_CD,PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,TEMP_BAND_CD,SOURCE_CD,
						FORECAST_DT,HOUR_NUM,USAGE_FACTOR,
						--UFE_LOSS_LOAD,
						CRDT,BATCH_DT,BATCH_HR,BLOCK_12X12_DESC,
						WEATHER_STATION,CLUSTER_CD,ESIID_CNT
		)
			INSERT INTO AMS.IW_Growth_LT_12X12 (MARKET_CD, TOU_SCHEDULE_TYPE_CD, UFE_ZONE_CD, WEATHER_SENSITIVITY_CD, LOAD_PROFILE_CD, FORECAST_PROFILE_CD,
				WEATHER_ZONE_CD, METER_TYPE_CD, BOOK_CD, LSE_CD, LOSS_CD, UTILITY_CD, CONGESTION_ZONE_CD,PROV_STATE_CD, PRODUCT_TYPE_CD, COMPONENT_TYPE_CD, 
				TEMP_BAND_CD, SOURCE_CD,FORECAST_MONTH, BLOCK_12X12_DESC, USAGE_FACTOR, UNADJ_LOAD, ESIID_CNT, DISTRIB_LOSS_LOAD, TRANSMISSION_LOSS_LOAD,
				UFE_LOSS_LOAD, ANCILLARY_LOSS_LOAD, DERATION_LOSS_LOAD, CAP_OB, TRAN_OB, CRDT, BATCH_DT, BATCH_HR)
			
			SELECT L.MARKET_CD,L.TOU_SCHEDULE_TYPE_CD,L.UFE_ZONE_CD,L.WEATHER_SENSITIVITY_CD,L.LOAD_PROFILE_CD,l.FORECAST_PROFILE_CD,
			L.WEATHER_ZONE_CD,L.METER_TYPE_CD,L.BOOK_CD,L.LSE_CD,
			L.LOSS_CD,L.UTILITY_CD,L.CONGESTION_ZONE_CD,L.PROV_STATE_CD,l.PRODUCT_TYPE_CD,L.COMPONENT_TYPE_CD,TEMP_BAND_CD,SOURCE_CD, 
			CAST(CAST(MONTH(FORECAST_DT) AS VARCHAR)+'/01/'+CAST(YEAR(FORECAST_DT)AS VARCHAR) AS DATE) FORECAST_DATE ,BLOCK_12X12_DESC,USAGE_FACTOR,
			SUM(L.UNADJ_LOAD) UNADJ_LOAD,T.ESIIDCNT,SUM(L.DISTRIB_LOSS_LOAD) DISTRIB_LOSS_LOAD ,SUM(L.TRANSMISSION_LOSS_LOAD) TRANSMISSION_LOSS_LOAD,
			SUM(L.UFE_LOSS_LOAD) UFE_LOSS_LOAD,SUM(L.ANCILLARY_LOSS_LOAD) ANCILLARY_LOSS_LOAD,SUM(L.DERATION_LOSS_LOAD) DERATION_LOSS_LOAD,
			(max(L.CAP_OB)* ESIIDCNT) CAP_OB,(MAX(L.TRAN_OB) * ESIIDCNT) TRAN_OB ,CRDT,BATCH_DT,BATCH_HR
			FROM LT_CAL L 
			INNER JOIN #TEMPESSIID T  ON  (T.EDATE=CAST(CAST(MONTH(FORECAST_DT) AS VARCHAR)+'/01/'+CAST(YEAR(FORECAST_DT)AS VARCHAR) AS DATE) AND T.LOAD_PROFILE_CD=L.LOAD_PROFILE_CD
											AND L.CLUSTER_CD=T.CLUSTER_CD AND L.LOSS_CD=T.LOSS_CD AND L.UTILITY_CD=T.UTILITY_CD
											AND L.WEATHER_ZONE_CD=T.WEATHER_ZONE_CD AND L.WEATHER_STATION=T.Weather_Station
											AND L.CONGESTION_ZONE_CD =T.CONGESTION_ZONE_CD AND L.PRODUCT_TYPE_CD=T.PRODUCT_TYPE_CD AND L.Component_Type_Cd=T.COMPONENT_TYPE_CD
											AND L.BOOK_CD=T.BOOK_CD AND L.LSE_CD=T.LSE_CD --AND L.METER_TYPE_CD=T.METER_TYPE_CD AND L.PROV_STATE_CD=T.PROV_STATE_CD
											)
			WHERE UNADJ_LOAD >0
			GROUP BY 
			 L.MARKET_CD,L.TOU_SCHEDULE_TYPE_CD,L.UFE_ZONE_CD,L.WEATHER_SENSITIVITY_CD,L.LOAD_PROFILE_CD,FORECAST_PROFILE_CD,
			 L.WEATHER_ZONE_CD,L.METER_TYPE_CD,L.BOOK_CD,L.LSE_CD,L.LOSS_CD,L.UTILITY_CD,L.CONGESTION_ZONE_CD,
			 L.PROV_STATE_CD,l.PRODUCT_TYPE_CD,L.COMPONENT_TYPE_CD ,TEMP_BAND_CD,SOURCE_CD, MONTH(FORECAST_DT),YEAR(FORECAST_DT),BLOCK_12X12_DESC,UFE_LOSS_LOAD,USAGE_FACTOR,
			 CRDT,BATCH_DT,BATCH_HR,T.ESIIDCNT
	

	DROP TABLE #TEMPESSIID 
	DROP TABLE #LT_CALCULATION_TEMP 
END
 
IF(@imode=2) 
BEGIn
	TRUNCATE TABLE AMS.IW_Growth_STNorm_Hourly

	CREATE TABLE  #ST_CALCULATION_TEMP(
		ST_CALCULATIONID INT IDENTITY (1,1) PRIMARY KEY,
		SALEINPUTID int,
		MARKET_CD			   varchar(10) NULL,
		TOU_SCHEDULE_TYPE_CD   varchar(10) NULL,
		UFE_ZONE_CD			   varchar(10) NULL,
		WEATHER_SENSITIVITY_CD varchar(10) NULL,
		LOAD_PROFILE_CD		   varchar(50) NULL,
		FORECAST_PROFILE_CD	   varchar(50) NULL,
		WEATHER_ZONE_CD		   varchar(20) NULL,
		METER_TYPE_CD		   varchar(4) NULL,
		BOOK_CD				   varchar(10) NULL,
		LSE_CD				   varchar(10) NULL,
		LOSS_CD				   varchar(50) NULL,
		UTILITY_CD			   varchar(50) NULL,
		CONGESTION_ZONE_CD	   varchar(50) NULL, 
		PROV_STATE_CD		   varchar(2) NULL,
		PRODUCT_TYPE_CD		   varchar(50) NULL,
		Component_Type_Cd	   varchar(2) NULL,
		TEMP_BAND_CD		   char(1) NULL,
		SOURCE_CD			   varchar(10) NULL,
		FORECAST_DT			   datetime NULL,
		HOUR_NUM			   int NULL,
		USAGE_FACTOR		   float NULL,
		ESIID_CNT			   int  NULL,
		UNADJ_LOAD			   numeric(18, 6) NULL,
		DISTRIB_LOSS_LOAD	   numeric(18, 6) NULL,
		TRANSMISSION_LOSS_LOAD numeric(18, 6) NULL,
		UFE_LOSS_LOAD		   numeric(18, 6) NULL,
		ANCILLARY_LOSS_LOAD	   numeric(18, 6) NULL,
		DERATION_LOSS_LOAD	   numeric(18, 6) NULL,
		CAP_OB				   float NULL,
		TRAN_OB				   float NULL,
		CRDT				   datetime2(3) NULL,
		BATCH_DT			   date NULL,
		BATCH_HR			   int NULL,
		BLOCK_12X12_DESC       varchar(5) null,
		WEATHER_STATION		   varchar(10) NULL,
		CLUSTER_CD			   varchar(50) NULL,
		FLOW_START_DT DATE ,
		FLOW_STOP_DT DATE,
	) 
	
	CREATE INDEX ST_INDEX ON #ST_CALCULATION_TEMP (ST_CALCULATIONID)
	CREATE  NONCLUSTERED INDEX IDX_FORECAST_DT ON #ST_CALCULATION_TEMP (FORECAST_DT,HOUR_NUM)

	DECLARE @iLOAD_PROFILE_CD varchar(50),
			@iFLOW_START_DT datetime,
			@iFLOW_STOP_DT datetime,
			@id INT 

	DECLARE  ST_LOOP CURSOR
	FOR  SELECT SALESINPUTFILEID, LOAD_PROFILE_CD,FLOW_START_DT,FLOW_STOP_DT FROM DBO.SalesInputFile 
	
	OPEN ST_LOOP   
	FETCH NEXT FROM ST_LOOP INTO @ID, @iLOAD_PROFILE_CD ,@iFLOW_START_DT,@iFLOW_STOP_DT

	WHILE @@FETCH_STATUS = 0   
	BEGIN   

	  ;WITH ST_CALCULATION AS (
					
						SELECT  
						SALESINPUTFILEID,  case SUBSTRING(PRODUCT_CD, 1, 3) when 'DER' then 'ERCOT'
						when 'PJM' then 'PJM' when 'NEP' then 'NEPOOL' when 'MIS' then 'MISO'else 'NYISO' end AS MARKET_CD,
						'NOTOU' AS TOU_SCHEDULE_TYPE_CD,'U1' AS UFE_ZONE_CD,'NWS' AS WEATHER_SENSITIVITY_CD,
						S.LOAD_PROFILE_CD,S.LOAD_PROFILE_CD AS FORECAST_PROFILE_CD,S.WEATHER_ZONE_CD,S.METER_TYPE_CD,
						S.BOOK_CD,S.LSE_CD,S.LOSS_CD,S.UTILITY_CD,S.CONGESTION_ZONE_CD,S.PROV_STATE_CD,S.PRODUCT_TYPE_CD,
						S.COMPONENT_TYPE_CD,'A' AS TEMP_BAND_CD,'N' AS SOURCE_CD,null AS FORECAST_DATE,null HOURNUM,AVG_UF AS USAGE_FACTOR,
						S.COUNT ESIID_CNT,00.0 AS UNADJ_LOAD, 000  AS DISTRIB_LOSS_LOAD,00 AS TRANSMISSION_LOSS_LOAD,
						0 AS UFE_LOSS_LOAD, 0 AS ANCILLARY_LOSS_LOAD,0 AS DERATION_LOSS_LOAD,NULL AS CAP_OB, NULL AS TRAN_OB,
						@dtnow AS	CRDT,@dtnow AS	BATCH_DT,NULL AS	BATCH_HR
						,WEATHER_STATION,CLUSTER_CD,FLOW_START_DT,FLOW_STOP_DT 
						FROM DBO.SalesInputFile S 
						WHERE SALESINPUTFILEID=@ID --and FLOW_START_DT > @dtnow
						and ( (SUBSTRING(PRODUCT_CD, 1, 3) = 'DER' and FLOW_START_DT > @dtnow)
						 or (SUBSTRING(PRODUCT_CD, 1, 3) <> 'DER' and FLOW_START_DT > @LTUSNSTARTDATE))
			)
			INSERT INTO #ST_CALCULATION_TEMP (SALEINPUTID, MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,FORECAST_PROFILE_CD,
			WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,LSE_CD,LOSS_CD,UTILITY_CD,CONGESTION_ZONE_CD,PROV_STATE_CD,PRODUCT_TYPE_CD,Component_Type_Cd,TEMP_BAND_CD,SOURCE_CD,
			FORECAST_DT,HOUR_NUM,USAGE_FACTOR,ESIID_CNT,UNADJ_LOAD,DISTRIB_LOSS_LOAD,TRANSMISSION_LOSS_LOAD,UFE_LOSS_LOAD,ANCILLARY_LOSS_LOAD,DERATION_LOSS_LOAD,
			CAP_OB,TRAN_OB,CRDT,BATCH_DT,BATCH_HR,BLOCK_12X12_DESC,WEATHER_STATION,CLUSTER_CD,FLOW_START_DT,FLOW_STOP_DT)
			SELECT 
				@id ,S.MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,
				concat([Load_profile_cd],'_',[weather_zone_cd])  AS FORECAST_PROFILE_CD,WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,LSE_CD,
				LOSS_CD,UTILITY_CD,CONGESTION_ZONE_CD,PROV_STATE_CD,PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,
				TEMP_BAND_CD,SOURCE_CD,D.HB_DATE FORECAST_DATE,D.HOUR_ENDING HOURNUM,USAGE_FACTOR,
				CASE  WHEN D.HB_DATE > @STSTARTDATE AND  D.HB_DATE <=@STENDDATE
									  THEN S.ESIID_CNT*USAGE_FACTOR
									  ELSE 0	
								 END ESIID_CNT,
				UNADJ_LOAD,DISTRIB_LOSS_LOAD,TRANSMISSION_LOSS_LOAD,UFE_LOSS_LOAD,ANCILLARY_LOSS_LOAD,
				DERATION_LOSS_LOAD,CAP_OB,TRAN_OB,CRDT,BATCH_DT,BATCH_HR,D.BLOCK_12X12_DESC,
				WEATHER_STATION,CLUSTER_CD,
				FLOW_START_DT,FLOW_STOP_DT 
			FROM ST_CALCULATION S 
			OUTER APPLY (
						SELECT HB_DATE,h.HOUR_ENDING,h.BLOCK_12X12_DESC  FROM AMS.IW_HOURLY_BREAKOUT H 
						WHERE  
						 CAST(H.HB_DATE AS DATE)>= CAST(@iFLOW_START_DT AS DATE)
						AND CAST(H.HB_DATE AS DATE)<=CAST(@iFLOW_STOP_DT AS DATE)
						AND H.HOUR_ENDING IS NOT NULL
						) D
			
			
			FETCH NEXT FROM ST_LOOP INTO @ID, @iLOAD_PROFILE_CD ,@iFLOW_START_DT,@iFLOW_STOP_DT
	END   

	CLOSE ST_LOOP   
	DEALLOCATE ST_LOOP
		
			
			UPDATE  c
			SET UNADJ_LOAD=isnull((c.ESIID_CNT*isnull(cst.LOAD,cn.load)/1000),0) 
			from #ST_CALCULATION_TEMP c 
			LEFT JOIN( SELECT cst.ZONE, cst.WEATHER_STATION,cst.CLUSTER_CD,cst.FORECAST_DT,cst.HOUR_NUM,cst.LOAD
						 from  [AMS].[IW_CLUSTER_ST] cst 
						 INNER JOIN (
						    SELECT cs.ZONE, cs.WEATHER_STATION,cs.CLUSTER_CD,cs.FORECAST_DT,cs.HOUR_NUM ,max(BATCH_DT) batchdate
							 FROM [AMS].[IW_CLUSTER_ST] cs
							 GROUP BY 
							cs.ZONE, cs.WEATHER_STATION,cs.CLUSTER_CD,cs.FORECAST_DT,cs.HOUR_NUM
							) t on cst.ZONE = t.ZONE and t.WEATHER_STATION=cst.WEATHER_STATION and cst.CLUSTER_CD=t.CLUSTER_CD and cst.FORECAST_DT=t.FORECAST_DT and cst.HOUR_NUM=t.HOUR_NUM and t.batchdate=cst.BATCH_DT
						) cst on   (c.CONGESTION_ZONE_CD=cst.ZONE AND c.WEATHER_STATION=cst.WEATHER_STATION AND c.CLUSTER_CD=cst.CLUSTER_CD AND c.FORECAST_DT=cst.FORECAST_DT and c.HOUR_NUM=cst.HOUR_NUM)
			LEFT JOIN [AMS].[IW_CLUSTER_NORMAL] cn on (c.CONGESTION_ZONE_CD=cn.ZONE AND c.WEATHER_STATION=cn.WEATHER_STATION AND c.CLUSTER_CD=cn.CLUSTER_CD   AND c.FORECAST_DT=cn.FORECAST_DT and c.HOUR_NUM=cn.HOUR_NUM)

			UPDATE  c
			SET DISTRIB_LOSS_LOAD=isnull(UNADJ_LOAD*dhl.DISTRIB_LOSS_PCT,0)
			from #ST_CALCULATION_TEMP c 
			left join [AMS].[IW_DISTR_HOURLY_LOSS] dhl on (c.MARKET_CD=dhl.MARKET_CD AND c.UTILITY_CD=dhl.UTILITY_CD AND C.LOSS_CD=DHL.LOSS_CD AND c.FORECAST_DT=dhl.FORECAST_DT and c.HOUR_NUM=dhl.HOUR_NUM )

			
			UPDATE  c
			SET TRANSMISSION_LOSS_LOAD =isnull((UNADJ_LOAD*thl.TRANSMISSION_LOSS_PCT)/100,0)
			from #ST_CALCULATION_TEMP c 
			left join [AMS].[IW_TRANS_HOURLY_LOSS]thl on (c.MARKET_CD=thl.MARKET_CD AND c.FORECAST_DT=thl.FORECAST_DT and c.HOUR_NUM=thl.HOUR_NUM) 

			UPDATE  c
			SET DERATION_LOSS_LOAD =isnull((UNADJ_LOAD*thl.DERATION_LOSS_PCT*-1)/100,0)
			from #ST_CALCULATION_TEMP c 
			left join [AMS].[IW_DERATION_HOURLY_LOSS]thl on (c.MARKET_CD=thl.MARKET_CD AND c.FORECAST_DT=thl.FORECAST_DT and c.HOUR_NUM=thl.HOUR_NUM) 

			select market_cd, utility_cd, congestion_zone_cd, load_profile_cd, avg(cast(capacity_plc_tag as float)/1000) as capacity_tag_avg, 
			isnull( avg(cast(transmis_plc_tag as float)/1000) , avg(cast(capacity_plc_tag as float)/1000)) as tranmission_tag_avg
				into #Defaulttags2
			from derlff.USNorth_Release.ActiveList
			where book_cd = 'org_ne' 
			group by market_cd, utility_cd, congestion_zone_cd, load_profile_cd
			order by market_cd, utility_cd, congestion_zone_cd, load_profile_cd
	
			UPDATE c
			SET CAP_OB = (isnull(capacity_tag_avg ,0) ) , TRAN_OB = (isnull(tranmission_tag_avg ,0) )
			from #ST_CALCULATION_TEMP c 
			inner join #Defaulttags2  a on 
			a.utility_cd=c.utility_cd and a.load_profile_cd=c.load_profile_cd and a.congestion_zone_cd=c.congestion_zone_cd
	
	     ;WITH CTE AS (
					SELECT MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,
	
							concat([Load_profile_cd],'_',[weather_zone_cd]) AS FORECAST_PROFILE_CD,
							WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,
							LSE_CD,LOSS_CD,UTILITY_CD,CONGESTION_ZONE_CD,PROV_STATE_CD,PRODUCT_TYPE_CD,
							COMPONENT_TYPE_CD,TEMP_BAND_CD,SOURCE_CD,FORECAST_DT,HOUR_NUM,USAGE_FACTOR,
							sum(ESIID_CNT)as ESIID_CNT,sum(UNADJ_LOAD)as UNADJ_LOAD,
							sum(DISTRIB_LOSS_LOAD) as DISTRIB_LOSS_LOAD,sum(TRANSMISSION_LOSS_LOAD)as TRANSMISSION_LOSS_LOAD,
							sum(UFE_LOSS_LOAD)as UFE_LOSS_LOAD,sum(ANCILLARY_LOSS_LOAD)as ANCILLARY_LOSS_LOAD,
							sum(DERATION_LOSS_LOAD)as DERATION_LOSS_LOAD,MAX(cast(CAP_OB as numeric(10,6))) as CAP_OB,
							MAX(cast(TRAN_OB as numeric(10,6))) as TRAN_OB,CRDT,BATCH_DT,BATCH_HR,BLOCK_12X12_DESC
							,WEATHER_STATION,CLUSTER_CD
					FROM #ST_CALCULATION_TEMP c
					GROUP BY 
					MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,FORECAST_PROFILE_CD,
					WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,LSE_CD,LOSS_CD,UTILITY_CD,CONGESTION_ZONE_CD,
					PROV_STATE_CD,PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,TEMP_BAND_CD,SOURCE_CD,FORECAST_DT,HOUR_NUM,
					USAGE_FACTOR,--CAP_OB,TRAN_OB,	
					CRDT,BATCH_DT,BATCH_HR,
					BLOCK_12X12_DESC,WEATHER_STATION,CLUSTER_CD
			)
		    INSERT INTO AMS.IW_Growth_STNorm_Hourly 
					(MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,FORECAST_PROFILE_CD,
					WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,LSE_CD,LOSS_CD,UTILITY_CD,
			CONGESTION_ZONE_CD,PROV_STATE_CD,PRODUCT_TYPE_CD,Component_Type_Cd,TEMP_BAND_CD,SOURCE_CD,Forecast_Dt,
			Hour_num,USAGE_FACTOR,ESIID_CNT,UNADJ_LOAD,DISTRIB_LOSS_LOAD,TRANSMISSION_LOSS_LOAD,UFE_LOSS_LOAD,ANCILLARY_LOSS_LOAD,
			DERATION_LOSS_LOAD,CAP_OB,TRAN_OB,CRDT,BATCH_DT,BATCH_HR
			)
			SELECT MARKET_CD,TOU_SCHEDULE_TYPE_CD,UFE_ZONE_CD,WEATHER_SENSITIVITY_CD,LOAD_PROFILE_CD,FORECAST_PROFILE_CD,
				   WEATHER_ZONE_CD,METER_TYPE_CD,BOOK_CD,LSE_CD,LOSS_CD,UTILITY_CD,CONGESTION_ZONE_CD,PROV_STATE_CD,
				   PRODUCT_TYPE_CD,COMPONENT_TYPE_CD,TEMP_BAND_CD,SOURCE_CD,FORECAST_DT,HOUR_NUM,USAGE_FACTOR,
				   case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then ESIID_CNT else 0 end ESIID_CNT, 
				   case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then UNADJ_LOAD else 0 end UNADJ_LOAD,
				   case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then DISTRIB_LOSS_LOAD else 0 end DISTRIB_LOSS_LOAD,
				   case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then TRANSMISSION_LOSS_LOAD else 0 end TRANSMISSION_LOSS_LOAD,
				   case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then UFE_LOSS_LOAD else 0 end UFE_LOSS_LOAD,
				   case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then ANCILLARY_LOSS_LOAD else 0 end ANCILLARY_LOSS_LOAD,
				   case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then DERATION_LOSS_LOAD else 0 end DERATION_LOSS_LOAD,
				   CAP_OB*(case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then ESIID_CNT else 0 end) as CAP_OB ,TRAN_OB*(case when cast(FORECAST_DT as date) >=  cast(getdate() as date) then ESIID_CNT else 0 end) as TRAN_OB,	CRDT,BATCH_DT,BATCH_HR--BLOCK_12X12_DESC
			FROM  CTE 
			WHERE ESIID_CNT>0 
					
		    DROP TABLE #ST_CALCULATION_TEMP

	
END

	IF(@imode=3)
	BEGIN
	
		SELECT MARKET_CD, TOU_SCHEDULE_TYPE_CD, UFE_ZONE_CD, WEATHER_SENSITIVITY_CD, LOAD_PROFILE_CD, 
		FORECAST_PROFILE_CD, WEATHER_ZONE_CD, METER_TYPE_CD, BOOK_CD, LSE_CD, LOSS_CD, UTILITY_CD,
		CONGESTION_ZONE_CD, PROV_STATE_CD, PRODUCT_TYPE_CD, COMPONENT_TYPE_CD, TEMP_BAND_CD, SOURCE_CD, 
		FORECAST_MONTH, BLOCK_12X12_DESC, USAGE_FACTOR, UNADJ_LOAD, ESIID_CNT, DISTRIB_LOSS_LOAD, 
		TRANSMISSION_LOSS_LOAD, UFE_LOSS_LOAD, ANCILLARY_LOSS_LOAD, DERATION_LOSS_LOAD,
		CAP_OB, TRAN_OB, CRDT, BATCH_DT, BATCH_HR
		FROM AMS.IW_Growth_LT_12X12
		ORDER BY MARKET_CD, TOU_SCHEDULE_TYPE_CD, UFE_ZONE_CD, WEATHER_SENSITIVITY_CD, LOAD_PROFILE_CD, 
		FORECAST_PROFILE_CD, WEATHER_ZONE_CD, METER_TYPE_CD, BOOK_CD, LSE_CD, LOSS_CD, UTILITY_CD,
		CONGESTION_ZONE_CD, PROV_STATE_CD, PRODUCT_TYPE_CD, COMPONENT_TYPE_CD, TEMP_BAND_CD, SOURCE_CD, 
		FORECAST_MONTH, BLOCK_12X12_DESC

	END
	
	IF(@imode=4)
	BEGIN

		SELECT MARKET_CD, TOU_SCHEDULE_TYPE_CD, UFE_ZONE_CD, WEATHER_SENSITIVITY_CD, LOAD_PROFILE_CD,
		FORECAST_PROFILE_CD, WEATHER_ZONE_CD, METER_TYPE_CD, BOOK_CD, LSE_CD, LOSS_CD, UTILITY_CD, 
		CONGESTION_ZONE_CD, PROV_STATE_CD, PRODUCT_TYPE_CD, Component_Type_Cd, TEMP_BAND_CD, 
		SOURCE_CD, Forecast_Dt, Hour_num, USAGE_FACTOR, ESIID_CNT, UNADJ_LOAD, DISTRIB_LOSS_LOAD, 
		TRANSMISSION_LOSS_LOAD, UFE_LOSS_LOAD, ANCILLARY_LOSS_LOAD, DERATION_LOSS_LOAD, CAP_OB, 
		TRAN_OB, CRDT, BATCH_DT, BATCH_HR
		FROM [AMS].[IW_Growth_STNorm_Hourly]
		ORDER BY Forecast_Dt ,Hour_num
	END

	
  END TRY

  BEGIN CATCH
DECLARE
      @ErrorMessage nvarchar(4000)
      ,@ErrorSeverity int
      ,@ErrorState int

    SELECT
      @ErrorMessage = ERROR_MESSAGE()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE();

    RAISERROR (
      @ErrorMessage, -- Message text.
      @ErrorSeverity, -- Severity.
      @ErrorState -- State.
      )

  END CATCH

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
SET NOCOUNT OFF;

END


GO

